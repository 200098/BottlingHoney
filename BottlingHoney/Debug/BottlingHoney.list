
BottlingHoney.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  080066f0  080066f0  000076f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a4c  08006a4c  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  08006a4c  08006a4c  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a4c  08006a4c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a4c  08006a4c  00007a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a50  08006a50  00007a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006a54  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f8  20000060  08006ab4  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000858  08006ab4  00008858  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001360b  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034fb  00000000  00000000  0001b694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0001eb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dfb  00000000  00000000  0001fd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f67  00000000  00000000  00020b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f08  00000000  00000000  0003aaf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e40d  00000000  00000000  000539fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1e07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f64  00000000  00000000  000e1e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e6db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080066d8 	.word	0x080066d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080066d8 	.word	0x080066d8

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <ButtonInit>:

/*
 * Initialization of button
 */
void ButtonInit(TButton* Button, GPIO_TypeDef* GpioPort, uint16_t GpioPin)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	4613      	mov	r3, r2
 8000838:	80fb      	strh	r3, [r7, #6]
	Button->GpioPort = GpioPort;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	605a      	str	r2, [r3, #4]
	Button->GpioPin = GpioPin;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	88fa      	ldrh	r2, [r7, #6]
 8000844:	811a      	strh	r2, [r3, #8]
	Button->LastTick = 0;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
	Button->State = IDLE_BUTTON;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
	Button->TimerDebounce = DEBOUNCE_TIME_MS;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	220a      	movs	r2, #10
 8000856:	611a      	str	r2, [r3, #16]
	Button->IsPressed = false;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
	Button->PressedAfterDebounce = false;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	2200      	movs	r2, #0
 8000862:	755a      	strb	r2, [r3, #21]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <ButtonHandleIRQ>:

void ButtonHandleIRQ(TButton* Button)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	Button->IsPressed = true;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2201      	movs	r2, #1
 800087a:	751a      	strb	r2, [r3, #20]
	Button->LastTick = HAL_GetTick();
 800087c:	f002 f94e 	bl	8002b1c <HAL_GetTick>
 8000880:	4602      	mov	r2, r0
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	60da      	str	r2, [r3, #12]
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <ButtonTask>:

/*
 * Button State Machine
 */
void ButtonTask(TButton* Button)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	switch(Button->State)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b02      	cmp	r3, #2
 800089c:	d036      	beq.n	800090c <ButtonTask+0x7e>
 800089e:	2b02      	cmp	r3, #2
 80008a0:	dc46      	bgt.n	8000930 <ButtonTask+0xa2>
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <ButtonTask+0x1e>
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d008      	beq.n	80008bc <ButtonTask+0x2e>
			{
				Button->State= IDLE_BUTTON;
			}
			break;
	}
}
 80008aa:	e041      	b.n	8000930 <ButtonTask+0xa2>
			if(true==Button->IsPressed)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	7d1b      	ldrb	r3, [r3, #20]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d03a      	beq.n	800092a <ButtonTask+0x9c>
				Button->State= DEBOUNCE_BUTTON;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
			break;
 80008ba:	e036      	b.n	800092a <ButtonTask+0x9c>
			if (HAL_GetTick() - Button->LastTick >= Button->TimerDebounce)
 80008bc:	f002 f92e 	bl	8002b1c <HAL_GetTick>
 80008c0:	4602      	mov	r2, r0
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	1ad2      	subs	r2, r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	691b      	ldr	r3, [r3, #16]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d319      	bcc.n	8000904 <ButtonTask+0x76>
				Button->LastTick = HAL_GetTick();
 80008d0:	f002 f924 	bl	8002b1c <HAL_GetTick>
 80008d4:	4602      	mov	r2, r0
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	60da      	str	r2, [r3, #12]
				if(BUTTON_PRESSED == HAL_GPIO_ReadPin(Button->GpioPort, Button->GpioPin))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	685a      	ldr	r2, [r3, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	891b      	ldrh	r3, [r3, #8]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4610      	mov	r0, r2
 80008e6:	f002 fd39 	bl	800335c <HAL_GPIO_ReadPin>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d106      	bne.n	80008fe <ButtonTask+0x70>
					Button->State= PRESSED_BUTTON;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2202      	movs	r2, #2
 80008f4:	701a      	strb	r2, [r3, #0]
					Button->PressedAfterDebounce = true;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2201      	movs	r2, #1
 80008fa:	755a      	strb	r2, [r3, #21]
 80008fc:	e002      	b.n	8000904 <ButtonTask+0x76>
					Button->State= IDLE_BUTTON;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
			Button->IsPressed = false;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	751a      	strb	r2, [r3, #20]
			break;
 800090a:	e011      	b.n	8000930 <ButtonTask+0xa2>
			if(BUTTON_RELEASED == HAL_GPIO_ReadPin(Button->GpioPort, Button->GpioPin))
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	891b      	ldrh	r3, [r3, #8]
 8000914:	4619      	mov	r1, r3
 8000916:	4610      	mov	r0, r2
 8000918:	f002 fd20 	bl	800335c <HAL_GPIO_ReadPin>
 800091c:	4603      	mov	r3, r0
 800091e:	2b01      	cmp	r3, #1
 8000920:	d105      	bne.n	800092e <ButtonTask+0xa0>
				Button->State= IDLE_BUTTON;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
			break;
 8000928:	e001      	b.n	800092e <ButtonTask+0xa0>
			break;
 800092a:	bf00      	nop
 800092c:	e000      	b.n	8000930 <ButtonTask+0xa2>
			break;
 800092e:	bf00      	nop
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <ButtonIsPressed>:
/*
 * Read actual state of button
 */

_Bool ButtonIsPressed(TButton* Button)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	if(Button->PressedAfterDebounce)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	7d5b      	ldrb	r3, [r3, #21]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d004      	beq.n	8000952 <ButtonIsPressed+0x1a>
	{
		Button->PressedAfterDebounce = false;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	755a      	strb	r2, [r3, #21]
		return true;
 800094e:	2301      	movs	r3, #1
 8000950:	e000      	b.n	8000954 <ButtonIsPressed+0x1c>
	}
	return false;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <BuzzerInit>:
 * Initialization of buzzer
 */


void BuzzerInit(TBuzzer* Buzzer, GPIO_TypeDef* GpioPort, uint16_t GpioPin)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b084      	sub	sp, #16
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	4613      	mov	r3, r2
 800096a:	80fb      	strh	r3, [r7, #6]
	Buzzer->GpioPort = GpioPort;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	601a      	str	r2, [r3, #0]
	Buzzer->GpioPin = GpioPin;
 8000972:	88fa      	ldrh	r2, [r7, #6]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	605a      	str	r2, [r3, #4]
	HAL_GPIO_WritePin(Buzzer->GpioPort, Buzzer->GpioPin, GPIO_PIN_RESET);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	6818      	ldr	r0, [r3, #0]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	b29b      	uxth	r3, r3
 8000982:	2200      	movs	r2, #0
 8000984:	4619      	mov	r1, r3
 8000986:	f002 fd00 	bl	800338a <HAL_GPIO_WritePin>
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <BuzzerSetSignalTime>:

/*
 * Setting time of signal in ms
 */
void BuzzerSetSignalTime(TBuzzer* Buzzer, uint32_t TimeToSet)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
	Buzzer->LastTick = HAL_GetTick();
 800099c:	f002 f8be 	bl	8002b1c <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	609a      	str	r2, [r3, #8]
	Buzzer->SignalTime = TimeToSet;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	60da      	str	r2, [r3, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <BuzzerPlay>:
/*
 * Play signal by buzzer
 */

void BuzzerPlay(TBuzzer* Buzzer,TPlayPressed PlaySignal)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	70fb      	strb	r3, [r7, #3]
	switch(PlaySignal)
 80009c0:	78fb      	ldrb	r3, [r7, #3]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d84a      	bhi.n	8000a5c <BuzzerPlay+0xa8>
 80009c6:	a201      	add	r2, pc, #4	@ (adr r2, 80009cc <BuzzerPlay+0x18>)
 80009c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009cc:	080009dd 	.word	0x080009dd
 80009d0:	080009f9 	.word	0x080009f9
 80009d4:	08000a17 	.word	0x08000a17
 80009d8:	08000a35 	.word	0x08000a35
	{
		case PRESSED:
			HAL_GPIO_WritePin(Buzzer->GpioPort, Buzzer->GpioPin, GPIO_PIN_SET);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6818      	ldr	r0, [r3, #0]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	2201      	movs	r2, #1
 80009e8:	4619      	mov	r1, r3
 80009ea:	f002 fcce 	bl	800338a <HAL_GPIO_WritePin>
			BuzzerSetSignalTime(Buzzer, PRESSED_TIME_MS);
 80009ee:	2132      	movs	r1, #50	@ 0x32
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ffce 	bl	8000992 <BuzzerSetSignalTime>
			break;
 80009f6:	e031      	b.n	8000a5c <BuzzerPlay+0xa8>
		case CHANGE_STEP:
			HAL_GPIO_WritePin(Buzzer->GpioPort, Buzzer->GpioPin, GPIO_PIN_SET);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6818      	ldr	r0, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	2201      	movs	r2, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	f002 fcc0 	bl	800338a <HAL_GPIO_WritePin>
			BuzzerSetSignalTime(Buzzer, CHANGE_STEP_TIME_MS);
 8000a0a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ffbf 	bl	8000992 <BuzzerSetSignalTime>
			break;
 8000a14:	e022      	b.n	8000a5c <BuzzerPlay+0xa8>
		case FINISH:
			HAL_GPIO_WritePin(Buzzer->GpioPort, Buzzer->GpioPin, GPIO_PIN_SET);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	2201      	movs	r2, #1
 8000a22:	4619      	mov	r1, r3
 8000a24:	f002 fcb1 	bl	800338a <HAL_GPIO_WritePin>
			BuzzerSetSignalTime(Buzzer, FINISH_TIME_MS);
 8000a28:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ffb0 	bl	8000992 <BuzzerSetSignalTime>
			break;
 8000a32:	e013      	b.n	8000a5c <BuzzerPlay+0xa8>
		case STOP:
			if (HAL_GetTick() - Buzzer->LastTick >= Buzzer->SignalTime)
 8000a34:	f002 f872 	bl	8002b1c <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	1ad2      	subs	r2, r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d308      	bcc.n	8000a5a <BuzzerPlay+0xa6>
				HAL_GPIO_WritePin(Buzzer->GpioPort, Buzzer->GpioPin, GPIO_PIN_RESET);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6818      	ldr	r0, [r3, #0]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	2200      	movs	r2, #0
 8000a54:	4619      	mov	r1, r3
 8000a56:	f002 fc98 	bl	800338a <HAL_GPIO_WritePin>
			break;
 8000a5a:	bf00      	nop
	}
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <Eeprom_Init>:
/*
 * Initialization of EEPROM
 */

void Eeprom_Init(I2C_HandleTypeDef *i2c)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	eeprom_i2c = i2c;
 8000a6c:	4a03      	ldr	r2, [pc, #12]	@ (8000a7c <Eeprom_Init+0x18>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	2000007c 	.word	0x2000007c

08000a80 <Eeprom_ReadCalibration>:
/*
 * Read calibration of HX711 saved to EEPROM
 */

TCalibration Eeprom_ReadCalibration(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af04      	add	r7, sp, #16
 8000a86:	6078      	str	r0, [r7, #4]
	uint8_t ReadDataTable[8];
	TCalibration Calibration;

	HAL_I2C_Mem_Read(eeprom_i2c, EEPROM_ADDRESS, EEPROM_REGISTER, 1, ReadDataTable, 8, EEPROM_TIMEOUT);
 8000a88:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <Eeprom_ReadCalibration+0x70>)
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a90:	9302      	str	r3, [sp, #8]
 8000a92:	2308      	movs	r3, #8
 8000a94:	9301      	str	r3, [sp, #4]
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	21a0      	movs	r1, #160	@ 0xa0
 8000aa2:	f002 fef9 	bl	8003898 <HAL_I2C_Mem_Read>
	Calibration.ReferenceEmptyWeight = ReadDataTable[3] | (ReadDataTable[2] << 8) | (ReadDataTable[1] << 16) | (ReadDataTable[0] << 24);
 8000aa6:	7cfb      	ldrb	r3, [r7, #19]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	7cbb      	ldrb	r3, [r7, #18]
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	7c7b      	ldrb	r3, [r7, #17]
 8000ab2:	041b      	lsls	r3, r3, #16
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	7c3b      	ldrb	r3, [r7, #16]
 8000ab8:	061b      	lsls	r3, r3, #24
 8000aba:	4313      	orrs	r3, r2
 8000abc:	60bb      	str	r3, [r7, #8]
	Calibration.CalibValue = ReadDataTable[7] | (ReadDataTable[6] << 8) | (ReadDataTable[5] << 16) | (ReadDataTable[4] << 24);
 8000abe:	7dfb      	ldrb	r3, [r7, #23]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	7dbb      	ldrb	r3, [r7, #22]
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	7d7b      	ldrb	r3, [r7, #21]
 8000aca:	041b      	lsls	r3, r3, #16
 8000acc:	431a      	orrs	r2, r3
 8000ace:	7d3b      	ldrb	r3, [r7, #20]
 8000ad0:	061b      	lsls	r3, r3, #24
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]

	return Calibration;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ae2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000007c 	.word	0x2000007c

08000af4 <Eeprom_SendCalibration>:
/*
 * Saved to EEPROM new calibration of HX711
 */

void Eeprom_SendCalibration(TCalibration Calibration)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	463b      	mov	r3, r7
 8000afc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t WriteDataTable[8];

	WriteDataTable[0]=(Calibration.ReferenceEmptyWeight >> 24) & 0xFF;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	0e1b      	lsrs	r3, r3, #24
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	723b      	strb	r3, [r7, #8]
	WriteDataTable[1]=(Calibration.ReferenceEmptyWeight >> 16) & 0xFF;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	0c1b      	lsrs	r3, r3, #16
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	727b      	strb	r3, [r7, #9]
	WriteDataTable[2]=(Calibration.ReferenceEmptyWeight >> 8) & 0xFF;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	0a1b      	lsrs	r3, r3, #8
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	72bb      	strb	r3, [r7, #10]
	WriteDataTable[3]=(Calibration.ReferenceEmptyWeight) & 0xFF;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	72fb      	strb	r3, [r7, #11]

	WriteDataTable[4]=(Calibration.CalibValue >> 24) & 0xFF;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	0e1b      	lsrs	r3, r3, #24
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	733b      	strb	r3, [r7, #12]
	WriteDataTable[5]=(Calibration.CalibValue >> 16) & 0xFF;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	0c1b      	lsrs	r3, r3, #16
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	737b      	strb	r3, [r7, #13]
	WriteDataTable[6]=(Calibration.CalibValue >> 8) & 0xFF;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	73bb      	strb	r3, [r7, #14]
	WriteDataTable[7]=(Calibration.CalibValue) & 0xFF;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	73fb      	strb	r3, [r7, #15]

	Eeprom_WriteData(WriteDataTable);
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 f805 	bl	8000b50 <Eeprom_WriteData>
}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <Eeprom_WriteData>:
/*
 * Send Table to EEPROM
 */

void Eeprom_WriteData(uint8_t *TableToSend)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af04      	add	r7, sp, #16
 8000b56:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Write(eeprom_i2c, EEPROM_ADDRESS, EEPROM_REGISTER, 1, TableToSend, 8, EEPROM_TIMEOUT);
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <Eeprom_WriteData+0x2c>)
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b60:	9302      	str	r3, [sp, #8]
 8000b62:	2308      	movs	r3, #8
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	21a0      	movs	r1, #160	@ 0xa0
 8000b70:	f002 fd98 	bl	80036a4 <HAL_I2C_Mem_Write>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	2000007c 	.word	0x2000007c

08000b80 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000b88:	4a03      	ldr	r2, [pc, #12]	@ (8000b98 <GFX_SetFont+0x18>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	20000080 	.word	0x20000080

08000b9c <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d002      	beq.n	8000bb2 <GFX_SetFontSize+0x16>
		size = size_t;
 8000bac:	4a03      	ldr	r2, [pc, #12]	@ (8000bbc <GFX_SetFontSize+0x20>)
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	7013      	strb	r3, [r2, #0]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	20000000 	.word	0x20000000

08000bc0 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b089      	sub	sp, #36	@ 0x24
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	461a      	mov	r2, r3
 8000bce:	460b      	mov	r3, r1
 8000bd0:	71fb      	strb	r3, [r7, #7]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b7e      	cmp	r3, #126	@ 0x7e
 8000bda:	f200 80a3 	bhi.w	8000d24 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000bde:	2300      	movs	r3, #0
 8000be0:	75fb      	strb	r3, [r7, #23]
 8000be2:	e096      	b.n	8000d12 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8000be4:	4b51      	ldr	r3, [pc, #324]	@ (8000d2c <GFX_DrawChar+0x16c>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	3b20      	subs	r3, #32
 8000bec:	494f      	ldr	r1, [pc, #316]	@ (8000d2c <GFX_DrawChar+0x16c>)
 8000bee:	6809      	ldr	r1, [r1, #0]
 8000bf0:	3101      	adds	r1, #1
 8000bf2:	7809      	ldrb	r1, [r1, #0]
 8000bf4:	fb03 f101 	mul.w	r1, r3, r1
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	440b      	add	r3, r1
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000c04:	2300      	movs	r3, #0
 8000c06:	757b      	strb	r3, [r7, #21]
 8000c08:	e078      	b.n	8000cfc <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 8000c0a:	7dbb      	ldrb	r3, [r7, #22]
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d032      	beq.n	8000c7a <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8000c14:	4b46      	ldr	r3, [pc, #280]	@ (8000d30 <GFX_DrawChar+0x170>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d113      	bne.n	8000c44 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8000c1c:	7dfb      	ldrb	r3, [r7, #23]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	4413      	add	r3, r2
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	b218      	sxth	r0, r3
 8000c2a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	4413      	add	r3, r2
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	79ba      	ldrb	r2, [r7, #6]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f000 fff5 	bl	8001c2c <SSD1306_DrawPixel>
 8000c42:	e052      	b.n	8000cea <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8000c44:	7dfb      	ldrb	r3, [r7, #23]
 8000c46:	4a3a      	ldr	r2, [pc, #232]	@ (8000d30 <GFX_DrawChar+0x170>)
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	fb03 f202 	mul.w	r2, r3, r2
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	18d0      	adds	r0, r2, r3
 8000c52:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000c56:	4a36      	ldr	r2, [pc, #216]	@ (8000d30 <GFX_DrawChar+0x170>)
 8000c58:	7812      	ldrb	r2, [r2, #0]
 8000c5a:	fb03 f202 	mul.w	r2, r3, r2
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	18d1      	adds	r1, r2, r3
 8000c62:	4b33      	ldr	r3, [pc, #204]	@ (8000d30 <GFX_DrawChar+0x170>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b31      	ldr	r3, [pc, #196]	@ (8000d30 <GFX_DrawChar+0x170>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461c      	mov	r4, r3
 8000c6e:	79bb      	ldrb	r3, [r7, #6]
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	4623      	mov	r3, r4
 8000c74:	f000 f9a3 	bl	8000fbe <GFX_DrawFillRectangle>
 8000c78:	e037      	b.n	8000cea <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 8000c7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d133      	bne.n	8000cea <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8000c82:	4b2b      	ldr	r3, [pc, #172]	@ (8000d30 <GFX_DrawChar+0x170>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d114      	bne.n	8000cb4 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 8000c8a:	7dfb      	ldrb	r3, [r7, #23]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	4413      	add	r3, r2
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	b218      	sxth	r0, r3
 8000c98:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	4413      	add	r3, r2
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	b21b      	sxth	r3, r3
 8000ca8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000cac:	4619      	mov	r1, r3
 8000cae:	f000 ffbd 	bl	8001c2c <SSD1306_DrawPixel>
 8000cb2:	e01a      	b.n	8000cea <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 8000cb4:	7dfb      	ldrb	r3, [r7, #23]
 8000cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d30 <GFX_DrawChar+0x170>)
 8000cb8:	7812      	ldrb	r2, [r2, #0]
 8000cba:	fb03 f202 	mul.w	r2, r3, r2
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	18d0      	adds	r0, r2, r3
 8000cc2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8000d30 <GFX_DrawChar+0x170>)
 8000cc8:	7812      	ldrb	r2, [r2, #0]
 8000cca:	fb03 f202 	mul.w	r2, r3, r2
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	18d1      	adds	r1, r2, r3
 8000cd2:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <GFX_DrawChar+0x170>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <GFX_DrawChar+0x170>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461c      	mov	r4, r3
 8000cde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	4623      	mov	r3, r4
 8000ce6:	f000 f96a 	bl	8000fbe <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000cea:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	757b      	strb	r3, [r7, #21]
 8000cf6:	7dbb      	ldrb	r3, [r7, #22]
 8000cf8:	085b      	lsrs	r3, r3, #1
 8000cfa:	75bb      	strb	r3, [r7, #22]
 8000cfc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000d00:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <GFX_DrawChar+0x16c>)
 8000d02:	6812      	ldr	r2, [r2, #0]
 8000d04:	7812      	ldrb	r2, [r2, #0]
 8000d06:	4293      	cmp	r3, r2
 8000d08:	f6ff af7f 	blt.w	8000c0a <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	75fb      	strb	r3, [r7, #23]
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <GFX_DrawChar+0x16c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	7dfa      	ldrb	r2, [r7, #23]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f4ff af61 	bcc.w	8000be4 <GFX_DrawChar+0x24>
 8000d22:	e000      	b.n	8000d26 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8000d24:	bf00      	nop
            }
        }
    }
}
 8000d26:	371c      	adds	r7, #28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	20000080 	.word	0x20000080
 8000d30:	20000000 	.word	0x20000000

08000d34 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af02      	add	r7, sp, #8
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8000d4c:	e03e      	b.n	8000dcc <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8000d4e:	78f9      	ldrb	r1, [r7, #3]
 8000d50:	7cfa      	ldrb	r2, [r7, #19]
 8000d52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	68b9      	ldr	r1, [r7, #8]
 8000d5c:	6978      	ldr	r0, [r7, #20]
 8000d5e:	f7ff ff2f 	bl	8000bc0 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8000d62:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <GFX_DrawString+0xb0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000de8 <GFX_DrawString+0xb4>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	fb02 f303 	mul.w	r3, r2, r3
 8000d74:	3301      	adds	r3, #1
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	4413      	add	r3, r2
 8000d7a:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8000d7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d120      	bne.n	8000dc6 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	74bb      	strb	r3, [r7, #18]
 8000d88:	e012      	b.n	8000db0 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	b218      	sxth	r0, r3
 8000d94:	7cbb      	ldrb	r3, [r7, #18]
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	4413      	add	r3, r2
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	2200      	movs	r2, #0
 8000da4:	4619      	mov	r1, r3
 8000da6:	f000 ff41 	bl	8001c2c <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 8000daa:	7cbb      	ldrb	r3, [r7, #18]
 8000dac:	3301      	adds	r3, #1
 8000dae:	74bb      	strb	r3, [r7, #18]
 8000db0:	7cba      	ldrb	r2, [r7, #18]
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <GFX_DrawString+0xb0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <GFX_DrawString+0xb4>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	fb01 f303 	mul.w	r3, r1, r3
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbe1      	blt.n	8000d8a <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1ba      	bne.n	8000d4e <GFX_DrawString+0x1a>
	}
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000080 	.word	0x20000080
 8000de8:	20000000 	.word	0x20000000

08000dec <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	@ 0x30
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e04:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	1acb      	subs	r3, r1, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	bfb8      	it	lt
 8000e12:	425b      	neglt	r3, r3
 8000e14:	429a      	cmp	r2, r3
 8000e16:	bfcc      	ite	gt
 8000e18:	2301      	movgt	r3, #1
 8000e1a:	2300      	movle	r3, #0
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	857b      	strh	r3, [r7, #42]	@ 0x2a

	    if (steep) {
 8000e20:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d00b      	beq.n	8000e40 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e32:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	623b      	str	r3, [r7, #32]
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	6a3b      	ldr	r3, [r7, #32]
 8000e3e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dd0b      	ble.n	8000e60 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	61fb      	str	r3, [r7, #28]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	61bb      	str	r3, [r7, #24]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bfb8      	it	lt
 8000e78:	425b      	neglt	r3, r3
 8000e7a:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8000e7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e80:	0fda      	lsrs	r2, r3, #31
 8000e82:	4413      	add	r3, r2
 8000e84:	105b      	asrs	r3, r3, #1
 8000e86:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8000e88:	68ba      	ldr	r2, [r7, #8]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	da02      	bge.n	8000e96 <GFX_WriteLine+0xaa>
	        ystep = 1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000e94:	e030      	b.n	8000ef8 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 8000e96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e9a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8000e9c:	e02c      	b.n	8000ef8 <GFX_WriteLine+0x10c>
	        if (steep) {
 8000e9e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d009      	beq.n	8000eba <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	b211      	sxth	r1, r2
 8000eae:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 feba 	bl	8001c2c <SSD1306_DrawPixel>
 8000eb8:	e008      	b.n	8000ecc <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	b21b      	sxth	r3, r3
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	b211      	sxth	r1, r2
 8000ec2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 feb0 	bl	8001c2c <SSD1306_DrawPixel>
	        }
	        err -= dy;
 8000ecc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000ece:	8abb      	ldrh	r3, [r7, #20]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	        if (err < 0) {
 8000ed6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	da09      	bge.n	8000ef2 <GFX_WriteLine+0x106>
	            y_start += ystep;
 8000ede:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8000ee8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000eea:	8afb      	ldrh	r3, [r7, #22]
 8000eec:	4413      	add	r3, r2
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    for (; x_start<=x_end; x_start++) {
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	ddce      	ble.n	8000e9e <GFX_WriteLine+0xb2>
	        }
	    }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3730      	adds	r7, #48	@ 0x30
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af02      	add	r7, sp, #8
 8000f10:	60f8      	str	r0, [r7, #12]
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	1e5a      	subs	r2, r3, #1
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	4613      	mov	r3, r2
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f7ff ff5e 	bl	8000dec <GFX_WriteLine>
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	1e5a      	subs	r2, r3, #1
 8000f4e:	78fb      	ldrb	r3, [r7, #3]
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f7ff ff48 	bl	8000dec <GFX_WriteLine>
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <GFX_DrawRectangle>:
	    }
}
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	4611      	mov	r1, r2
 8000f70:	461a      	mov	r2, r3
 8000f72:	460b      	mov	r3, r1
 8000f74:	80fb      	strh	r3, [r7, #6]
 8000f76:	4613      	mov	r3, r2
 8000f78:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 8000f7a:	88fa      	ldrh	r2, [r7, #6]
 8000f7c:	7e3b      	ldrb	r3, [r7, #24]
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f7ff ffd9 	bl	8000f38 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 8000f86:	88ba      	ldrh	r2, [r7, #4]
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	1e59      	subs	r1, r3, #1
 8000f8e:	88fa      	ldrh	r2, [r7, #6]
 8000f90:	7e3b      	ldrb	r3, [r7, #24]
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f7ff ffd0 	bl	8000f38 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 8000f98:	88ba      	ldrh	r2, [r7, #4]
 8000f9a:	7e3b      	ldrb	r3, [r7, #24]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f7ff ffb3 	bl	8000f0a <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 8000fa4:	88fa      	ldrh	r2, [r7, #6]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	1e58      	subs	r0, r3, #1
 8000fac:	88ba      	ldrh	r2, [r7, #4]
 8000fae:	7e3b      	ldrb	r3, [r7, #24]
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	f7ff ffaa 	bl	8000f0a <GFX_DrawFastVLine>

}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	4611      	mov	r1, r2
 8000fca:	461a      	mov	r2, r3
 8000fcc:	460b      	mov	r3, r1
 8000fce:	80fb      	strh	r3, [r7, #6]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	e009      	b.n	8000fee <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8000fda:	88ba      	ldrh	r2, [r7, #4]
 8000fdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ff91 	bl	8000f0a <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	88fa      	ldrh	r2, [r7, #6]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	dbef      	blt.n	8000fda <GFX_DrawFillRectangle+0x1c>
    }

}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HX711_Init>:

/*
 * Initialization peripheral for HX711
 */
void HX711_Init(TIM_HandleTypeDef *htim)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f003 fecb 	bl	8004da8 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001018:	4809      	ldr	r0, [pc, #36]	@ (8001040 <HX711_Init+0x3c>)
 800101a:	f002 f9b6 	bl	800338a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800101e:	200a      	movs	r0, #10
 8001020:	f001 fd86 	bl	8002b30 <HAL_Delay>
	HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800102a:	4805      	ldr	r0, [pc, #20]	@ (8001040 <HX711_Init+0x3c>)
 800102c:	f002 f9ad 	bl	800338a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001030:	200a      	movs	r0, #10
 8001032:	f001 fd7d 	bl	8002b30 <HAL_Delay>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40010c00 	.word	0x40010c00

08001044 <HX711_getRawData>:
/*
 * Read raw data, code from documentation (update 05.03.2025)
 * https://cdn.sparkfun.com/datasheets/Sensors/ForceFlex/hx711_english.pdf
 */
int32_t HX711_getRawData(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
	  uint32_t data = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
	  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 800104e:	bf00      	nop
 8001050:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001054:	4820      	ldr	r0, [pc, #128]	@ (80010d8 <HX711_getRawData+0x94>)
 8001056:	f002 f981 	bl	800335c <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	2b01      	cmp	r3, #1
 800105e:	d0f7      	beq.n	8001050 <HX711_getRawData+0xc>
	  {
	  }

	  for(int8_t len=0; len<24 ; len++)
 8001060:	2300      	movs	r3, #0
 8001062:	70fb      	strb	r3, [r7, #3]
 8001064:	e01f      	b.n	80010a6 <HX711_getRawData+0x62>
	  {
	    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800106c:	481a      	ldr	r0, [pc, #104]	@ (80010d8 <HX711_getRawData+0x94>)
 800106e:	f002 f98c 	bl	800338a <HAL_GPIO_WritePin>
	    data = data << 1;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	607b      	str	r3, [r7, #4]
	    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800107e:	4816      	ldr	r0, [pc, #88]	@ (80010d8 <HX711_getRawData+0x94>)
 8001080:	f002 f983 	bl	800338a <HAL_GPIO_WritePin>
	    if(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8001084:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001088:	4813      	ldr	r0, [pc, #76]	@ (80010d8 <HX711_getRawData+0x94>)
 800108a:	f002 f967 	bl	800335c <HAL_GPIO_ReadPin>
 800108e:	4603      	mov	r3, r0
 8001090:	2b01      	cmp	r3, #1
 8001092:	d102      	bne.n	800109a <HX711_getRawData+0x56>
	    {
	    	data ++;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3301      	adds	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
	  for(int8_t len=0; len<24 ; len++)
 800109a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	3301      	adds	r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	70fb      	strb	r3, [r7, #3]
 80010a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010aa:	2b17      	cmp	r3, #23
 80010ac:	dddb      	ble.n	8001066 <HX711_getRawData+0x22>
	    }
	  }

	  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b4:	4808      	ldr	r0, [pc, #32]	@ (80010d8 <HX711_getRawData+0x94>)
 80010b6:	f002 f968 	bl	800338a <HAL_GPIO_WritePin>
	  data = data ^ 0x800000;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 80010c0:	607b      	str	r3, [r7, #4]
	  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010c8:	4803      	ldr	r0, [pc, #12]	@ (80010d8 <HX711_getRawData+0x94>)
 80010ca:	f002 f95e 	bl	800338a <HAL_GPIO_WritePin>

	  return data;
 80010ce:	687b      	ldr	r3, [r7, #4]

}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40010c00 	.word	0x40010c00

080010dc <HX711_getAverageWeight>:
/*
 * Calculate average weight
 */

int32_t HX711_getAverageWeight(uint8_t NumberOfSamples)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	int32_t  total = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
	for(uint16_t i=0 ; i<NumberOfSamples ; i++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	827b      	strh	r3, [r7, #18]
 80010ee:	e008      	b.n	8001102 <HX711_getAverageWeight+0x26>
	{
		total += HX711_getRawData();
 80010f0:	f7ff ffa8 	bl	8001044 <HX711_getRawData>
 80010f4:	4602      	mov	r2, r0
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	4413      	add	r3, r2
 80010fa:	617b      	str	r3, [r7, #20]
	for(uint16_t i=0 ; i<NumberOfSamples ; i++)
 80010fc:	8a7b      	ldrh	r3, [r7, #18]
 80010fe:	3301      	adds	r3, #1
 8001100:	827b      	strh	r3, [r7, #18]
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	b29b      	uxth	r3, r3
 8001106:	8a7a      	ldrh	r2, [r7, #18]
 8001108:	429a      	cmp	r2, r3
 800110a:	d3f1      	bcc.n	80010f0 <HX711_getAverageWeight+0x14>
    }
	int32_t average = (int32_t)(total / NumberOfSamples);
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	fb92 f3f3 	sdiv	r3, r2, r3
 8001114:	60fb      	str	r3, [r7, #12]
	return average;
 8001116:	68fb      	ldr	r3, [r7, #12]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HX711_getCalculatedWeight>:
/*
 * Calculate weight to milligrams
 */

int32_t HX711_getCalculatedWeight(TCalibration Calibration)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	463b      	mov	r3, r7
 8001128:	e883 0003 	stmia.w	r3, {r0, r1}
  int32_t  average;
  int milligram;

  average = HX711_getAverageWeight(BOTTLING_NUM_OF_PROBES);
 800112c:	2005      	movs	r0, #5
 800112e:	f7ff ffd5 	bl	80010dc <HX711_getAverageWeight>
 8001132:	60f8      	str	r0, [r7, #12]

  milligram = (int32_t)((average-Calibration.ReferenceEmptyWeight)/Calibration.CalibValue);
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	1ad2      	subs	r2, r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001140:	60bb      	str	r3, [r7, #8]
  if(milligram > MAXIMUM_WEIGHT || milligram < MINIMUM_WEIGHT)
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001148:	4293      	cmp	r3, r2
 800114a:	dc02      	bgt.n	8001152 <HX711_getCalculatedWeight+0x32>
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	2b00      	cmp	r3, #0
 8001150:	da01      	bge.n	8001156 <HX711_getCalculatedWeight+0x36>
  {
	  return 0;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HX711_getCalculatedWeight+0x38>
  }
  return milligram;
 8001156:	68bb      	ldr	r3, [r7, #8]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HX711_calibration>:
/*
 * Prepere calibration of HX711 when reference weight is on the platform
 */

TCalibration HX711_calibration(TCalibration CalibrationWithEmptyWeight)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	e883 0006 	stmia.w	r3, {r1, r2}
	TCalibration Calibration;
	int weightOfReference = HX711_getAverageWeight(CALIBRATION_NUM_OF_PROBES);
 800116e:	200a      	movs	r0, #10
 8001170:	f7ff ffb4 	bl	80010dc <HX711_getAverageWeight>
 8001174:	61f8      	str	r0, [r7, #28]
	Calibration.ReferenceEmptyWeight = CalibrationWithEmptyWeight.ReferenceEmptyWeight;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	617b      	str	r3, [r7, #20]
	Calibration.CalibValue = (int)((weightOfReference-CalibrationWithEmptyWeight.ReferenceEmptyWeight)/OWN_REFERENCE_WEIGHT_GRAMS);
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	4a08      	ldr	r2, [pc, #32]	@ (80011a4 <HX711_calibration+0x44>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	0a9b      	lsrs	r3, r3, #10
 8001188:	61bb      	str	r3, [r7, #24]

	return Calibration;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	461a      	mov	r2, r3
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001196:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	cfe2c41d 	.word	0xcfe2c41d

080011a8 <DisplayInit>:
/*
 * Initialization of display with default values
 */

void DisplayInit(I2C_HandleTypeDef *i2c)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	SSD1306_Init(i2c);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fe05 	bl	8001dc0 <SSD1306_Init>
	GFX_SetFont(font_8x5);
 80011b6:	4806      	ldr	r0, [pc, #24]	@ (80011d0 <DisplayInit+0x28>)
 80011b8:	f7ff fce2 	bl	8000b80 <GFX_SetFont>
	GFX_SetFontSize(1);
 80011bc:	2001      	movs	r0, #1
 80011be:	f7ff fced 	bl	8000b9c <GFX_SetFontSize>
	SSD1306_Clear(BLACK);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 fdc0 	bl	8001d48 <SSD1306_Clear>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	0800680c 	.word	0x0800680c

080011d4 <DisplayWithoutParameters>:

/*
 * Display messages without parameters
 */
void DisplayWithoutParameters(THoneyDisplayWOParameter Display)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af02      	add	r7, sp, #8
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
	switch(Display)
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b08      	cmp	r3, #8
 80011e2:	f200 810a 	bhi.w	80013fa <DisplayWithoutParameters+0x226>
 80011e6:	a201      	add	r2, pc, #4	@ (adr r2, 80011ec <DisplayWithoutParameters+0x18>)
 80011e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ec:	08001211 	.word	0x08001211
 80011f0:	08001239 	.word	0x08001239
 80011f4:	08001277 	.word	0x08001277
 80011f8:	0800129f 	.word	0x0800129f
 80011fc:	080012dd 	.word	0x080012dd
 8001200:	0800132b 	.word	0x0800132b
 8001204:	08001363 	.word	0x08001363
 8001208:	0800139b 	.word	0x0800139b
 800120c:	080013c3 	.word	0x080013c3
	{
		case DISPLAY_IDLE:
		{
			SSD1306_Clear(BLACK);
 8001210:	2000      	movs	r0, #0
 8001212:	f000 fd99 	bl	8001d48 <SSD1306_Clear>
			GFX_SetFontSize(2);
 8001216:	2002      	movs	r0, #2
 8001218:	f7ff fcc0 	bl	8000b9c <GFX_SetFontSize>
			GFX_DrawString(20 , 20, "Start up", WHITE, BLACK);
 800121c:	2300      	movs	r3, #0
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	4a78      	ldr	r2, [pc, #480]	@ (8001404 <DisplayWithoutParameters+0x230>)
 8001224:	2114      	movs	r1, #20
 8001226:	2014      	movs	r0, #20
 8001228:	f7ff fd84 	bl	8000d34 <GFX_DrawString>
			SSD1306_Display();
 800122c:	f000 fdaa 	bl	8001d84 <SSD1306_Display>
			GFX_SetFontSize(1);
 8001230:	2001      	movs	r0, #1
 8001232:	f7ff fcb3 	bl	8000b9c <GFX_SetFontSize>
			break;
 8001236:	e0e0      	b.n	80013fa <DisplayWithoutParameters+0x226>
		}
		case DISPLAY_REMOVE_ALL_FROM_DESK:
		{
			SSD1306_Clear(BLACK);
 8001238:	2000      	movs	r0, #0
 800123a:	f000 fd85 	bl	8001d48 <SSD1306_Clear>
			GFX_SetFontSize(2);
 800123e:	2002      	movs	r0, #2
 8001240:	f7ff fcac 	bl	8000b9c <GFX_SetFontSize>
			GFX_DrawString(10 , 15, "Remove All", WHITE, BLACK);
 8001244:	2300      	movs	r3, #0
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2301      	movs	r3, #1
 800124a:	4a6f      	ldr	r2, [pc, #444]	@ (8001408 <DisplayWithoutParameters+0x234>)
 800124c:	210f      	movs	r1, #15
 800124e:	200a      	movs	r0, #10
 8001250:	f7ff fd70 	bl	8000d34 <GFX_DrawString>
			GFX_SetFontSize(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f7ff fca1 	bl	8000b9c <GFX_SetFontSize>
			GFX_DrawString(30 ,40, "And Click ONE", WHITE, BLACK);
 800125a:	2300      	movs	r3, #0
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	4a6a      	ldr	r2, [pc, #424]	@ (800140c <DisplayWithoutParameters+0x238>)
 8001262:	2128      	movs	r1, #40	@ 0x28
 8001264:	201e      	movs	r0, #30
 8001266:	f7ff fd65 	bl	8000d34 <GFX_DrawString>
			SSD1306_Display();
 800126a:	f000 fd8b 	bl	8001d84 <SSD1306_Display>
			GFX_SetFontSize(1);
 800126e:	2001      	movs	r0, #1
 8001270:	f7ff fc94 	bl	8000b9c <GFX_SetFontSize>
			break;
 8001274:	e0c1      	b.n	80013fa <DisplayWithoutParameters+0x226>
		}
		case DISPLAY_MEASURING:
		{
			SSD1306_Clear(BLACK);
 8001276:	2000      	movs	r0, #0
 8001278:	f000 fd66 	bl	8001d48 <SSD1306_Clear>
			GFX_SetFontSize(1);
 800127c:	2001      	movs	r0, #1
 800127e:	f7ff fc8d 	bl	8000b9c <GFX_SetFontSize>
			GFX_DrawString(30 , 30, "Measuring...", WHITE, BLACK);
 8001282:	2300      	movs	r3, #0
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2301      	movs	r3, #1
 8001288:	4a61      	ldr	r2, [pc, #388]	@ (8001410 <DisplayWithoutParameters+0x23c>)
 800128a:	211e      	movs	r1, #30
 800128c:	201e      	movs	r0, #30
 800128e:	f7ff fd51 	bl	8000d34 <GFX_DrawString>
			SSD1306_Display();
 8001292:	f000 fd77 	bl	8001d84 <SSD1306_Display>
			GFX_SetFontSize(1);
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff fc80 	bl	8000b9c <GFX_SetFontSize>
			break;
 800129c:	e0ad      	b.n	80013fa <DisplayWithoutParameters+0x226>
			break;
		}
		case DISPLAY_PUT_REFERENCE:
		{
			SSD1306_Clear(BLACK);
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 fd52 	bl	8001d48 <SSD1306_Clear>
			GFX_SetFontSize(2);
 80012a4:	2002      	movs	r0, #2
 80012a6:	f7ff fc79 	bl	8000b9c <GFX_SetFontSize>
			GFX_DrawString(15 , 15, "Put 1000g", WHITE, BLACK);
 80012aa:	2300      	movs	r3, #0
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	4a58      	ldr	r2, [pc, #352]	@ (8001414 <DisplayWithoutParameters+0x240>)
 80012b2:	210f      	movs	r1, #15
 80012b4:	200f      	movs	r0, #15
 80012b6:	f7ff fd3d 	bl	8000d34 <GFX_DrawString>
			GFX_SetFontSize(1);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f7ff fc6e 	bl	8000b9c <GFX_SetFontSize>
			GFX_DrawString(30 ,40, "And Click ONE", WHITE, BLACK);
 80012c0:	2300      	movs	r3, #0
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2301      	movs	r3, #1
 80012c6:	4a51      	ldr	r2, [pc, #324]	@ (800140c <DisplayWithoutParameters+0x238>)
 80012c8:	2128      	movs	r1, #40	@ 0x28
 80012ca:	201e      	movs	r0, #30
 80012cc:	f7ff fd32 	bl	8000d34 <GFX_DrawString>
			SSD1306_Display();
 80012d0:	f000 fd58 	bl	8001d84 <SSD1306_Display>
			GFX_SetFontSize(1);
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff fc61 	bl	8000b9c <GFX_SetFontSize>
			break;
 80012da:	e08e      	b.n	80013fa <DisplayWithoutParameters+0x226>
		}
		case DISPLAY_SAVE_TO_EEPROM:
		{
			SSD1306_Clear(BLACK);
 80012dc:	2000      	movs	r0, #0
 80012de:	f000 fd33 	bl	8001d48 <SSD1306_Clear>
			GFX_SetFontSize(1);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff fc5a 	bl	8000b9c <GFX_SetFontSize>
			GFX_DrawString(15 , 10, "Save calibration", WHITE, BLACK);
 80012e8:	2300      	movs	r3, #0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2301      	movs	r3, #1
 80012ee:	4a4a      	ldr	r2, [pc, #296]	@ (8001418 <DisplayWithoutParameters+0x244>)
 80012f0:	210a      	movs	r1, #10
 80012f2:	200f      	movs	r0, #15
 80012f4:	f7ff fd1e 	bl	8000d34 <GFX_DrawString>
			GFX_DrawString(35 , 25, "to EEPROM", WHITE, BLACK);
 80012f8:	2300      	movs	r3, #0
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2301      	movs	r3, #1
 80012fe:	4a47      	ldr	r2, [pc, #284]	@ (800141c <DisplayWithoutParameters+0x248>)
 8001300:	2119      	movs	r1, #25
 8001302:	2023      	movs	r0, #35	@ 0x23
 8001304:	f7ff fd16 	bl	8000d34 <GFX_DrawString>
			GFX_SetFontSize(1);
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff fc47 	bl	8000b9c <GFX_SetFontSize>
			GFX_DrawString(30 ,50, " Click ONE", WHITE, BLACK);
 800130e:	2300      	movs	r3, #0
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2301      	movs	r3, #1
 8001314:	4a42      	ldr	r2, [pc, #264]	@ (8001420 <DisplayWithoutParameters+0x24c>)
 8001316:	2132      	movs	r1, #50	@ 0x32
 8001318:	201e      	movs	r0, #30
 800131a:	f7ff fd0b 	bl	8000d34 <GFX_DrawString>
			SSD1306_Display();
 800131e:	f000 fd31 	bl	8001d84 <SSD1306_Display>
			GFX_SetFontSize(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff fc3a 	bl	8000b9c <GFX_SetFontSize>
			break;
 8001328:	e067      	b.n	80013fa <DisplayWithoutParameters+0x226>
			break;
		}
		case DISPLAY_PREPERE_START:
		{
			SSD1306_Clear(BLACK);
 800132a:	2000      	movs	r0, #0
 800132c:	f000 fd0c 	bl	8001d48 <SSD1306_Clear>
			GFX_SetFontSize(2);
 8001330:	2002      	movs	r0, #2
 8001332:	f7ff fc33 	bl	8000b9c <GFX_SetFontSize>
			GFX_DrawString(10 , 15, "Prepere to", WHITE, BLACK);
 8001336:	2300      	movs	r3, #0
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	4a39      	ldr	r2, [pc, #228]	@ (8001424 <DisplayWithoutParameters+0x250>)
 800133e:	210f      	movs	r1, #15
 8001340:	200a      	movs	r0, #10
 8001342:	f7ff fcf7 	bl	8000d34 <GFX_DrawString>
			GFX_DrawString(40 ,40, "START", WHITE, BLACK);
 8001346:	2300      	movs	r3, #0
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2301      	movs	r3, #1
 800134c:	4a36      	ldr	r2, [pc, #216]	@ (8001428 <DisplayWithoutParameters+0x254>)
 800134e:	2128      	movs	r1, #40	@ 0x28
 8001350:	2028      	movs	r0, #40	@ 0x28
 8001352:	f7ff fcef 	bl	8000d34 <GFX_DrawString>
			SSD1306_Display();
 8001356:	f000 fd15 	bl	8001d84 <SSD1306_Display>
			GFX_SetFontSize(1);
 800135a:	2001      	movs	r0, #1
 800135c:	f7ff fc1e 	bl	8000b9c <GFX_SetFontSize>
			break;
 8001360:	e04b      	b.n	80013fa <DisplayWithoutParameters+0x226>
			break;
		}
		case DISPLAY_WRONG_CALIBRATION:
		{
			SSD1306_Clear(BLACK);
 8001362:	2000      	movs	r0, #0
 8001364:	f000 fcf0 	bl	8001d48 <SSD1306_Clear>
			GFX_SetFontSize(2);
 8001368:	2002      	movs	r0, #2
 800136a:	f7ff fc17 	bl	8000b9c <GFX_SetFontSize>
			GFX_DrawString(40 , 15, "Wrong", WHITE, BLACK);
 800136e:	2300      	movs	r3, #0
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2301      	movs	r3, #1
 8001374:	4a2d      	ldr	r2, [pc, #180]	@ (800142c <DisplayWithoutParameters+0x258>)
 8001376:	210f      	movs	r1, #15
 8001378:	2028      	movs	r0, #40	@ 0x28
 800137a:	f7ff fcdb 	bl	8000d34 <GFX_DrawString>
			GFX_DrawString(5 ,40, "Calibration", WHITE, BLACK);
 800137e:	2300      	movs	r3, #0
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	4a2a      	ldr	r2, [pc, #168]	@ (8001430 <DisplayWithoutParameters+0x25c>)
 8001386:	2128      	movs	r1, #40	@ 0x28
 8001388:	2005      	movs	r0, #5
 800138a:	f7ff fcd3 	bl	8000d34 <GFX_DrawString>
			SSD1306_Display();
 800138e:	f000 fcf9 	bl	8001d84 <SSD1306_Display>
			GFX_SetFontSize(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff fc02 	bl	8000b9c <GFX_SetFontSize>
			break;
 8001398:	e02f      	b.n	80013fa <DisplayWithoutParameters+0x226>
		}
		case DISPLAY_PUT_JAR:
		{
			SSD1306_Clear(BLACK);
 800139a:	2000      	movs	r0, #0
 800139c:	f000 fcd4 	bl	8001d48 <SSD1306_Clear>
			GFX_SetFontSize(2);
 80013a0:	2002      	movs	r0, #2
 80013a2:	f7ff fbfb 	bl	8000b9c <GFX_SetFontSize>
			GFX_DrawString(05 , 20, "Put the JAR", WHITE, BLACK);
 80013a6:	2300      	movs	r3, #0
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	4a21      	ldr	r2, [pc, #132]	@ (8001434 <DisplayWithoutParameters+0x260>)
 80013ae:	2114      	movs	r1, #20
 80013b0:	2005      	movs	r0, #5
 80013b2:	f7ff fcbf 	bl	8000d34 <GFX_DrawString>
			SSD1306_Display();
 80013b6:	f000 fce5 	bl	8001d84 <SSD1306_Display>
			GFX_SetFontSize(1);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f7ff fbee 	bl	8000b9c <GFX_SetFontSize>
			break;
 80013c0:	e01b      	b.n	80013fa <DisplayWithoutParameters+0x226>
		}
		case DISPLAY_EMERGENCY_CLOSE:
		{
			SSD1306_Clear(BLACK);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f000 fcc0 	bl	8001d48 <SSD1306_Clear>
			GFX_SetFontSize(2);
 80013c8:	2002      	movs	r0, #2
 80013ca:	f7ff fbe7 	bl	8000b9c <GFX_SetFontSize>
			GFX_DrawString(10 , 15, "Emergency", WHITE, BLACK);
 80013ce:	2300      	movs	r3, #0
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	4a18      	ldr	r2, [pc, #96]	@ (8001438 <DisplayWithoutParameters+0x264>)
 80013d6:	210f      	movs	r1, #15
 80013d8:	200a      	movs	r0, #10
 80013da:	f7ff fcab 	bl	8000d34 <GFX_DrawString>
			GFX_DrawString(30 ,40, "Close", WHITE, BLACK);
 80013de:	2300      	movs	r3, #0
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2301      	movs	r3, #1
 80013e4:	4a15      	ldr	r2, [pc, #84]	@ (800143c <DisplayWithoutParameters+0x268>)
 80013e6:	2128      	movs	r1, #40	@ 0x28
 80013e8:	201e      	movs	r0, #30
 80013ea:	f7ff fca3 	bl	8000d34 <GFX_DrawString>
			SSD1306_Display();
 80013ee:	f000 fcc9 	bl	8001d84 <SSD1306_Display>
			GFX_SetFontSize(1);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7ff fbd2 	bl	8000b9c <GFX_SetFontSize>
			break;
 80013f8:	bf00      	nop
		}
	}
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	080066f0 	.word	0x080066f0
 8001408:	080066fc 	.word	0x080066fc
 800140c:	08006708 	.word	0x08006708
 8001410:	08006718 	.word	0x08006718
 8001414:	08006728 	.word	0x08006728
 8001418:	08006734 	.word	0x08006734
 800141c:	08006748 	.word	0x08006748
 8001420:	08006754 	.word	0x08006754
 8001424:	08006760 	.word	0x08006760
 8001428:	0800676c 	.word	0x0800676c
 800142c:	08006774 	.word	0x08006774
 8001430:	0800677c 	.word	0x0800677c
 8001434:	08006788 	.word	0x08006788
 8001438:	08006794 	.word	0x08006794
 800143c:	080067a0 	.word	0x080067a0

08001440 <DisplayWithParameters>:

/*
 * Display messages with parameters
 */
void DisplayWithParameters(THoneyDisplayWithParameter Display, THoney* Honey, int32_t ActualWeight)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af02      	add	r7, sp, #8
 8001446:	4603      	mov	r3, r0
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	73fb      	strb	r3, [r7, #15]
	switch(Display)
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <DisplayWithParameters+0x24>
 8001454:	2b00      	cmp	r3, #0
 8001456:	f2c0 80b7 	blt.w	80015c8 <DisplayWithParameters+0x188>
 800145a:	3b01      	subs	r3, #1
 800145c:	2b01      	cmp	r3, #1
 800145e:	f200 80b3 	bhi.w	80015c8 <DisplayWithParameters+0x188>
 8001462:	e086      	b.n	8001572 <DisplayWithParameters+0x132>
	{
		case DISPLAY_MAIN_MENU:
		{
			SSD1306_Clear(BLACK);
 8001464:	2000      	movs	r0, #0
 8001466:	f000 fc6f 	bl	8001d48 <SSD1306_Clear>
			GFX_DrawRectangle(01, 19, 127, 43, WHITE);
 800146a:	2301      	movs	r3, #1
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	232b      	movs	r3, #43	@ 0x2b
 8001470:	227f      	movs	r2, #127	@ 0x7f
 8001472:	2113      	movs	r1, #19
 8001474:	2001      	movs	r0, #1
 8001476:	f7ff fd75 	bl	8000f64 <GFX_DrawRectangle>
			GFX_DrawRectangle(01, 30, 60, 15, WHITE);
 800147a:	2301      	movs	r3, #1
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	230f      	movs	r3, #15
 8001480:	223c      	movs	r2, #60	@ 0x3c
 8001482:	211e      	movs	r1, #30
 8001484:	2001      	movs	r0, #1
 8001486:	f7ff fd6d 	bl	8000f64 <GFX_DrawRectangle>
			GFX_DrawRectangle(01, 47, 60, 15, WHITE);
 800148a:	2301      	movs	r3, #1
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	230f      	movs	r3, #15
 8001490:	223c      	movs	r2, #60	@ 0x3c
 8001492:	212f      	movs	r1, #47	@ 0x2f
 8001494:	2001      	movs	r0, #1
 8001496:	f7ff fd65 	bl	8000f64 <GFX_DrawRectangle>
			GFX_DrawRectangle(68, 30, 60, 15, WHITE);
 800149a:	2301      	movs	r3, #1
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	230f      	movs	r3, #15
 80014a0:	223c      	movs	r2, #60	@ 0x3c
 80014a2:	211e      	movs	r1, #30
 80014a4:	2044      	movs	r0, #68	@ 0x44
 80014a6:	f7ff fd5d 	bl	8000f64 <GFX_DrawRectangle>
			GFX_DrawRectangle(68, 47, 60, 15, WHITE);
 80014aa:	2301      	movs	r3, #1
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	230f      	movs	r3, #15
 80014b0:	223c      	movs	r2, #60	@ 0x3c
 80014b2:	212f      	movs	r1, #47	@ 0x2f
 80014b4:	2044      	movs	r0, #68	@ 0x44
 80014b6:	f7ff fd55 	bl	8000f64 <GFX_DrawRectangle>

			GFX_SetFontSize(1);
 80014ba:	2001      	movs	r0, #1
 80014bc:	f7ff fb6e 	bl	8000b9c <GFX_SetFontSize>
			GFX_DrawString(5 , 1, "Actual", WHITE, BLACK);
 80014c0:	2300      	movs	r3, #0
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2301      	movs	r3, #1
 80014c6:	4a42      	ldr	r2, [pc, #264]	@ (80015d0 <DisplayWithParameters+0x190>)
 80014c8:	2101      	movs	r1, #1
 80014ca:	2005      	movs	r0, #5
 80014cc:	f7ff fc32 	bl	8000d34 <GFX_DrawString>
			GFX_DrawString(5 , 9, "weight", WHITE, BLACK);
 80014d0:	2300      	movs	r3, #0
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2301      	movs	r3, #1
 80014d6:	4a3f      	ldr	r2, [pc, #252]	@ (80015d4 <DisplayWithParameters+0x194>)
 80014d8:	2109      	movs	r1, #9
 80014da:	2005      	movs	r0, #5
 80014dc:	f7ff fc2a 	bl	8000d34 <GFX_DrawString>
			GFX_DrawString(5 , 21, "Options:", WHITE, BLACK);
 80014e0:	2300      	movs	r3, #0
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2301      	movs	r3, #1
 80014e6:	4a3c      	ldr	r2, [pc, #240]	@ (80015d8 <DisplayWithParameters+0x198>)
 80014e8:	2115      	movs	r1, #21
 80014ea:	2005      	movs	r0, #5
 80014ec:	f7ff fc22 	bl	8000d34 <GFX_DrawString>
			GFX_DrawString(5 , 34, "1- Calib", WHITE, BLACK);
 80014f0:	2300      	movs	r3, #0
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2301      	movs	r3, #1
 80014f6:	4a39      	ldr	r2, [pc, #228]	@ (80015dc <DisplayWithParameters+0x19c>)
 80014f8:	2122      	movs	r1, #34	@ 0x22
 80014fa:	2005      	movs	r0, #5
 80014fc:	f7ff fc1a 	bl	8000d34 <GFX_DrawString>
			GFX_DrawString(71 , 34, "2- 500g ", WHITE, BLACK);
 8001500:	2300      	movs	r3, #0
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	4a36      	ldr	r2, [pc, #216]	@ (80015e0 <DisplayWithParameters+0x1a0>)
 8001508:	2122      	movs	r1, #34	@ 0x22
 800150a:	2047      	movs	r0, #71	@ 0x47
 800150c:	f7ff fc12 	bl	8000d34 <GFX_DrawString>
			GFX_DrawString(5 , 51, "3- 1000g ", WHITE, BLACK);
 8001510:	2300      	movs	r3, #0
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2301      	movs	r3, #1
 8001516:	4a33      	ldr	r2, [pc, #204]	@ (80015e4 <DisplayWithParameters+0x1a4>)
 8001518:	2133      	movs	r1, #51	@ 0x33
 800151a:	2005      	movs	r0, #5
 800151c:	f7ff fc0a 	bl	8000d34 <GFX_DrawString>
			GFX_DrawString(71 , 51, "4- Close", WHITE, BLACK);
 8001520:	2300      	movs	r3, #0
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2301      	movs	r3, #1
 8001526:	4a30      	ldr	r2, [pc, #192]	@ (80015e8 <DisplayWithParameters+0x1a8>)
 8001528:	2133      	movs	r1, #51	@ 0x33
 800152a:	2047      	movs	r0, #71	@ 0x47
 800152c:	f7ff fc02 	bl	8000d34 <GFX_DrawString>

			GFX_SetFontSize(2);
 8001530:	2002      	movs	r0, #2
 8001532:	f7ff fb33 	bl	8000b9c <GFX_SetFontSize>
			GFX_DrawString(42, 1, ":" , WHITE, BLACK);
 8001536:	2300      	movs	r3, #0
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2301      	movs	r3, #1
 800153c:	4a2b      	ldr	r2, [pc, #172]	@ (80015ec <DisplayWithParameters+0x1ac>)
 800153e:	2101      	movs	r1, #1
 8001540:	202a      	movs	r0, #42	@ 0x2a
 8001542:	f7ff fbf7 	bl	8000d34 <GFX_DrawString>
			GFX_SetFontSize(2);
 8001546:	2002      	movs	r0, #2
 8001548:	f7ff fb28 	bl	8000b9c <GFX_SetFontSize>
			sprintf(text, "%4dg", (int)ActualWeight);
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	4928      	ldr	r1, [pc, #160]	@ (80015f0 <DisplayWithParameters+0x1b0>)
 8001550:	4828      	ldr	r0, [pc, #160]	@ (80015f4 <DisplayWithParameters+0x1b4>)
 8001552:	f004 fc11 	bl	8005d78 <siprintf>
			GFX_DrawString(50, 1, text , WHITE, BLACK);
 8001556:	2300      	movs	r3, #0
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2301      	movs	r3, #1
 800155c:	4a25      	ldr	r2, [pc, #148]	@ (80015f4 <DisplayWithParameters+0x1b4>)
 800155e:	2101      	movs	r1, #1
 8001560:	2032      	movs	r0, #50	@ 0x32
 8001562:	f7ff fbe7 	bl	8000d34 <GFX_DrawString>
			//GFX_DrawString(25 , 18, "Choose option", WHITE, BLACK);

			GFX_SetFontSize(1);
 8001566:	2001      	movs	r0, #1
 8001568:	f7ff fb18 	bl	8000b9c <GFX_SetFontSize>
			SSD1306_Display();
 800156c:	f000 fc0a 	bl	8001d84 <SSD1306_Display>

			break;
 8001570:	e02a      	b.n	80015c8 <DisplayWithParameters+0x188>
		}
		case DISPLAY_END:
		case DISPLAY_BOTTLING:
		{
			SSD1306_Clear(BLACK);
 8001572:	2000      	movs	r0, #0
 8001574:	f000 fbe8 	bl	8001d48 <SSD1306_Clear>
			GFX_SetFontSize(1);
 8001578:	2001      	movs	r0, #1
 800157a:	f7ff fb0f 	bl	8000b9c <GFX_SetFontSize>
			sprintf(text, "Target:%d g", (int)Honey->Bottling.TargetWeight);
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	461a      	mov	r2, r3
 8001584:	491c      	ldr	r1, [pc, #112]	@ (80015f8 <DisplayWithParameters+0x1b8>)
 8001586:	481b      	ldr	r0, [pc, #108]	@ (80015f4 <DisplayWithParameters+0x1b4>)
 8001588:	f004 fbf6 	bl	8005d78 <siprintf>
			GFX_DrawString(25, 5, text , WHITE, BLACK);
 800158c:	2300      	movs	r3, #0
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2301      	movs	r3, #1
 8001592:	4a18      	ldr	r2, [pc, #96]	@ (80015f4 <DisplayWithParameters+0x1b4>)
 8001594:	2105      	movs	r1, #5
 8001596:	2019      	movs	r0, #25
 8001598:	f7ff fbcc 	bl	8000d34 <GFX_DrawString>
			GFX_SetFontSize(4);
 800159c:	2004      	movs	r0, #4
 800159e:	f7ff fafd 	bl	8000b9c <GFX_SetFontSize>
			sprintf(text, "%4dg", (int)ActualWeight);
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	4912      	ldr	r1, [pc, #72]	@ (80015f0 <DisplayWithParameters+0x1b0>)
 80015a6:	4813      	ldr	r0, [pc, #76]	@ (80015f4 <DisplayWithParameters+0x1b4>)
 80015a8:	f004 fbe6 	bl	8005d78 <siprintf>
			GFX_DrawString(5, 25, text , WHITE, BLACK);
 80015ac:	2300      	movs	r3, #0
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2301      	movs	r3, #1
 80015b2:	4a10      	ldr	r2, [pc, #64]	@ (80015f4 <DisplayWithParameters+0x1b4>)
 80015b4:	2119      	movs	r1, #25
 80015b6:	2005      	movs	r0, #5
 80015b8:	f7ff fbbc 	bl	8000d34 <GFX_DrawString>
			SSD1306_Display();
 80015bc:	f000 fbe2 	bl	8001d84 <SSD1306_Display>
			GFX_SetFontSize(1);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f7ff faeb 	bl	8000b9c <GFX_SetFontSize>
			break;
 80015c6:	bf00      	nop
		}
	}
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	080067a8 	.word	0x080067a8
 80015d4:	080067b0 	.word	0x080067b0
 80015d8:	080067b8 	.word	0x080067b8
 80015dc:	080067c4 	.word	0x080067c4
 80015e0:	080067d0 	.word	0x080067d0
 80015e4:	080067dc 	.word	0x080067dc
 80015e8:	080067e8 	.word	0x080067e8
 80015ec:	080067f4 	.word	0x080067f4
 80015f0:	080067f8 	.word	0x080067f8
 80015f4:	20000084 	.word	0x20000084
 80015f8:	08006800 	.word	0x08006800

080015fc <InterinalTickTimer_Init>:

/*
 * Local functions to update display
 */
void InterinalTickTimer_Init()
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	lastTick = HAL_GetTick();
 8001600:	f001 fa8c 	bl	8002b1c <HAL_GetTick>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	4b01      	ldr	r3, [pc, #4]	@ (8001610 <InterinalTickTimer_Init+0x14>)
 800160a:	601a      	str	r2, [r3, #0]
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000134 	.word	0x20000134

08001614 <InterinalTickTimer_WaitMillisecond>:

_Bool InterinalTickTimer_WaitMillisecond(int32_t Milliseconds)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - lastTick >= Milliseconds)
 800161c:	f001 fa7e 	bl	8002b1c <HAL_GetTick>
 8001620:	4603      	mov	r3, r0
 8001622:	4a0b      	ldr	r2, [pc, #44]	@ (8001650 <InterinalTickTimer_WaitMillisecond+0x3c>)
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	1a9a      	subs	r2, r3, r2
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	429a      	cmp	r2, r3
 800162c:	d30b      	bcc.n	8001646 <InterinalTickTimer_WaitMillisecond+0x32>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800162e:	2120      	movs	r1, #32
 8001630:	4808      	ldr	r0, [pc, #32]	@ (8001654 <InterinalTickTimer_WaitMillisecond+0x40>)
 8001632:	f001 fec2 	bl	80033ba <HAL_GPIO_TogglePin>
		lastTick = HAL_GetTick();
 8001636:	f001 fa71 	bl	8002b1c <HAL_GetTick>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	4b04      	ldr	r3, [pc, #16]	@ (8001650 <InterinalTickTimer_WaitMillisecond+0x3c>)
 8001640:	601a      	str	r2, [r3, #0]
		return true;
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <InterinalTickTimer_WaitMillisecond+0x34>
	}
	return false;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000134 	.word	0x20000134
 8001654:	40010800 	.word	0x40010800

08001658 <HoneyInit>:
/*
 * Initialization of main state machine
 */

void HoneyInit(THoney* Honey)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	Honey->State = IDLE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
	Honey->Calibration.ReferenceEmptyWeight = 1;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	605a      	str	r2, [r3, #4]
	Honey->Calibration.CalibValue = 1;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	609a      	str	r2, [r3, #8]

	ButtonInit(&ButtonOne,GPIOC,GPIO_PIN_2);
 8001672:	2204      	movs	r2, #4
 8001674:	4918      	ldr	r1, [pc, #96]	@ (80016d8 <HoneyInit+0x80>)
 8001676:	4819      	ldr	r0, [pc, #100]	@ (80016dc <HoneyInit+0x84>)
 8001678:	f7ff f8d8 	bl	800082c <ButtonInit>
	ButtonInit(&ButtonTwo,GPIOC,GPIO_PIN_3);
 800167c:	2208      	movs	r2, #8
 800167e:	4916      	ldr	r1, [pc, #88]	@ (80016d8 <HoneyInit+0x80>)
 8001680:	4817      	ldr	r0, [pc, #92]	@ (80016e0 <HoneyInit+0x88>)
 8001682:	f7ff f8d3 	bl	800082c <ButtonInit>
	ButtonInit(&ButtonThree,GPIOC,GPIO_PIN_1);
 8001686:	2202      	movs	r2, #2
 8001688:	4913      	ldr	r1, [pc, #76]	@ (80016d8 <HoneyInit+0x80>)
 800168a:	4816      	ldr	r0, [pc, #88]	@ (80016e4 <HoneyInit+0x8c>)
 800168c:	f7ff f8ce 	bl	800082c <ButtonInit>
	ButtonInit(&ButtonFour,GPIOC,GPIO_PIN_0);
 8001690:	2201      	movs	r2, #1
 8001692:	4911      	ldr	r1, [pc, #68]	@ (80016d8 <HoneyInit+0x80>)
 8001694:	4814      	ldr	r0, [pc, #80]	@ (80016e8 <HoneyInit+0x90>)
 8001696:	f7ff f8c9 	bl	800082c <ButtonInit>

	Servo_Init(&Servo, &htim3, TIM_CHANNEL_1, MAIN_TAP_CLOSED);
 800169a:	2332      	movs	r3, #50	@ 0x32
 800169c:	2200      	movs	r2, #0
 800169e:	4913      	ldr	r1, [pc, #76]	@ (80016ec <HoneyInit+0x94>)
 80016a0:	4813      	ldr	r0, [pc, #76]	@ (80016f0 <HoneyInit+0x98>)
 80016a2:	f000 fbe9 	bl	8001e78 <Servo_Init>
	Servo_Init(&HelperServo, &htim4, TIM_CHANNEL_1, HELPER_TAP_CLOSED);
 80016a6:	2396      	movs	r3, #150	@ 0x96
 80016a8:	2200      	movs	r2, #0
 80016aa:	4912      	ldr	r1, [pc, #72]	@ (80016f4 <HoneyInit+0x9c>)
 80016ac:	4812      	ldr	r0, [pc, #72]	@ (80016f8 <HoneyInit+0xa0>)
 80016ae:	f000 fbe3 	bl	8001e78 <Servo_Init>

	Eeprom_Init(&hi2c2);
 80016b2:	4812      	ldr	r0, [pc, #72]	@ (80016fc <HoneyInit+0xa4>)
 80016b4:	f7ff f9d6 	bl	8000a64 <Eeprom_Init>
	DisplayInit(&hi2c2);
 80016b8:	4810      	ldr	r0, [pc, #64]	@ (80016fc <HoneyInit+0xa4>)
 80016ba:	f7ff fd75 	bl	80011a8 <DisplayInit>
	HX711_Init(&htim2);
 80016be:	4810      	ldr	r0, [pc, #64]	@ (8001700 <HoneyInit+0xa8>)
 80016c0:	f7ff fca0 	bl	8001004 <HX711_Init>
	BuzzerInit(&Buzzer,GPIOB,GPIO_PIN_0);
 80016c4:	2201      	movs	r2, #1
 80016c6:	490f      	ldr	r1, [pc, #60]	@ (8001704 <HoneyInit+0xac>)
 80016c8:	480f      	ldr	r0, [pc, #60]	@ (8001708 <HoneyInit+0xb0>)
 80016ca:	f7ff f948 	bl	800095e <BuzzerInit>

}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40011000 	.word	0x40011000
 80016dc:	200000cc 	.word	0x200000cc
 80016e0:	200000e4 	.word	0x200000e4
 80016e4:	200000fc 	.word	0x200000fc
 80016e8:	20000114 	.word	0x20000114
 80016ec:	20000634 	.word	0x20000634
 80016f0:	200000a4 	.word	0x200000a4
 80016f4:	2000067c 	.word	0x2000067c
 80016f8:	200000b0 	.word	0x200000b0
 80016fc:	2000053c 	.word	0x2000053c
 8001700:	200005ec 	.word	0x200005ec
 8001704:	40010c00 	.word	0x40010c00
 8001708:	200000bc 	.word	0x200000bc
 800170c:	00000000 	.word	0x00000000

08001710 <HoneyTask>:
/*
 * Main state machine
 */

void HoneyTask(THoney* Honey)
{
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]

	BuzzerPlay(&Buzzer,STOP);
 8001718:	2103      	movs	r1, #3
 800171a:	48ab      	ldr	r0, [pc, #684]	@ (80019c8 <HoneyTask+0x2b8>)
 800171c:	f7ff f94a 	bl	80009b4 <BuzzerPlay>

	ButtonTask(&ButtonOne);
 8001720:	48aa      	ldr	r0, [pc, #680]	@ (80019cc <HoneyTask+0x2bc>)
 8001722:	f7ff f8b4 	bl	800088e <ButtonTask>
	ButtonTask(&ButtonTwo);
 8001726:	48aa      	ldr	r0, [pc, #680]	@ (80019d0 <HoneyTask+0x2c0>)
 8001728:	f7ff f8b1 	bl	800088e <ButtonTask>
	ButtonTask(&ButtonThree);
 800172c:	48a9      	ldr	r0, [pc, #676]	@ (80019d4 <HoneyTask+0x2c4>)
 800172e:	f7ff f8ae 	bl	800088e <ButtonTask>
	ButtonTask(&ButtonFour);
 8001732:	48a9      	ldr	r0, [pc, #676]	@ (80019d8 <HoneyTask+0x2c8>)
 8001734:	f7ff f8ab 	bl	800088e <ButtonTask>


	if(ButtonIsPressed(&ButtonFour))
 8001738:	48a7      	ldr	r0, [pc, #668]	@ (80019d8 <HoneyTask+0x2c8>)
 800173a:	f7ff f8fd 	bl	8000938 <ButtonIsPressed>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00d      	beq.n	8001760 <HoneyTask+0x50>
	{
		DisplayWithoutParameters(DISPLAY_EMERGENCY_CLOSE);
 8001744:	2008      	movs	r0, #8
 8001746:	f7ff fd45 	bl	80011d4 <DisplayWithoutParameters>
		Servo_SetPWMSignal(&Servo, MAIN_TAP_CLOSED);
 800174a:	2132      	movs	r1, #50	@ 0x32
 800174c:	48a3      	ldr	r0, [pc, #652]	@ (80019dc <HoneyTask+0x2cc>)
 800174e:	f000 fbe9 	bl	8001f24 <Servo_SetPWMSignal>
		BuzzerPlay(&Buzzer,FINISH);
 8001752:	2102      	movs	r1, #2
 8001754:	489c      	ldr	r0, [pc, #624]	@ (80019c8 <HoneyTask+0x2b8>)
 8001756:	f7ff f92d 	bl	80009b4 <BuzzerPlay>
		Honey->State = EMERGENCY_CLOSE_TAP;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	220c      	movs	r2, #12
 800175e:	701a      	strb	r2, [r3, #0]
	}


	switch(Honey->State)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b0d      	cmp	r3, #13
 8001766:	f200 8214 	bhi.w	8001b92 <HoneyTask+0x482>
 800176a:	a201      	add	r2, pc, #4	@ (adr r2, 8001770 <HoneyTask+0x60>)
 800176c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001770:	080017a9 	.word	0x080017a9
 8001774:	080017df 	.word	0x080017df
 8001778:	08001861 	.word	0x08001861
 800177c:	08001893 	.word	0x08001893
 8001780:	080018af 	.word	0x080018af
 8001784:	080018d3 	.word	0x080018d3
 8001788:	080018fd 	.word	0x080018fd
 800178c:	08001935 	.word	0x08001935
 8001790:	0800194b 	.word	0x0800194b
 8001794:	080019e9 	.word	0x080019e9
 8001798:	08001b01 	.word	0x08001b01
 800179c:	08001b1f 	.word	0x08001b1f
 80017a0:	08001b35 	.word	0x08001b35
 80017a4:	08001b53 	.word	0x08001b53
	{
		case IDLE:
		{
			DisplayWithoutParameters(DISPLAY_IDLE);
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff fd13 	bl	80011d4 <DisplayWithoutParameters>
			if(hi2c2.State == HAL_I2C_STATE_READY)
 80017ae:	4b8c      	ldr	r3, [pc, #560]	@ (80019e0 <HoneyTask+0x2d0>)
 80017b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b20      	cmp	r3, #32
 80017b8:	f040 81d6 	bne.w	8001b68 <HoneyTask+0x458>
			{
				Honey->Calibration=Eeprom_ReadCalibration();
 80017bc:	68fc      	ldr	r4, [r7, #12]
 80017be:	463b      	mov	r3, r7
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff f95d 	bl	8000a80 <Eeprom_ReadCalibration>
 80017c6:	1d23      	adds	r3, r4, #4
 80017c8:	463a      	mov	r2, r7
 80017ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ce:	e883 0003 	stmia.w	r3, {r0, r1}
				Honey->State = WAITING_FOR_CHOOSE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2201      	movs	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
				InterinalTickTimer_Init();
 80017d8:	f7ff ff10 	bl	80015fc <InterinalTickTimer_Init>
			}
			break;
 80017dc:	e1c4      	b.n	8001b68 <HoneyTask+0x458>
		}
		case WAITING_FOR_CHOOSE:
		{
			if(InterinalTickTimer_WaitMillisecond(WAIT_20_MS))
 80017de:	2014      	movs	r0, #20
 80017e0:	f7ff ff18 	bl	8001614 <InterinalTickTimer_WaitMillisecond>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 81c0 	beq.w	8001b6c <HoneyTask+0x45c>
			{
				DisplayWithParameters(DISPLAY_MAIN_MENU,Honey,(int)HX711_getCalculatedWeight(Honey->Calibration));
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3304      	adds	r3, #4
 80017f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017f4:	f7ff fc94 	bl	8001120 <HX711_getCalculatedWeight>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	68f9      	ldr	r1, [r7, #12]
 80017fe:	2000      	movs	r0, #0
 8001800:	f7ff fe1e 	bl	8001440 <DisplayWithParameters>

				if(ButtonIsPressed(&ButtonOne))
 8001804:	4871      	ldr	r0, [pc, #452]	@ (80019cc <HoneyTask+0x2bc>)
 8001806:	f7ff f897 	bl	8000938 <ButtonIsPressed>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00a      	beq.n	8001826 <HoneyTask+0x116>
				{
					BuzzerPlay(&Buzzer,PRESSED);
 8001810:	2100      	movs	r1, #0
 8001812:	486d      	ldr	r0, [pc, #436]	@ (80019c8 <HoneyTask+0x2b8>)
 8001814:	f7ff f8ce 	bl	80009b4 <BuzzerPlay>
					Honey->State = CALIBRATION_PREPERE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2202      	movs	r2, #2
 800181c:	701a      	strb	r2, [r3, #0]
					DisplayWithoutParameters(DISPLAY_REMOVE_ALL_FROM_DESK);
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff fcd8 	bl	80011d4 <DisplayWithoutParameters>
					break;
 8001824:	e1b5      	b.n	8001b92 <HoneyTask+0x482>
				}
				else if(ButtonIsPressed(&ButtonTwo))
 8001826:	486a      	ldr	r0, [pc, #424]	@ (80019d0 <HoneyTask+0x2c0>)
 8001828:	f7ff f886 	bl	8000938 <ButtonIsPressed>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d007      	beq.n	8001842 <HoneyTask+0x132>
				{
					Honey->Bottling.TargetWeight = (uint32_t)WEIGHT_500_GRAMS;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001838:	611a      	str	r2, [r3, #16]
					Honey->State = BOTTLING_ENTERING_DISPLAY;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2207      	movs	r2, #7
 800183e:	701a      	strb	r2, [r3, #0]
					break;
 8001840:	e1a7      	b.n	8001b92 <HoneyTask+0x482>
				}
				else if(ButtonIsPressed(&ButtonThree))
 8001842:	4864      	ldr	r0, [pc, #400]	@ (80019d4 <HoneyTask+0x2c4>)
 8001844:	f7ff f878 	bl	8000938 <ButtonIsPressed>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 818e 	beq.w	8001b6c <HoneyTask+0x45c>
				{
					Honey->Bottling.TargetWeight = (uint32_t)WEIGHT_1000_GRAMS;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001856:	611a      	str	r2, [r3, #16]
					Honey->State = BOTTLING_ENTERING_DISPLAY;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2207      	movs	r2, #7
 800185c:	701a      	strb	r2, [r3, #0]
					break;
 800185e:	e198      	b.n	8001b92 <HoneyTask+0x482>
			}
			break;
		}
		case CALIBRATION_PREPERE:
		{
			if(InterinalTickTimer_WaitMillisecond(WAIT_100_MS))
 8001860:	2064      	movs	r0, #100	@ 0x64
 8001862:	f7ff fed7 	bl	8001614 <InterinalTickTimer_WaitMillisecond>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 8181 	beq.w	8001b70 <HoneyTask+0x460>
			{
				if(ButtonIsPressed(&ButtonOne))
 800186e:	4857      	ldr	r0, [pc, #348]	@ (80019cc <HoneyTask+0x2bc>)
 8001870:	f7ff f862 	bl	8000938 <ButtonIsPressed>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 817a 	beq.w	8001b70 <HoneyTask+0x460>
				{
					BuzzerPlay(&Buzzer,PRESSED);
 800187c:	2100      	movs	r1, #0
 800187e:	4852      	ldr	r0, [pc, #328]	@ (80019c8 <HoneyTask+0x2b8>)
 8001880:	f7ff f898 	bl	80009b4 <BuzzerPlay>
					Honey->State = CALIBRATION_MEASURE_EMPTY;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2203      	movs	r2, #3
 8001888:	701a      	strb	r2, [r3, #0]
					DisplayWithoutParameters(DISPLAY_MEASURING);
 800188a:	2002      	movs	r0, #2
 800188c:	f7ff fca2 	bl	80011d4 <DisplayWithoutParameters>
					break;
 8001890:	e17f      	b.n	8001b92 <HoneyTask+0x482>
			}
			break;
		}
		case CALIBRATION_MEASURE_EMPTY:
		{
			Honey->Calibration.ReferenceEmptyWeight = (uint32_t)HX711_getAverageWeight(CALIBRATION_NUM_OF_PROBES);
 8001892:	200a      	movs	r0, #10
 8001894:	f7ff fc22 	bl	80010dc <HX711_getAverageWeight>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	605a      	str	r2, [r3, #4]
			Honey->State = CALIBRATION_WAIT_FOR_REFERENCE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2204      	movs	r2, #4
 80018a4:	701a      	strb	r2, [r3, #0]
			DisplayWithoutParameters(DISPLAY_PUT_REFERENCE);
 80018a6:	2003      	movs	r0, #3
 80018a8:	f7ff fc94 	bl	80011d4 <DisplayWithoutParameters>
			break;
 80018ac:	e171      	b.n	8001b92 <HoneyTask+0x482>
		}
		case CALIBRATION_WAIT_FOR_REFERENCE:
		{
			if(ButtonIsPressed(&ButtonOne))
 80018ae:	4847      	ldr	r0, [pc, #284]	@ (80019cc <HoneyTask+0x2bc>)
 80018b0:	f7ff f842 	bl	8000938 <ButtonIsPressed>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 815c 	beq.w	8001b74 <HoneyTask+0x464>
			{
				BuzzerPlay(&Buzzer,PRESSED);
 80018bc:	2100      	movs	r1, #0
 80018be:	4842      	ldr	r0, [pc, #264]	@ (80019c8 <HoneyTask+0x2b8>)
 80018c0:	f7ff f878 	bl	80009b4 <BuzzerPlay>
				Honey->State = CALIBRATION_MEASURE_REFERENCE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2205      	movs	r2, #5
 80018c8:	701a      	strb	r2, [r3, #0]
				DisplayWithoutParameters(DISPLAY_MEASURING);
 80018ca:	2002      	movs	r0, #2
 80018cc:	f7ff fc82 	bl	80011d4 <DisplayWithoutParameters>
				break;
 80018d0:	e15f      	b.n	8001b92 <HoneyTask+0x482>
			}
			break;
		}
		case CALIBRATION_MEASURE_REFERENCE:
		{
			Honey->Calibration = HX711_calibration(Honey->Calibration);
 80018d2:	68fc      	ldr	r4, [r7, #12]
 80018d4:	4638      	mov	r0, r7
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3304      	adds	r3, #4
 80018da:	e893 0006 	ldmia.w	r3, {r1, r2}
 80018de:	f7ff fc3f 	bl	8001160 <HX711_calibration>
 80018e2:	1d23      	adds	r3, r4, #4
 80018e4:	463a      	mov	r2, r7
 80018e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ea:	e883 0003 	stmia.w	r3, {r0, r1}
			Honey->State = CALIBRATION_SAVE_TO_EEPROM;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2206      	movs	r2, #6
 80018f2:	701a      	strb	r2, [r3, #0]
			DisplayWithoutParameters(DISPLAY_SAVE_TO_EEPROM);
 80018f4:	2004      	movs	r0, #4
 80018f6:	f7ff fc6d 	bl	80011d4 <DisplayWithoutParameters>
			break;
 80018fa:	e14a      	b.n	8001b92 <HoneyTask+0x482>
		}
		case CALIBRATION_SAVE_TO_EEPROM:
		{
			if((hi2c2.State == HAL_I2C_STATE_READY)
 80018fc:	4b38      	ldr	r3, [pc, #224]	@ (80019e0 <HoneyTask+0x2d0>)
 80018fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b20      	cmp	r3, #32
 8001906:	f040 8137 	bne.w	8001b78 <HoneyTask+0x468>
					&&(ButtonIsPressed(&ButtonOne)))
 800190a:	4830      	ldr	r0, [pc, #192]	@ (80019cc <HoneyTask+0x2bc>)
 800190c:	f7ff f814 	bl	8000938 <ButtonIsPressed>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8130 	beq.w	8001b78 <HoneyTask+0x468>
			{
				BuzzerPlay(&Buzzer,PRESSED);
 8001918:	2100      	movs	r1, #0
 800191a:	482b      	ldr	r0, [pc, #172]	@ (80019c8 <HoneyTask+0x2b8>)
 800191c:	f7ff f84a 	bl	80009b4 <BuzzerPlay>
				Eeprom_SendCalibration(Honey->Calibration);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	3304      	adds	r3, #4
 8001924:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001928:	f7ff f8e4 	bl	8000af4 <Eeprom_SendCalibration>
				Honey->State = IDLE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
				break;
 8001932:	e12e      	b.n	8001b92 <HoneyTask+0x482>
			}
			break;
		}
		case BOTTLING_ENTERING_DISPLAY:
		{
			BuzzerPlay(&Buzzer,PRESSED);
 8001934:	2100      	movs	r1, #0
 8001936:	4824      	ldr	r0, [pc, #144]	@ (80019c8 <HoneyTask+0x2b8>)
 8001938:	f7ff f83c 	bl	80009b4 <BuzzerPlay>
			DisplayWithoutParameters(DISPLAY_PREPERE_START);
 800193c:	2005      	movs	r0, #5
 800193e:	f7ff fc49 	bl	80011d4 <DisplayWithoutParameters>
			Honey->State = BOTTLING_CHECK_CALIBRATION;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2208      	movs	r2, #8
 8001946:	701a      	strb	r2, [r3, #0]
			break;
 8001948:	e123      	b.n	8001b92 <HoneyTask+0x482>
		}
		case BOTTLING_CHECK_CALIBRATION:
		{

			if((Honey->Calibration.ReferenceEmptyWeight) < MIN_VALUE_OF_REFERENCE)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001952:	4293      	cmp	r3, r2
 8001954:	d80a      	bhi.n	800196c <HoneyTask+0x25c>
			{
				/*
				 * Some error with calibration.
				 * Need to create new one
				 */
				BuzzerPlay(&Buzzer,CHANGE_STEP);
 8001956:	2101      	movs	r1, #1
 8001958:	481b      	ldr	r0, [pc, #108]	@ (80019c8 <HoneyTask+0x2b8>)
 800195a:	f7ff f82b 	bl	80009b4 <BuzzerPlay>
				DisplayWithoutParameters(DISPLAY_WRONG_CALIBRATION);
 800195e:	2006      	movs	r0, #6
 8001960:	f7ff fc38 	bl	80011d4 <DisplayWithoutParameters>
				Honey->State = EMERGENCY_PRESENT_WARNING;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	220d      	movs	r2, #13
 8001968:	701a      	strb	r2, [r3, #0]
				break;
 800196a:	e112      	b.n	8001b92 <HoneyTask+0x482>
			}

			Honey->Bottling.BeginWeight = (int)HX711_getCalculatedWeight(Honey->Calibration);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3304      	adds	r3, #4
 8001970:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001974:	f7ff fbd4 	bl	8001120 <HX711_getCalculatedWeight>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	60da      	str	r2, [r3, #12]

			if(Honey->Bottling.BeginWeight < MIN_VALUE_OF_EMPTY_JAR)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b63      	cmp	r3, #99	@ 0x63
 8001986:	d80a      	bhi.n	800199e <HoneyTask+0x28e>
			{
				/*
				 * Platform is empty
				 */
				BuzzerPlay(&Buzzer,CHANGE_STEP);
 8001988:	2101      	movs	r1, #1
 800198a:	480f      	ldr	r0, [pc, #60]	@ (80019c8 <HoneyTask+0x2b8>)
 800198c:	f7ff f812 	bl	80009b4 <BuzzerPlay>
				DisplayWithoutParameters(DISPLAY_PUT_JAR);
 8001990:	2007      	movs	r0, #7
 8001992:	f7ff fc1f 	bl	80011d4 <DisplayWithoutParameters>
				Honey->State = EMERGENCY_PRESENT_WARNING;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	220d      	movs	r2, #13
 800199a:	701a      	strb	r2, [r3, #0]
				break;
 800199c:	e0f9      	b.n	8001b92 <HoneyTask+0x482>

			}

			Servo_SetPWMSignal(&HelperServo, HELPER_TAP_OPENED);
 800199e:	2132      	movs	r1, #50	@ 0x32
 80019a0:	4810      	ldr	r0, [pc, #64]	@ (80019e4 <HoneyTask+0x2d4>)
 80019a2:	f000 fabf 	bl	8001f24 <Servo_SetPWMSignal>

			if(InterinalTickTimer_WaitMillisecond(WAIT_2_SEC))
 80019a6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019aa:	f7ff fe33 	bl	8001614 <InterinalTickTimer_WaitMillisecond>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80e3 	beq.w	8001b7c <HoneyTask+0x46c>
			{
				Servo_SetPWMSignal(&Servo, MAIN_TAP_100_PERCENT_OPEN);
 80019b6:	2196      	movs	r1, #150	@ 0x96
 80019b8:	4808      	ldr	r0, [pc, #32]	@ (80019dc <HoneyTask+0x2cc>)
 80019ba:	f000 fab3 	bl	8001f24 <Servo_SetPWMSignal>
				Honey->State = BOTTLING_MAIN_ROUTINE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2209      	movs	r2, #9
 80019c2:	701a      	strb	r2, [r3, #0]
			}

			break;
 80019c4:	e0da      	b.n	8001b7c <HoneyTask+0x46c>
 80019c6:	bf00      	nop
 80019c8:	200000bc 	.word	0x200000bc
 80019cc:	200000cc 	.word	0x200000cc
 80019d0:	200000e4 	.word	0x200000e4
 80019d4:	200000fc 	.word	0x200000fc
 80019d8:	20000114 	.word	0x20000114
 80019dc:	200000a4 	.word	0x200000a4
 80019e0:	2000053c 	.word	0x2000053c
 80019e4:	200000b0 	.word	0x200000b0
		}
		case BOTTLING_MAIN_ROUTINE:
		{
			if(InterinalTickTimer_WaitMillisecond(WAIT_10_MS))
 80019e8:	200a      	movs	r0, #10
 80019ea:	f7ff fe13 	bl	8001614 <InterinalTickTimer_WaitMillisecond>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80c5 	beq.w	8001b80 <HoneyTask+0x470>
			{
				Weight.actualWeightBrutto = HX711_getCalculatedWeight(Honey->Calibration);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3304      	adds	r3, #4
 80019fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019fe:	f7ff fb8f 	bl	8001120 <HX711_getCalculatedWeight>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4a6a      	ldr	r2, [pc, #424]	@ (8001bb0 <HoneyTask+0x4a0>)
 8001a06:	6013      	str	r3, [r2, #0]
				Weight.actualWeightNetto = Weight.actualWeightBrutto - Honey->Bottling.BeginWeight;
 8001a08:	4b69      	ldr	r3, [pc, #420]	@ (8001bb0 <HoneyTask+0x4a0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b66      	ldr	r3, [pc, #408]	@ (8001bb0 <HoneyTask+0x4a0>)
 8001a18:	605a      	str	r2, [r3, #4]

				DisplayWithParameters(DISPLAY_BOTTLING,Honey,Weight.actualWeightNetto);
 8001a1a:	4b65      	ldr	r3, [pc, #404]	@ (8001bb0 <HoneyTask+0x4a0>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68f9      	ldr	r1, [r7, #12]
 8001a22:	2001      	movs	r0, #1
 8001a24:	f7ff fd0c 	bl	8001440 <DisplayWithParameters>

				if(Weight.actualWeightNetto > (BOTTLING_3RD_LVL)*Honey->Bottling.TargetWeight)
 8001a28:	4b61      	ldr	r3, [pc, #388]	@ (8001bb0 <HoneyTask+0x4a0>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fe0b 	bl	8000648 <__aeabi_i2d>
 8001a32:	4604      	mov	r4, r0
 8001a34:	460d      	mov	r5, r1
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fdf4 	bl	8000628 <__aeabi_ui2d>
 8001a40:	a357      	add	r3, pc, #348	@ (adr r3, 8001ba0 <HoneyTask+0x490>)
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	f7fe fb83 	bl	8000150 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4620      	mov	r0, r4
 8001a50:	4629      	mov	r1, r5
 8001a52:	f7fe fee1 	bl	8000818 <__aeabi_dcmpgt>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d012      	beq.n	8001a82 <HoneyTask+0x372>
				{
					Servo_SetPWMSignal(&Servo, MAIN_TAP_CLOSED);
 8001a5c:	2132      	movs	r1, #50	@ 0x32
 8001a5e:	4855      	ldr	r0, [pc, #340]	@ (8001bb4 <HoneyTask+0x4a4>)
 8001a60:	f000 fa60 	bl	8001f24 <Servo_SetPWMSignal>
					BuzzerPlay(&Buzzer,FINISH);
 8001a64:	2102      	movs	r1, #2
 8001a66:	4854      	ldr	r0, [pc, #336]	@ (8001bb8 <HoneyTask+0x4a8>)
 8001a68:	f7fe ffa4 	bl	80009b4 <BuzzerPlay>
					DisplayWithParameters(DISPLAY_END,Honey,Weight.actualWeightNetto);
 8001a6c:	4b50      	ldr	r3, [pc, #320]	@ (8001bb0 <HoneyTask+0x4a0>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	461a      	mov	r2, r3
 8001a72:	68f9      	ldr	r1, [r7, #12]
 8001a74:	2002      	movs	r0, #2
 8001a76:	f7ff fce3 	bl	8001440 <DisplayWithParameters>
					Honey->State = BOTTLING_CLOSE_TAP;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	220a      	movs	r2, #10
 8001a7e:	701a      	strb	r2, [r3, #0]
					break;
 8001a80:	e087      	b.n	8001b92 <HoneyTask+0x482>
				}
				else if(Weight.actualWeightNetto > (BOTTLING_2ND_LVL)*Honey->Bottling.TargetWeight)
 8001a82:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb0 <HoneyTask+0x4a0>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fdde 	bl	8000648 <__aeabi_i2d>
 8001a8c:	4604      	mov	r4, r0
 8001a8e:	460d      	mov	r5, r1
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fdc7 	bl	8000628 <__aeabi_ui2d>
 8001a9a:	a343      	add	r3, pc, #268	@ (adr r3, 8001ba8 <HoneyTask+0x498>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fb56 	bl	8000150 <__aeabi_dmul>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	4629      	mov	r1, r5
 8001aac:	f7fe feb4 	bl	8000818 <__aeabi_dcmpgt>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d004      	beq.n	8001ac0 <HoneyTask+0x3b0>
				{
					Servo_SetPWMSignal(&Servo, MAIN_TAP_10_PERCENT_OPEN);
 8001ab6:	2141      	movs	r1, #65	@ 0x41
 8001ab8:	483e      	ldr	r0, [pc, #248]	@ (8001bb4 <HoneyTask+0x4a4>)
 8001aba:	f000 fa33 	bl	8001f24 <Servo_SetPWMSignal>
					break;
 8001abe:	e068      	b.n	8001b92 <HoneyTask+0x482>

				}
				else if(Weight.actualWeightNetto > (BOTTLING_1ST_LVL)*Honey->Bottling.TargetWeight)
 8001ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb0 <HoneyTask+0x4a0>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fdbf 	bl	8000648 <__aeabi_i2d>
 8001aca:	4604      	mov	r4, r0
 8001acc:	460d      	mov	r5, r1
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fda8 	bl	8000628 <__aeabi_ui2d>
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b37      	ldr	r3, [pc, #220]	@ (8001bbc <HoneyTask+0x4ac>)
 8001ade:	f7fe fb37 	bl	8000150 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	4629      	mov	r1, r5
 8001aea:	f7fe fe95 	bl	8000818 <__aeabi_dcmpgt>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d100      	bne.n	8001af6 <HoneyTask+0x3e6>
				{
					Servo_SetPWMSignal(&Servo, MAIN_TAP_20_PERCENT_OPEN);
					break;
				}
			}
			break;
 8001af4:	e044      	b.n	8001b80 <HoneyTask+0x470>
					Servo_SetPWMSignal(&Servo, MAIN_TAP_20_PERCENT_OPEN);
 8001af6:	214b      	movs	r1, #75	@ 0x4b
 8001af8:	482e      	ldr	r0, [pc, #184]	@ (8001bb4 <HoneyTask+0x4a4>)
 8001afa:	f000 fa13 	bl	8001f24 <Servo_SetPWMSignal>
					break;
 8001afe:	e048      	b.n	8001b92 <HoneyTask+0x482>
		}
		case BOTTLING_CLOSE_TAP:
		{
			if(InterinalTickTimer_WaitMillisecond(WAIT_2_SEC))
 8001b00:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b04:	f7ff fd86 	bl	8001614 <InterinalTickTimer_WaitMillisecond>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d03a      	beq.n	8001b84 <HoneyTask+0x474>
			{
				Servo_SetPWMSignal(&HelperServo, HELPER_TAP_CLOSED);
 8001b0e:	2196      	movs	r1, #150	@ 0x96
 8001b10:	482b      	ldr	r0, [pc, #172]	@ (8001bc0 <HoneyTask+0x4b0>)
 8001b12:	f000 fa07 	bl	8001f24 <Servo_SetPWMSignal>
				Honey->State = BOTTLING_DISPLAY_FINISH;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	220b      	movs	r2, #11
 8001b1a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001b1c:	e032      	b.n	8001b84 <HoneyTask+0x474>
		}
		case BOTTLING_DISPLAY_FINISH:
		{
			if(InterinalTickTimer_WaitMillisecond(WAIT_2_SEC))
 8001b1e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b22:	f7ff fd77 	bl	8001614 <InterinalTickTimer_WaitMillisecond>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d02d      	beq.n	8001b88 <HoneyTask+0x478>
			{
				Honey->State = WAITING_FOR_CHOOSE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001b32:	e029      	b.n	8001b88 <HoneyTask+0x478>
		}
		case EMERGENCY_CLOSE_TAP:
		{
			if(InterinalTickTimer_WaitMillisecond(WAIT_2_SEC))
 8001b34:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b38:	f7ff fd6c 	bl	8001614 <InterinalTickTimer_WaitMillisecond>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d024      	beq.n	8001b8c <HoneyTask+0x47c>
			{
				Servo_SetPWMSignal(&HelperServo, HELPER_TAP_CLOSED);
 8001b42:	2196      	movs	r1, #150	@ 0x96
 8001b44:	481e      	ldr	r0, [pc, #120]	@ (8001bc0 <HoneyTask+0x4b0>)
 8001b46:	f000 f9ed 	bl	8001f24 <Servo_SetPWMSignal>
				Honey->State = EMERGENCY_PRESENT_WARNING;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	220d      	movs	r2, #13
 8001b4e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001b50:	e01c      	b.n	8001b8c <HoneyTask+0x47c>
		}
		case EMERGENCY_PRESENT_WARNING:
		{
			if(InterinalTickTimer_WaitMillisecond(WAIT_4_SEC))
 8001b52:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001b56:	f7ff fd5d 	bl	8001614 <InterinalTickTimer_WaitMillisecond>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d017      	beq.n	8001b90 <HoneyTask+0x480>
			{
				Honey->State = WAITING_FOR_CHOOSE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001b66:	e013      	b.n	8001b90 <HoneyTask+0x480>
			break;
 8001b68:	bf00      	nop
 8001b6a:	e012      	b.n	8001b92 <HoneyTask+0x482>
			break;
 8001b6c:	bf00      	nop
 8001b6e:	e010      	b.n	8001b92 <HoneyTask+0x482>
			break;
 8001b70:	bf00      	nop
 8001b72:	e00e      	b.n	8001b92 <HoneyTask+0x482>
			break;
 8001b74:	bf00      	nop
 8001b76:	e00c      	b.n	8001b92 <HoneyTask+0x482>
			break;
 8001b78:	bf00      	nop
 8001b7a:	e00a      	b.n	8001b92 <HoneyTask+0x482>
			break;
 8001b7c:	bf00      	nop
 8001b7e:	e008      	b.n	8001b92 <HoneyTask+0x482>
			break;
 8001b80:	bf00      	nop
 8001b82:	e006      	b.n	8001b92 <HoneyTask+0x482>
			break;
 8001b84:	bf00      	nop
 8001b86:	e004      	b.n	8001b92 <HoneyTask+0x482>
			break;
 8001b88:	bf00      	nop
 8001b8a:	e002      	b.n	8001b92 <HoneyTask+0x482>
			break;
 8001b8c:	bf00      	nop
 8001b8e:	e000      	b.n	8001b92 <HoneyTask+0x482>
			break;
 8001b90:	bf00      	nop
		}

	}
}
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bdb0      	pop	{r4, r5, r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	f3af 8000 	nop.w
 8001ba0:	66666666 	.word	0x66666666
 8001ba4:	3fee6666 	.word	0x3fee6666
 8001ba8:	33333333 	.word	0x33333333
 8001bac:	3feb3333 	.word	0x3feb3333
 8001bb0:	2000012c 	.word	0x2000012c
 8001bb4:	200000a4 	.word	0x200000a4
 8001bb8:	200000bc 	.word	0x200000bc
 8001bbc:	3fe80000 	.word	0x3fe80000
 8001bc0:	200000b0 	.word	0x200000b0

08001bc4 <SSD1306_Command>:

I2C_HandleTypeDef *oled_i2c;
static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af04      	add	r7, sp, #16
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, SSD1306_ADDRESS, 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 8001bce:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <SSD1306_Command+0x30>)
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd6:	9302      	str	r3, [sp, #8]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	1dfb      	adds	r3, r7, #7
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2301      	movs	r3, #1
 8001be2:	2200      	movs	r2, #0
 8001be4:	2178      	movs	r1, #120	@ 0x78
 8001be6:	f001 fd5d 	bl	80036a4 <HAL_I2C_Mem_Write>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000138 	.word	0x20000138

08001bf8 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af04      	add	r7, sp, #16
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Mem_Write(oled_i2c, SSD1306_ADDRESS, 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 8001c04:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <SSD1306_Data+0x30>)
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c0c:	9302      	str	r3, [sp, #8]
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2301      	movs	r3, #1
 8001c18:	2240      	movs	r2, #64	@ 0x40
 8001c1a:	2178      	movs	r1, #120	@ 0x78
 8001c1c:	f001 fd42 	bl	80036a4 <HAL_I2C_Mem_Write>
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000138 	.word	0x20000138

08001c2c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	80fb      	strh	r3, [r7, #6]
 8001c36:	460b      	mov	r3, r1
 8001c38:	80bb      	strh	r3, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8001c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	db79      	blt.n	8001d3a <SSD1306_DrawPixel+0x10e>
 8001c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c4c:	dc75      	bgt.n	8001d3a <SSD1306_DrawPixel+0x10e>
 8001c4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	db71      	blt.n	8001d3a <SSD1306_DrawPixel+0x10e>
 8001c56:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c5c:	dc6d      	bgt.n	8001d3a <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d049      	beq.n	8001cf8 <SSD1306_DrawPixel+0xcc>
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	dc69      	bgt.n	8001d3c <SSD1306_DrawPixel+0x110>
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d022      	beq.n	8001cb2 <SSD1306_DrawPixel+0x86>
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d165      	bne.n	8001d3c <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8001c70:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c74:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	da00      	bge.n	8001c7e <SSD1306_DrawPixel+0x52>
 8001c7c:	3307      	adds	r3, #7
 8001c7e:	10db      	asrs	r3, r3, #3
 8001c80:	b218      	sxth	r0, r3
 8001c82:	4603      	mov	r3, r0
 8001c84:	01db      	lsls	r3, r3, #7
 8001c86:	4413      	add	r3, r2
 8001c88:	4a2e      	ldr	r2, [pc, #184]	@ (8001d44 <SSD1306_DrawPixel+0x118>)
 8001c8a:	5cd3      	ldrb	r3, [r2, r3]
 8001c8c:	b25a      	sxtb	r2, r3
 8001c8e:	88bb      	ldrh	r3, [r7, #4]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	2101      	movs	r1, #1
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	b25b      	sxtb	r3, r3
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	b259      	sxtb	r1, r3
 8001ca0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	01db      	lsls	r3, r3, #7
 8001ca8:	4413      	add	r3, r2
 8001caa:	b2c9      	uxtb	r1, r1
 8001cac:	4a25      	ldr	r2, [pc, #148]	@ (8001d44 <SSD1306_DrawPixel+0x118>)
 8001cae:	54d1      	strb	r1, [r2, r3]
      break;
 8001cb0:	e044      	b.n	8001d3c <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8001cb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cb6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	da00      	bge.n	8001cc0 <SSD1306_DrawPixel+0x94>
 8001cbe:	3307      	adds	r3, #7
 8001cc0:	10db      	asrs	r3, r3, #3
 8001cc2:	b218      	sxth	r0, r3
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	01db      	lsls	r3, r3, #7
 8001cc8:	4413      	add	r3, r2
 8001cca:	4a1e      	ldr	r2, [pc, #120]	@ (8001d44 <SSD1306_DrawPixel+0x118>)
 8001ccc:	5cd3      	ldrb	r3, [r2, r3]
 8001cce:	b25a      	sxtb	r2, r3
 8001cd0:	88bb      	ldrh	r3, [r7, #4]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	b25b      	sxtb	r3, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	b259      	sxtb	r1, r3
 8001ce6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cea:	4603      	mov	r3, r0
 8001cec:	01db      	lsls	r3, r3, #7
 8001cee:	4413      	add	r3, r2
 8001cf0:	b2c9      	uxtb	r1, r1
 8001cf2:	4a14      	ldr	r2, [pc, #80]	@ (8001d44 <SSD1306_DrawPixel+0x118>)
 8001cf4:	54d1      	strb	r1, [r2, r3]
      break;
 8001cf6:	e021      	b.n	8001d3c <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 8001cf8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cfc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	da00      	bge.n	8001d06 <SSD1306_DrawPixel+0xda>
 8001d04:	3307      	adds	r3, #7
 8001d06:	10db      	asrs	r3, r3, #3
 8001d08:	b218      	sxth	r0, r3
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	01db      	lsls	r3, r3, #7
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a0c      	ldr	r2, [pc, #48]	@ (8001d44 <SSD1306_DrawPixel+0x118>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	b25a      	sxtb	r2, r3
 8001d16:	88bb      	ldrh	r3, [r7, #4]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	b25b      	sxtb	r3, r3
 8001d24:	4053      	eors	r3, r2
 8001d26:	b259      	sxtb	r1, r3
 8001d28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	01db      	lsls	r3, r3, #7
 8001d30:	4413      	add	r3, r2
 8001d32:	b2c9      	uxtb	r1, r1
 8001d34:	4a03      	ldr	r2, [pc, #12]	@ (8001d44 <SSD1306_DrawPixel+0x118>)
 8001d36:	54d1      	strb	r1, [r2, r3]
      break;
 8001d38:	e000      	b.n	8001d3c <SSD1306_DrawPixel+0x110>
	  return;
 8001d3a:	bf00      	nop
    }
}
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	2000013c 	.word	0x2000013c

08001d48 <SSD1306_Clear>:



void SSD1306_Clear(uint8_t Color)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <SSD1306_Clear+0x22>
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d10d      	bne.n	8001d78 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 8001d5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d60:	21ff      	movs	r1, #255	@ 0xff
 8001d62:	4807      	ldr	r0, [pc, #28]	@ (8001d80 <SSD1306_Clear+0x38>)
 8001d64:	f004 f828 	bl	8005db8 <memset>
		break;
 8001d68:	e006      	b.n	8001d78 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 8001d6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4803      	ldr	r0, [pc, #12]	@ (8001d80 <SSD1306_Clear+0x38>)
 8001d72:	f004 f821 	bl	8005db8 <memset>
		break;
 8001d76:	bf00      	nop
	}
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	2000013c 	.word	0x2000013c

08001d84 <SSD1306_Display>:


void SSD1306_Display(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 8001d88:	2022      	movs	r0, #34	@ 0x22
 8001d8a:	f7ff ff1b 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f7ff ff18 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 8001d94:	20ff      	movs	r0, #255	@ 0xff
 8001d96:	f7ff ff15 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 8001d9a:	2021      	movs	r0, #33	@ 0x21
 8001d9c:	f7ff ff12 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 8001da0:	2000      	movs	r0, #0
 8001da2:	f7ff ff0f 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8001da6:	207f      	movs	r0, #127	@ 0x7f
 8001da8:	f7ff ff0c 	bl	8001bc4 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 8001dac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001db0:	4802      	ldr	r0, [pc, #8]	@ (8001dbc <SSD1306_Display+0x38>)
 8001db2:	f7ff ff21 	bl	8001bf8 <SSD1306_Data>

}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	2000013c 	.word	0x2000013c

08001dc0 <SSD1306_Init>:


void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 8001dc8:	4a2a      	ldr	r2, [pc, #168]	@ (8001e74 <SSD1306_Init+0xb4>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6013      	str	r3, [r2, #0]
	SSD1306_Command(SSD1306_DISPLAYOFF);
 8001dce:	20ae      	movs	r0, #174	@ 0xae
 8001dd0:	f7ff fef8 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8001dd4:	20d5      	movs	r0, #213	@ 0xd5
 8001dd6:	f7ff fef5 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(0x80);
 8001dda:	2080      	movs	r0, #128	@ 0x80
 8001ddc:	f7ff fef2 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETMULTIPLEX);
 8001de0:	20a8      	movs	r0, #168	@ 0xa8
 8001de2:	f7ff feef 	bl	8001bc4 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8001de6:	203f      	movs	r0, #63	@ 0x3f
 8001de8:	f7ff feec 	bl	8001bc4 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 8001dec:	20d3      	movs	r0, #211	@ 0xd3
 8001dee:	f7ff fee9 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(0x00);
 8001df2:	2000      	movs	r0, #0
 8001df4:	f7ff fee6 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 8001df8:	2040      	movs	r0, #64	@ 0x40
 8001dfa:	f7ff fee3 	bl	8001bc4 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 8001dfe:	208d      	movs	r0, #141	@ 0x8d
 8001e00:	f7ff fee0 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(0x14);
 8001e04:	2014      	movs	r0, #20
 8001e06:	f7ff fedd 	bl	8001bc4 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE);
 8001e0a:	2020      	movs	r0, #32
 8001e0c:	f7ff feda 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(0x00);
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff fed7 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP| 0x1);
 8001e16:	20a1      	movs	r0, #161	@ 0xa1
 8001e18:	f7ff fed4 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 8001e1c:	20c8      	movs	r0, #200	@ 0xc8
 8001e1e:	f7ff fed1 	bl	8001bc4 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8001e22:	20da      	movs	r0, #218	@ 0xda
 8001e24:	f7ff fece 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(0x12);
 8001e28:	2012      	movs	r0, #18
 8001e2a:	f7ff fecb 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 8001e2e:	2081      	movs	r0, #129	@ 0x81
 8001e30:	f7ff fec8 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(0xFF);
 8001e34:	20ff      	movs	r0, #255	@ 0xff
 8001e36:	f7ff fec5 	bl	8001bc4 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE);
 8001e3a:	20d9      	movs	r0, #217	@ 0xd9
 8001e3c:	f7ff fec2 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(0xF1);
 8001e40:	20f1      	movs	r0, #241	@ 0xf1
 8001e42:	f7ff febf 	bl	8001bc4 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 8001e46:	20db      	movs	r0, #219	@ 0xdb
 8001e48:	f7ff febc 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(0x40);
 8001e4c:	2040      	movs	r0, #64	@ 0x40
 8001e4e:	f7ff feb9 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 8001e52:	20a4      	movs	r0, #164	@ 0xa4
 8001e54:	f7ff feb6 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 8001e58:	20a6      	movs	r0, #166	@ 0xa6
 8001e5a:	f7ff feb3 	bl	8001bc4 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 8001e5e:	202e      	movs	r0, #46	@ 0x2e
 8001e60:	f7ff feb0 	bl	8001bc4 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 8001e64:	20af      	movs	r0, #175	@ 0xaf
 8001e66:	f7ff fead 	bl	8001bc4 <SSD1306_Command>

}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000138 	.word	0x20000138

08001e78 <Servo_Init>:
#include "main.h"
#include "Servo.h"
#include "Honey_StateMachine.h"

void Servo_Init(TServo* Servo, TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t InitSignal)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	70fb      	strb	r3, [r7, #3]
	Servo->servo_tim = htim;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	601a      	str	r2, [r3, #0]
	Servo->Channel = Channel;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	605a      	str	r2, [r3, #4]
	Servo->InitSignal = InitSignal;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	721a      	strb	r2, [r3, #8]

	HAL_TIM_PWM_Start(Servo->servo_tim, Servo->Channel);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	f003 f822 	bl	8004eec <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(Servo->servo_tim, Servo->Channel, InitSignal * OFFSET);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10a      	bne.n	8001ec6 <Servo_Init+0x4e>
 8001eb0:	78fa      	ldrb	r2, [r7, #3]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ec4:	e02a      	b.n	8001f1c <Servo_Init+0xa4>
	__HAL_TIM_SET_COMPARE(Servo->servo_tim, Servo->Channel, InitSignal * OFFSET);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d10b      	bne.n	8001ee6 <Servo_Init+0x6e>
 8001ece:	78fa      	ldrb	r2, [r7, #3]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4619      	mov	r1, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001ee4:	e01a      	b.n	8001f1c <Servo_Init+0xa4>
	__HAL_TIM_SET_COMPARE(Servo->servo_tim, Servo->Channel, InitSignal * OFFSET);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d10b      	bne.n	8001f06 <Servo_Init+0x8e>
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4619      	mov	r1, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	460b      	mov	r3, r1
 8001f02:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001f04:	e00a      	b.n	8001f1c <Servo_Init+0xa4>
	__HAL_TIM_SET_COMPARE(Servo->servo_tim, Servo->Channel, InitSignal * OFFSET);
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4619      	mov	r1, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <Servo_SetPWMSignal>:

void Servo_SetPWMSignal(TServo* Servo, uint8_t Signal)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	70fb      	strb	r3, [r7, #3]
	__HAL_TIM_SET_COMPARE(Servo->servo_tim, Servo->Channel, Signal * OFFSET);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10a      	bne.n	8001f4e <Servo_SetPWMSignal+0x2a>
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	461a      	mov	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001f4c:	e02a      	b.n	8001fa4 <Servo_SetPWMSignal+0x80>
	__HAL_TIM_SET_COMPARE(Servo->servo_tim, Servo->Channel, Signal * OFFSET);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d10b      	bne.n	8001f6e <Servo_SetPWMSignal+0x4a>
 8001f56:	78fa      	ldrb	r2, [r7, #3]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4619      	mov	r1, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001f6c:	e01a      	b.n	8001fa4 <Servo_SetPWMSignal+0x80>
	__HAL_TIM_SET_COMPARE(Servo->servo_tim, Servo->Channel, Signal * OFFSET);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d10b      	bne.n	8001f8e <Servo_SetPWMSignal+0x6a>
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4619      	mov	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001f8c:	e00a      	b.n	8001fa4 <Servo_SetPWMSignal+0x80>
	__HAL_TIM_SET_COMPARE(Servo->servo_tim, Servo->Channel, Signal * OFFSET);
 8001f8e:	78fa      	ldrb	r2, [r7, #3]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4619      	mov	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
	...

08001fb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <MX_DMA_Init+0x38>)
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe8 <MX_DMA_Init+0x38>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6153      	str	r3, [r2, #20]
 8001fc2:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <MX_DMA_Init+0x38>)
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	200e      	movs	r0, #14
 8001fd4:	f000 fea7 	bl	8002d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001fd8:	200e      	movs	r0, #14
 8001fda:	f000 fec0 	bl	8002d5e <HAL_NVIC_EnableIRQ>

}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000

08001fec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff2:	f107 0310 	add.w	r3, r7, #16
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002000:	4b40      	ldr	r3, [pc, #256]	@ (8002104 <MX_GPIO_Init+0x118>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a3f      	ldr	r2, [pc, #252]	@ (8002104 <MX_GPIO_Init+0x118>)
 8002006:	f043 0310 	orr.w	r3, r3, #16
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b3d      	ldr	r3, [pc, #244]	@ (8002104 <MX_GPIO_Init+0x118>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002018:	4b3a      	ldr	r3, [pc, #232]	@ (8002104 <MX_GPIO_Init+0x118>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a39      	ldr	r2, [pc, #228]	@ (8002104 <MX_GPIO_Init+0x118>)
 800201e:	f043 0320 	orr.w	r3, r3, #32
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b37      	ldr	r3, [pc, #220]	@ (8002104 <MX_GPIO_Init+0x118>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0320 	and.w	r3, r3, #32
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002030:	4b34      	ldr	r3, [pc, #208]	@ (8002104 <MX_GPIO_Init+0x118>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	4a33      	ldr	r2, [pc, #204]	@ (8002104 <MX_GPIO_Init+0x118>)
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	6193      	str	r3, [r2, #24]
 800203c:	4b31      	ldr	r3, [pc, #196]	@ (8002104 <MX_GPIO_Init+0x118>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002048:	4b2e      	ldr	r3, [pc, #184]	@ (8002104 <MX_GPIO_Init+0x118>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4a2d      	ldr	r2, [pc, #180]	@ (8002104 <MX_GPIO_Init+0x118>)
 800204e:	f043 0308 	orr.w	r3, r3, #8
 8002052:	6193      	str	r3, [r2, #24]
 8002054:	4b2b      	ldr	r3, [pc, #172]	@ (8002104 <MX_GPIO_Init+0x118>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	603b      	str	r3, [r7, #0]
 800205e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002060:	2200      	movs	r2, #0
 8002062:	2120      	movs	r1, #32
 8002064:	4828      	ldr	r0, [pc, #160]	@ (8002108 <MX_GPIO_Init+0x11c>)
 8002066:	f001 f990 	bl	800338a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_9, GPIO_PIN_RESET);
 800206a:	2200      	movs	r2, #0
 800206c:	f240 2101 	movw	r1, #513	@ 0x201
 8002070:	4826      	ldr	r0, [pc, #152]	@ (800210c <MX_GPIO_Init+0x120>)
 8002072:	f001 f98a 	bl	800338a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002076:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800207a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800207c:	4b24      	ldr	r3, [pc, #144]	@ (8002110 <MX_GPIO_Init+0x124>)
 800207e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002084:	f107 0310 	add.w	r3, r7, #16
 8002088:	4619      	mov	r1, r3
 800208a:	4822      	ldr	r0, [pc, #136]	@ (8002114 <MX_GPIO_Init+0x128>)
 800208c:	f000 ffe2 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002090:	230f      	movs	r3, #15
 8002092:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002094:	4b20      	ldr	r3, [pc, #128]	@ (8002118 <MX_GPIO_Init+0x12c>)
 8002096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002098:	2301      	movs	r3, #1
 800209a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	4619      	mov	r1, r3
 80020a2:	481c      	ldr	r0, [pc, #112]	@ (8002114 <MX_GPIO_Init+0x128>)
 80020a4:	f000 ffd6 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80020a8:	2320      	movs	r3, #32
 80020aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ac:	2301      	movs	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2302      	movs	r3, #2
 80020b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	4619      	mov	r1, r3
 80020be:	4812      	ldr	r0, [pc, #72]	@ (8002108 <MX_GPIO_Init+0x11c>)
 80020c0:	f000 ffc8 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9;
 80020c4:	f240 2301 	movw	r3, #513	@ 0x201
 80020c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ca:	2301      	movs	r3, #1
 80020cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2302      	movs	r3, #2
 80020d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d6:	f107 0310 	add.w	r3, r7, #16
 80020da:	4619      	mov	r1, r3
 80020dc:	480b      	ldr	r0, [pc, #44]	@ (800210c <MX_GPIO_Init+0x120>)
 80020de:	f000 ffb9 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f107 0310 	add.w	r3, r7, #16
 80020f4:	4619      	mov	r1, r3
 80020f6:	4805      	ldr	r0, [pc, #20]	@ (800210c <MX_GPIO_Init+0x120>)
 80020f8:	f000 ffac 	bl	8003054 <HAL_GPIO_Init>

}
 80020fc:	bf00      	nop
 80020fe:	3720      	adds	r7, #32
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	40010800 	.word	0x40010800
 800210c:	40010c00 	.word	0x40010c00
 8002110:	10110000 	.word	0x10110000
 8002114:	40011000 	.word	0x40011000
 8002118:	10210000 	.word	0x10210000

0800211c <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <MX_I2C2_Init+0x50>)
 8002122:	4a13      	ldr	r2, [pc, #76]	@ (8002170 <MX_I2C2_Init+0x54>)
 8002124:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002126:	4b11      	ldr	r3, [pc, #68]	@ (800216c <MX_I2C2_Init+0x50>)
 8002128:	4a12      	ldr	r2, [pc, #72]	@ (8002174 <MX_I2C2_Init+0x58>)
 800212a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800212c:	4b0f      	ldr	r3, [pc, #60]	@ (800216c <MX_I2C2_Init+0x50>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002132:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <MX_I2C2_Init+0x50>)
 8002134:	2200      	movs	r2, #0
 8002136:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002138:	4b0c      	ldr	r3, [pc, #48]	@ (800216c <MX_I2C2_Init+0x50>)
 800213a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800213e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002140:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <MX_I2C2_Init+0x50>)
 8002142:	2200      	movs	r2, #0
 8002144:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002146:	4b09      	ldr	r3, [pc, #36]	@ (800216c <MX_I2C2_Init+0x50>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800214c:	4b07      	ldr	r3, [pc, #28]	@ (800216c <MX_I2C2_Init+0x50>)
 800214e:	2200      	movs	r2, #0
 8002150:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002152:	4b06      	ldr	r3, [pc, #24]	@ (800216c <MX_I2C2_Init+0x50>)
 8002154:	2200      	movs	r2, #0
 8002156:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002158:	4804      	ldr	r0, [pc, #16]	@ (800216c <MX_I2C2_Init+0x50>)
 800215a:	f001 f95f 	bl	800341c <HAL_I2C_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002164:	f000 f930 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}
 800216c:	2000053c 	.word	0x2000053c
 8002170:	40005800 	.word	0x40005800
 8002174:	00061a80 	.word	0x00061a80

08002178 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 0310 	add.w	r3, r7, #16
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a29      	ldr	r2, [pc, #164]	@ (8002238 <HAL_I2C_MspInit+0xc0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d14a      	bne.n	800222e <HAL_I2C_MspInit+0xb6>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002198:	4b28      	ldr	r3, [pc, #160]	@ (800223c <HAL_I2C_MspInit+0xc4>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a27      	ldr	r2, [pc, #156]	@ (800223c <HAL_I2C_MspInit+0xc4>)
 800219e:	f043 0308 	orr.w	r3, r3, #8
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	4b25      	ldr	r3, [pc, #148]	@ (800223c <HAL_I2C_MspInit+0xc4>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80021b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021b6:	2312      	movs	r3, #18
 80021b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021be:	f107 0310 	add.w	r3, r7, #16
 80021c2:	4619      	mov	r1, r3
 80021c4:	481e      	ldr	r0, [pc, #120]	@ (8002240 <HAL_I2C_MspInit+0xc8>)
 80021c6:	f000 ff45 	bl	8003054 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021ca:	4b1c      	ldr	r3, [pc, #112]	@ (800223c <HAL_I2C_MspInit+0xc4>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	4a1b      	ldr	r2, [pc, #108]	@ (800223c <HAL_I2C_MspInit+0xc4>)
 80021d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021d4:	61d3      	str	r3, [r2, #28]
 80021d6:	4b19      	ldr	r3, [pc, #100]	@ (800223c <HAL_I2C_MspInit+0xc4>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80021e2:	4b18      	ldr	r3, [pc, #96]	@ (8002244 <HAL_I2C_MspInit+0xcc>)
 80021e4:	4a18      	ldr	r2, [pc, #96]	@ (8002248 <HAL_I2C_MspInit+0xd0>)
 80021e6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021e8:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <HAL_I2C_MspInit+0xcc>)
 80021ea:	2210      	movs	r2, #16
 80021ec:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ee:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <HAL_I2C_MspInit+0xcc>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_DISABLE;
 80021f4:	4b13      	ldr	r3, [pc, #76]	@ (8002244 <HAL_I2C_MspInit+0xcc>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021fa:	4b12      	ldr	r3, [pc, #72]	@ (8002244 <HAL_I2C_MspInit+0xcc>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002200:	4b10      	ldr	r3, [pc, #64]	@ (8002244 <HAL_I2C_MspInit+0xcc>)
 8002202:	2200      	movs	r2, #0
 8002204:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002206:	4b0f      	ldr	r3, [pc, #60]	@ (8002244 <HAL_I2C_MspInit+0xcc>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800220c:	4b0d      	ldr	r3, [pc, #52]	@ (8002244 <HAL_I2C_MspInit+0xcc>)
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002212:	480c      	ldr	r0, [pc, #48]	@ (8002244 <HAL_I2C_MspInit+0xcc>)
 8002214:	f000 fdbe 	bl	8002d94 <HAL_DMA_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 800221e:	f000 f8d3 	bl	80023c8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a07      	ldr	r2, [pc, #28]	@ (8002244 <HAL_I2C_MspInit+0xcc>)
 8002226:	635a      	str	r2, [r3, #52]	@ 0x34
 8002228:	4a06      	ldr	r2, [pc, #24]	@ (8002244 <HAL_I2C_MspInit+0xcc>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800222e:	bf00      	nop
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40005800 	.word	0x40005800
 800223c:	40021000 	.word	0x40021000
 8002240:	40010c00 	.word	0x40010c00
 8002244:	20000590 	.word	0x20000590
 8002248:	40020044 	.word	0x40020044

0800224c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002250:	f000 fc0c 	bl	8002a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002254:	f000 f81a 	bl	800228c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002258:	f7ff fec8 	bl	8001fec <MX_GPIO_Init>
  MX_DMA_Init();
 800225c:	f7ff fea8 	bl	8001fb0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002260:	f000 fb76 	bl	8002950 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002264:	f000 f988 	bl	8002578 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002268:	f000 f9d2 	bl	8002610 <MX_TIM3_Init>
  MX_I2C2_Init();
 800226c:	f7ff ff56 	bl	800211c <MX_I2C2_Init>
  MX_TIM4_Init();
 8002270:	f000 fa46 	bl	8002700 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002274:	f000 f84f 	bl	8002316 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HoneyInit(&Honey);
 8002278:	4803      	ldr	r0, [pc, #12]	@ (8002288 <main+0x3c>)
 800227a:	f7ff f9ed 	bl	8001658 <HoneyInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HoneyTask(&Honey);
 800227e:	4802      	ldr	r0, [pc, #8]	@ (8002288 <main+0x3c>)
 8002280:	f7ff fa46 	bl	8001710 <HoneyTask>
 8002284:	e7fb      	b.n	800227e <main+0x32>
 8002286:	bf00      	nop
 8002288:	200005d4 	.word	0x200005d4

0800228c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b090      	sub	sp, #64	@ 0x40
 8002290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002292:	f107 0318 	add.w	r3, r7, #24
 8002296:	2228      	movs	r2, #40	@ 0x28
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f003 fd8c 	bl	8005db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
 80022ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022ae:	2301      	movs	r3, #1
 80022b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80022b2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80022b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022b8:	2300      	movs	r3, #0
 80022ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022bc:	2301      	movs	r3, #1
 80022be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022c0:	2302      	movs	r3, #2
 80022c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022ca:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80022ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022d0:	f107 0318 	add.w	r3, r7, #24
 80022d4:	4618      	mov	r0, r3
 80022d6:	f002 f907 	bl	80044e8 <HAL_RCC_OscConfig>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80022e0:	f000 f872 	bl	80023c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022e4:	230f      	movs	r3, #15
 80022e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e8:	2302      	movs	r3, #2
 80022ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022fa:	1d3b      	adds	r3, r7, #4
 80022fc:	2102      	movs	r1, #2
 80022fe:	4618      	mov	r0, r3
 8002300:	f002 fb74 	bl	80049ec <HAL_RCC_ClockConfig>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800230a:	f000 f85d 	bl	80023c8 <Error_Handler>
  }
}
 800230e:	bf00      	nop
 8002310:	3740      	adds	r7, #64	@ 0x40
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2100      	movs	r1, #0
 800231e:	2028      	movs	r0, #40	@ 0x28
 8002320:	f000 fd01 	bl	8002d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002324:	2028      	movs	r0, #40	@ 0x28
 8002326:	f000 fd1a 	bl	8002d5e <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2100      	movs	r1, #0
 800232e:	2006      	movs	r0, #6
 8002330:	f000 fcf9 	bl	8002d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002334:	2006      	movs	r0, #6
 8002336:	f000 fd12 	bl	8002d5e <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2101      	movs	r1, #1
 800233e:	2007      	movs	r0, #7
 8002340:	f000 fcf1 	bl	8002d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002344:	2007      	movs	r0, #7
 8002346:	f000 fd0a 	bl	8002d5e <HAL_NVIC_EnableIRQ>
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2101      	movs	r1, #1
 800234e:	2008      	movs	r0, #8
 8002350:	f000 fce9 	bl	8002d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002354:	2008      	movs	r0, #8
 8002356:	f000 fd02 	bl	8002d5e <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2101      	movs	r1, #1
 800235e:	2009      	movs	r0, #9
 8002360:	f000 fce1 	bl	8002d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002364:	2009      	movs	r0, #9
 8002366:	f000 fcfa 	bl	8002d5e <HAL_NVIC_EnableIRQ>
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin== GPIO_PIN_0)
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d103      	bne.n	8002388 <HAL_GPIO_EXTI_Callback+0x18>
	{
		ButtonHandleIRQ(&ButtonFour);
 8002380:	480d      	ldr	r0, [pc, #52]	@ (80023b8 <HAL_GPIO_EXTI_Callback+0x48>)
 8002382:	f7fe fa74 	bl	800086e <ButtonHandleIRQ>
	}
	else if(GPIO_Pin== GPIO_PIN_2)
	{
		ButtonHandleIRQ(&ButtonOne);
	}
}
 8002386:	e013      	b.n	80023b0 <HAL_GPIO_EXTI_Callback+0x40>
	else if(GPIO_Pin== GPIO_PIN_1)
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d103      	bne.n	8002396 <HAL_GPIO_EXTI_Callback+0x26>
		ButtonHandleIRQ(&ButtonThree);
 800238e:	480b      	ldr	r0, [pc, #44]	@ (80023bc <HAL_GPIO_EXTI_Callback+0x4c>)
 8002390:	f7fe fa6d 	bl	800086e <ButtonHandleIRQ>
}
 8002394:	e00c      	b.n	80023b0 <HAL_GPIO_EXTI_Callback+0x40>
	else if(GPIO_Pin== GPIO_PIN_3)
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	2b08      	cmp	r3, #8
 800239a:	d103      	bne.n	80023a4 <HAL_GPIO_EXTI_Callback+0x34>
		ButtonHandleIRQ(&ButtonTwo);
 800239c:	4808      	ldr	r0, [pc, #32]	@ (80023c0 <HAL_GPIO_EXTI_Callback+0x50>)
 800239e:	f7fe fa66 	bl	800086e <ButtonHandleIRQ>
}
 80023a2:	e005      	b.n	80023b0 <HAL_GPIO_EXTI_Callback+0x40>
	else if(GPIO_Pin== GPIO_PIN_2)
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d102      	bne.n	80023b0 <HAL_GPIO_EXTI_Callback+0x40>
		ButtonHandleIRQ(&ButtonOne);
 80023aa:	4806      	ldr	r0, [pc, #24]	@ (80023c4 <HAL_GPIO_EXTI_Callback+0x54>)
 80023ac:	f7fe fa5f 	bl	800086e <ButtonHandleIRQ>
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000114 	.word	0x20000114
 80023bc:	200000fc 	.word	0x200000fc
 80023c0:	200000e4 	.word	0x200000e4
 80023c4:	200000cc 	.word	0x200000cc

080023c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023cc:	b672      	cpsid	i
}
 80023ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <Error_Handler+0x8>

080023d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023da:	4b15      	ldr	r3, [pc, #84]	@ (8002430 <HAL_MspInit+0x5c>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	4a14      	ldr	r2, [pc, #80]	@ (8002430 <HAL_MspInit+0x5c>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6193      	str	r3, [r2, #24]
 80023e6:	4b12      	ldr	r3, [pc, #72]	@ (8002430 <HAL_MspInit+0x5c>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002430 <HAL_MspInit+0x5c>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002430 <HAL_MspInit+0x5c>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023fc:	61d3      	str	r3, [r2, #28]
 80023fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <HAL_MspInit+0x5c>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800240a:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <HAL_MspInit+0x60>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	4a04      	ldr	r2, [pc, #16]	@ (8002434 <HAL_MspInit+0x60>)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	40021000 	.word	0x40021000
 8002434:	40010000 	.word	0x40010000

08002438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <NMI_Handler+0x4>

08002440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <HardFault_Handler+0x4>

08002448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <MemManage_Handler+0x4>

08002450 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <BusFault_Handler+0x4>

08002458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <UsageFault_Handler+0x4>

08002460 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002488:	f000 fb36 	bl	8002af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}

08002490 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002494:	2001      	movs	r0, #1
 8002496:	f000 ffa9 	bl	80033ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}

0800249e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80024a2:	2002      	movs	r0, #2
 80024a4:	f000 ffa2 	bl	80033ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80024b0:	2004      	movs	r0, #4
 80024b2:	f000 ff9b 	bl	80033ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}

080024ba <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80024be:	2008      	movs	r0, #8
 80024c0:	f000 ff94 	bl	80033ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80024cc:	4802      	ldr	r0, [pc, #8]	@ (80024d8 <DMA1_Channel4_IRQHandler+0x10>)
 80024ce:	f000 fcbb 	bl	8002e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000590 	.word	0x20000590

080024dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024e0:	4802      	ldr	r0, [pc, #8]	@ (80024ec <TIM4_IRQHandler+0x10>)
 80024e2:	f002 fda5 	bl	8005030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	2000067c 	.word	0x2000067c

080024f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80024f4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80024f8:	f000 ff78 	bl	80033ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}

08002500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002508:	4a14      	ldr	r2, [pc, #80]	@ (800255c <_sbrk+0x5c>)
 800250a:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <_sbrk+0x60>)
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002514:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <_sbrk+0x64>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800251c:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <_sbrk+0x64>)
 800251e:	4a12      	ldr	r2, [pc, #72]	@ (8002568 <_sbrk+0x68>)
 8002520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002522:	4b10      	ldr	r3, [pc, #64]	@ (8002564 <_sbrk+0x64>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	429a      	cmp	r2, r3
 800252e:	d207      	bcs.n	8002540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002530:	f003 fc4a 	bl	8005dc8 <__errno>
 8002534:	4603      	mov	r3, r0
 8002536:	220c      	movs	r2, #12
 8002538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	e009      	b.n	8002554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002540:	4b08      	ldr	r3, [pc, #32]	@ (8002564 <_sbrk+0x64>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002546:	4b07      	ldr	r3, [pc, #28]	@ (8002564 <_sbrk+0x64>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	4a05      	ldr	r2, [pc, #20]	@ (8002564 <_sbrk+0x64>)
 8002550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002552:	68fb      	ldr	r3, [r7, #12]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20005000 	.word	0x20005000
 8002560:	00000400 	.word	0x00000400
 8002564:	200005e8 	.word	0x200005e8
 8002568:	20000858 	.word	0x20000858

0800256c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800257e:	f107 0308 	add.w	r3, r7, #8
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258c:	463b      	mov	r3, r7
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002594:	4b1d      	ldr	r3, [pc, #116]	@ (800260c <MX_TIM2_Init+0x94>)
 8002596:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800259a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800259c:	4b1b      	ldr	r3, [pc, #108]	@ (800260c <MX_TIM2_Init+0x94>)
 800259e:	2247      	movs	r2, #71	@ 0x47
 80025a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a2:	4b1a      	ldr	r3, [pc, #104]	@ (800260c <MX_TIM2_Init+0x94>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80025a8:	4b18      	ldr	r3, [pc, #96]	@ (800260c <MX_TIM2_Init+0x94>)
 80025aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b0:	4b16      	ldr	r3, [pc, #88]	@ (800260c <MX_TIM2_Init+0x94>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b6:	4b15      	ldr	r3, [pc, #84]	@ (800260c <MX_TIM2_Init+0x94>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025bc:	4813      	ldr	r0, [pc, #76]	@ (800260c <MX_TIM2_Init+0x94>)
 80025be:	f002 fba3 	bl	8004d08 <HAL_TIM_Base_Init>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80025c8:	f7ff fefe 	bl	80023c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025d2:	f107 0308 	add.w	r3, r7, #8
 80025d6:	4619      	mov	r1, r3
 80025d8:	480c      	ldr	r0, [pc, #48]	@ (800260c <MX_TIM2_Init+0x94>)
 80025da:	f002 fedb 	bl	8005394 <HAL_TIM_ConfigClockSource>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80025e4:	f7ff fef0 	bl	80023c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e8:	2300      	movs	r3, #0
 80025ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025f0:	463b      	mov	r3, r7
 80025f2:	4619      	mov	r1, r3
 80025f4:	4805      	ldr	r0, [pc, #20]	@ (800260c <MX_TIM2_Init+0x94>)
 80025f6:	f003 fa71 	bl	8005adc <HAL_TIMEx_MasterConfigSynchronization>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002600:	f7ff fee2 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002604:	bf00      	nop
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	200005ec 	.word	0x200005ec

08002610 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08e      	sub	sp, #56	@ 0x38
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002616:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002624:	f107 0320 	add.w	r3, r7, #32
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
 800263c:	615a      	str	r2, [r3, #20]
 800263e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002640:	4b2d      	ldr	r3, [pc, #180]	@ (80026f8 <MX_TIM3_Init+0xe8>)
 8002642:	4a2e      	ldr	r2, [pc, #184]	@ (80026fc <MX_TIM3_Init+0xec>)
 8002644:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002646:	4b2c      	ldr	r3, [pc, #176]	@ (80026f8 <MX_TIM3_Init+0xe8>)
 8002648:	2247      	movs	r2, #71	@ 0x47
 800264a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264c:	4b2a      	ldr	r3, [pc, #168]	@ (80026f8 <MX_TIM3_Init+0xe8>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8002652:	4b29      	ldr	r3, [pc, #164]	@ (80026f8 <MX_TIM3_Init+0xe8>)
 8002654:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002658:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800265a:	4b27      	ldr	r3, [pc, #156]	@ (80026f8 <MX_TIM3_Init+0xe8>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002660:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <MX_TIM3_Init+0xe8>)
 8002662:	2200      	movs	r2, #0
 8002664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002666:	4824      	ldr	r0, [pc, #144]	@ (80026f8 <MX_TIM3_Init+0xe8>)
 8002668:	f002 fb4e 	bl	8004d08 <HAL_TIM_Base_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002672:	f7ff fea9 	bl	80023c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800267a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800267c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002680:	4619      	mov	r1, r3
 8002682:	481d      	ldr	r0, [pc, #116]	@ (80026f8 <MX_TIM3_Init+0xe8>)
 8002684:	f002 fe86 	bl	8005394 <HAL_TIM_ConfigClockSource>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800268e:	f7ff fe9b 	bl	80023c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002692:	4819      	ldr	r0, [pc, #100]	@ (80026f8 <MX_TIM3_Init+0xe8>)
 8002694:	f002 fbd2 	bl	8004e3c <HAL_TIM_PWM_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800269e:	f7ff fe93 	bl	80023c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026aa:	f107 0320 	add.w	r3, r7, #32
 80026ae:	4619      	mov	r1, r3
 80026b0:	4811      	ldr	r0, [pc, #68]	@ (80026f8 <MX_TIM3_Init+0xe8>)
 80026b2:	f003 fa13 	bl	8005adc <HAL_TIMEx_MasterConfigSynchronization>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80026bc:	f7ff fe84 	bl	80023c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026c0:	2360      	movs	r3, #96	@ 0x60
 80026c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80026c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	2200      	movs	r2, #0
 80026d6:	4619      	mov	r1, r3
 80026d8:	4807      	ldr	r0, [pc, #28]	@ (80026f8 <MX_TIM3_Init+0xe8>)
 80026da:	f002 fd99 	bl	8005210 <HAL_TIM_PWM_ConfigChannel>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80026e4:	f7ff fe70 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026e8:	4803      	ldr	r0, [pc, #12]	@ (80026f8 <MX_TIM3_Init+0xe8>)
 80026ea:	f000 f8cb 	bl	8002884 <HAL_TIM_MspPostInit>

}
 80026ee:	bf00      	nop
 80026f0:	3738      	adds	r7, #56	@ 0x38
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000634 	.word	0x20000634
 80026fc:	40000400 	.word	0x40000400

08002700 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08e      	sub	sp, #56	@ 0x38
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002706:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002714:	f107 0320 	add.w	r3, r7, #32
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
 800272c:	615a      	str	r2, [r3, #20]
 800272e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002730:	4b2c      	ldr	r3, [pc, #176]	@ (80027e4 <MX_TIM4_Init+0xe4>)
 8002732:	4a2d      	ldr	r2, [pc, #180]	@ (80027e8 <MX_TIM4_Init+0xe8>)
 8002734:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8002736:	4b2b      	ldr	r3, [pc, #172]	@ (80027e4 <MX_TIM4_Init+0xe4>)
 8002738:	2247      	movs	r2, #71	@ 0x47
 800273a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273c:	4b29      	ldr	r3, [pc, #164]	@ (80027e4 <MX_TIM4_Init+0xe4>)
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8002742:	4b28      	ldr	r3, [pc, #160]	@ (80027e4 <MX_TIM4_Init+0xe4>)
 8002744:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002748:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800274a:	4b26      	ldr	r3, [pc, #152]	@ (80027e4 <MX_TIM4_Init+0xe4>)
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002750:	4b24      	ldr	r3, [pc, #144]	@ (80027e4 <MX_TIM4_Init+0xe4>)
 8002752:	2200      	movs	r2, #0
 8002754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002756:	4823      	ldr	r0, [pc, #140]	@ (80027e4 <MX_TIM4_Init+0xe4>)
 8002758:	f002 fad6 	bl	8004d08 <HAL_TIM_Base_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002762:	f7ff fe31 	bl	80023c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002766:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800276a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800276c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002770:	4619      	mov	r1, r3
 8002772:	481c      	ldr	r0, [pc, #112]	@ (80027e4 <MX_TIM4_Init+0xe4>)
 8002774:	f002 fe0e 	bl	8005394 <HAL_TIM_ConfigClockSource>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800277e:	f7ff fe23 	bl	80023c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002782:	4818      	ldr	r0, [pc, #96]	@ (80027e4 <MX_TIM4_Init+0xe4>)
 8002784:	f002 fb5a 	bl	8004e3c <HAL_TIM_PWM_Init>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800278e:	f7ff fe1b 	bl	80023c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002796:	2300      	movs	r3, #0
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800279a:	f107 0320 	add.w	r3, r7, #32
 800279e:	4619      	mov	r1, r3
 80027a0:	4810      	ldr	r0, [pc, #64]	@ (80027e4 <MX_TIM4_Init+0xe4>)
 80027a2:	f003 f99b 	bl	8005adc <HAL_TIMEx_MasterConfigSynchronization>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80027ac:	f7ff fe0c 	bl	80023c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027b0:	2360      	movs	r3, #96	@ 0x60
 80027b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027c0:	1d3b      	adds	r3, r7, #4
 80027c2:	2200      	movs	r2, #0
 80027c4:	4619      	mov	r1, r3
 80027c6:	4807      	ldr	r0, [pc, #28]	@ (80027e4 <MX_TIM4_Init+0xe4>)
 80027c8:	f002 fd22 	bl	8005210 <HAL_TIM_PWM_ConfigChannel>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80027d2:	f7ff fdf9 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80027d6:	4803      	ldr	r0, [pc, #12]	@ (80027e4 <MX_TIM4_Init+0xe4>)
 80027d8:	f000 f854 	bl	8002884 <HAL_TIM_MspPostInit>

}
 80027dc:	bf00      	nop
 80027de:	3738      	adds	r7, #56	@ 0x38
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	2000067c 	.word	0x2000067c
 80027e8:	40000800 	.word	0x40000800

080027ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027fc:	d10c      	bne.n	8002818 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002878 <HAL_TIM_Base_MspInit+0x8c>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	4a1d      	ldr	r2, [pc, #116]	@ (8002878 <HAL_TIM_Base_MspInit+0x8c>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	61d3      	str	r3, [r2, #28]
 800280a:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <HAL_TIM_Base_MspInit+0x8c>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002816:	e02a      	b.n	800286e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a17      	ldr	r2, [pc, #92]	@ (800287c <HAL_TIM_Base_MspInit+0x90>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10c      	bne.n	800283c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002822:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <HAL_TIM_Base_MspInit+0x8c>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	4a14      	ldr	r2, [pc, #80]	@ (8002878 <HAL_TIM_Base_MspInit+0x8c>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	61d3      	str	r3, [r2, #28]
 800282e:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <HAL_TIM_Base_MspInit+0x8c>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]
}
 800283a:	e018      	b.n	800286e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM4)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0f      	ldr	r2, [pc, #60]	@ (8002880 <HAL_TIM_Base_MspInit+0x94>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d113      	bne.n	800286e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002846:	4b0c      	ldr	r3, [pc, #48]	@ (8002878 <HAL_TIM_Base_MspInit+0x8c>)
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	4a0b      	ldr	r2, [pc, #44]	@ (8002878 <HAL_TIM_Base_MspInit+0x8c>)
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	61d3      	str	r3, [r2, #28]
 8002852:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HAL_TIM_Base_MspInit+0x8c>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	2100      	movs	r1, #0
 8002862:	201e      	movs	r0, #30
 8002864:	f000 fa5f 	bl	8002d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002868:	201e      	movs	r0, #30
 800286a:	f000 fa78 	bl	8002d5e <HAL_NVIC_EnableIRQ>
}
 800286e:	bf00      	nop
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	40000400 	.word	0x40000400
 8002880:	40000800 	.word	0x40000800

08002884 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	@ 0x28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a27      	ldr	r2, [pc, #156]	@ (800293c <HAL_TIM_MspPostInit+0xb8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d12a      	bne.n	80028fa <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a4:	4b26      	ldr	r3, [pc, #152]	@ (8002940 <HAL_TIM_MspPostInit+0xbc>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	4a25      	ldr	r2, [pc, #148]	@ (8002940 <HAL_TIM_MspPostInit+0xbc>)
 80028aa:	f043 0308 	orr.w	r3, r3, #8
 80028ae:	6193      	str	r3, [r2, #24]
 80028b0:	4b23      	ldr	r3, [pc, #140]	@ (8002940 <HAL_TIM_MspPostInit+0xbc>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028bc:	2310      	movs	r3, #16
 80028be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2302      	movs	r3, #2
 80028c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4619      	mov	r1, r3
 80028ce:	481d      	ldr	r0, [pc, #116]	@ (8002944 <HAL_TIM_MspPostInit+0xc0>)
 80028d0:	f000 fbc0 	bl	8003054 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80028d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002948 <HAL_TIM_MspPostInit+0xc4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80028e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80028e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f2:	4a15      	ldr	r2, [pc, #84]	@ (8002948 <HAL_TIM_MspPostInit+0xc4>)
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80028f8:	e01c      	b.n	8002934 <HAL_TIM_MspPostInit+0xb0>
  else if(timHandle->Instance==TIM4)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a13      	ldr	r2, [pc, #76]	@ (800294c <HAL_TIM_MspPostInit+0xc8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d117      	bne.n	8002934 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002904:	4b0e      	ldr	r3, [pc, #56]	@ (8002940 <HAL_TIM_MspPostInit+0xbc>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	4a0d      	ldr	r2, [pc, #52]	@ (8002940 <HAL_TIM_MspPostInit+0xbc>)
 800290a:	f043 0308 	orr.w	r3, r3, #8
 800290e:	6193      	str	r3, [r2, #24]
 8002910:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_TIM_MspPostInit+0xbc>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800291c:	2340      	movs	r3, #64	@ 0x40
 800291e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2302      	movs	r3, #2
 8002926:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	4619      	mov	r1, r3
 800292e:	4805      	ldr	r0, [pc, #20]	@ (8002944 <HAL_TIM_MspPostInit+0xc0>)
 8002930:	f000 fb90 	bl	8003054 <HAL_GPIO_Init>
}
 8002934:	bf00      	nop
 8002936:	3728      	adds	r7, #40	@ 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40000400 	.word	0x40000400
 8002940:	40021000 	.word	0x40021000
 8002944:	40010c00 	.word	0x40010c00
 8002948:	40010000 	.word	0x40010000
 800294c:	40000800 	.word	0x40000800

08002950 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002954:	4b11      	ldr	r3, [pc, #68]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002956:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <MX_USART2_UART_Init+0x50>)
 8002958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 800295c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002968:	4b0c      	ldr	r3, [pc, #48]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800296e:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002974:	4b09      	ldr	r3, [pc, #36]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002976:	220c      	movs	r2, #12
 8002978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800297a:	4b08      	ldr	r3, [pc, #32]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002980:	4b06      	ldr	r3, [pc, #24]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002982:	2200      	movs	r2, #0
 8002984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002986:	4805      	ldr	r0, [pc, #20]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002988:	f003 f918 	bl	8005bbc <HAL_UART_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002992:	f7ff fd19 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	200006c4 	.word	0x200006c4
 80029a0:	40004400 	.word	0x40004400

080029a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0310 	add.w	r3, r7, #16
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a15      	ldr	r2, [pc, #84]	@ (8002a14 <HAL_UART_MspInit+0x70>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d123      	bne.n	8002a0c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029c4:	4b14      	ldr	r3, [pc, #80]	@ (8002a18 <HAL_UART_MspInit+0x74>)
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	4a13      	ldr	r2, [pc, #76]	@ (8002a18 <HAL_UART_MspInit+0x74>)
 80029ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ce:	61d3      	str	r3, [r2, #28]
 80029d0:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <HAL_UART_MspInit+0x74>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002a18 <HAL_UART_MspInit+0x74>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a18 <HAL_UART_MspInit+0x74>)
 80029e2:	f043 0304 	orr.w	r3, r3, #4
 80029e6:	6193      	str	r3, [r2, #24]
 80029e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a18 <HAL_UART_MspInit+0x74>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029f4:	230c      	movs	r3, #12
 80029f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2302      	movs	r3, #2
 80029fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a00:	f107 0310 	add.w	r3, r7, #16
 8002a04:	4619      	mov	r1, r3
 8002a06:	4805      	ldr	r0, [pc, #20]	@ (8002a1c <HAL_UART_MspInit+0x78>)
 8002a08:	f000 fb24 	bl	8003054 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	3720      	adds	r7, #32
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40004400 	.word	0x40004400
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40010800 	.word	0x40010800

08002a20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a20:	f7ff fda4 	bl	800256c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a24:	480b      	ldr	r0, [pc, #44]	@ (8002a54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a26:	490c      	ldr	r1, [pc, #48]	@ (8002a58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a28:	4a0c      	ldr	r2, [pc, #48]	@ (8002a5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a2c:	e002      	b.n	8002a34 <LoopCopyDataInit>

08002a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a32:	3304      	adds	r3, #4

08002a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a38:	d3f9      	bcc.n	8002a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3a:	4a09      	ldr	r2, [pc, #36]	@ (8002a60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a3c:	4c09      	ldr	r4, [pc, #36]	@ (8002a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a40:	e001      	b.n	8002a46 <LoopFillZerobss>

08002a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a42:	6013      	str	r3, [r2, #0]

  adds r2, r2, #4
 8002a44:	3204      	adds	r2, #4

08002a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a48:	d3fb      	bcc.n	8002a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a4a:	f003 f9c3 	bl	8005dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a4e:	f7ff fbfd 	bl	800224c <main>
  bx lr
 8002a52:	4770      	bx	lr
  ldr r0, =_sdata
 8002a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a58:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002a5c:	08006a54 	.word	0x08006a54
  ldr r2, =_sbss
 8002a60:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002a64:	20000858 	.word	0x20000858

08002a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a68:	e7fe      	b.n	8002a68 <ADC1_2_IRQHandler>
	...

08002a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a70:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <HAL_Init+0x28>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a07      	ldr	r2, [pc, #28]	@ (8002a94 <HAL_Init+0x28>)
 8002a76:	f043 0310 	orr.w	r3, r3, #16
 8002a7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a7c:	2003      	movs	r0, #3
 8002a7e:	f000 f947 	bl	8002d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a82:	2000      	movs	r0, #0
 8002a84:	f000 f808 	bl	8002a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a88:	f7ff fca4 	bl	80023d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40022000 	.word	0x40022000

08002a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa0:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_InitTick+0x54>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <HAL_InitTick+0x58>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f95f 	bl	8002d7a <HAL_SYSTICK_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00e      	b.n	8002ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b0f      	cmp	r3, #15
 8002aca:	d80a      	bhi.n	8002ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002acc:	2200      	movs	r2, #0
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	f000 f927 	bl	8002d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad8:	4a06      	ldr	r2, [pc, #24]	@ (8002af4 <HAL_InitTick+0x5c>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e000      	b.n	8002ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000004 	.word	0x20000004
 8002af0:	2000000c 	.word	0x2000000c
 8002af4:	20000008 	.word	0x20000008

08002af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002afc:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <HAL_IncTick+0x1c>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <HAL_IncTick+0x20>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4413      	add	r3, r2
 8002b08:	4a03      	ldr	r2, [pc, #12]	@ (8002b18 <HAL_IncTick+0x20>)
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	2000000c 	.word	0x2000000c
 8002b18:	2000070c 	.word	0x2000070c

08002b1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b20:	4b02      	ldr	r3, [pc, #8]	@ (8002b2c <HAL_GetTick+0x10>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	2000070c 	.word	0x2000070c

08002b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b38:	f7ff fff0 	bl	8002b1c <HAL_GetTick>
 8002b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d005      	beq.n	8002b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b74 <HAL_Delay+0x44>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4413      	add	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b56:	bf00      	nop
 8002b58:	f7ff ffe0 	bl	8002b1c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d8f7      	bhi.n	8002b58 <HAL_Delay+0x28>
  {
  }
}
 8002b68:	bf00      	nop
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000000c 	.word	0x2000000c

08002b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b88:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <__NVIC_SetPriorityGrouping+0x44>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b94:	4013      	ands	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002baa:	4a04      	ldr	r2, [pc, #16]	@ (8002bbc <__NVIC_SetPriorityGrouping+0x44>)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	60d3      	str	r3, [r2, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc4:	4b04      	ldr	r3, [pc, #16]	@ (8002bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	0a1b      	lsrs	r3, r3, #8
 8002bca:	f003 0307 	and.w	r3, r3, #7
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	db0b      	blt.n	8002c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	4906      	ldr	r1, [pc, #24]	@ (8002c10 <__NVIC_EnableIRQ+0x34>)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	e000e100 	.word	0xe000e100

08002c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6039      	str	r1, [r7, #0]
 8002c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db0a      	blt.n	8002c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	490c      	ldr	r1, [pc, #48]	@ (8002c60 <__NVIC_SetPriority+0x4c>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	440b      	add	r3, r1
 8002c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c3c:	e00a      	b.n	8002c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4908      	ldr	r1, [pc, #32]	@ (8002c64 <__NVIC_SetPriority+0x50>)
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	3b04      	subs	r3, #4
 8002c4c:	0112      	lsls	r2, r2, #4
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	440b      	add	r3, r1
 8002c52:	761a      	strb	r2, [r3, #24]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000e100 	.word	0xe000e100
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	@ 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f1c3 0307 	rsb	r3, r3, #7
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	bf28      	it	cs
 8002c86:	2304      	movcs	r3, #4
 8002c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d902      	bls.n	8002c98 <NVIC_EncodePriority+0x30>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3b03      	subs	r3, #3
 8002c96:	e000      	b.n	8002c9a <NVIC_EncodePriority+0x32>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	401a      	ands	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	43d9      	mvns	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc0:	4313      	orrs	r3, r2
         );
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3724      	adds	r7, #36	@ 0x24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cdc:	d301      	bcc.n	8002ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e00f      	b.n	8002d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8002d0c <SysTick_Config+0x40>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cea:	210f      	movs	r1, #15
 8002cec:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf0:	f7ff ff90 	bl	8002c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf4:	4b05      	ldr	r3, [pc, #20]	@ (8002d0c <SysTick_Config+0x40>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cfa:	4b04      	ldr	r3, [pc, #16]	@ (8002d0c <SysTick_Config+0x40>)
 8002cfc:	2207      	movs	r2, #7
 8002cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	e000e010 	.word	0xe000e010

08002d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ff2d 	bl	8002b78 <__NVIC_SetPriorityGrouping>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d38:	f7ff ff42 	bl	8002bc0 <__NVIC_GetPriorityGrouping>
 8002d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	6978      	ldr	r0, [r7, #20]
 8002d44:	f7ff ff90 	bl	8002c68 <NVIC_EncodePriority>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff5f 	bl	8002c14 <__NVIC_SetPriority>
}
 8002d56:	bf00      	nop
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	4603      	mov	r3, r0
 8002d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff ff35 	bl	8002bdc <__NVIC_EnableIRQ>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff ffa2 	bl	8002ccc <SysTick_Config>
 8002d88:	4603      	mov	r3, r0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e043      	b.n	8002e32 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	4b22      	ldr	r3, [pc, #136]	@ (8002e3c <HAL_DMA_Init+0xa8>)
 8002db2:	4413      	add	r3, r2
 8002db4:	4a22      	ldr	r2, [pc, #136]	@ (8002e40 <HAL_DMA_Init+0xac>)
 8002db6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dba:	091b      	lsrs	r3, r3, #4
 8002dbc:	009a      	lsls	r2, r3, #2
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a1f      	ldr	r2, [pc, #124]	@ (8002e44 <HAL_DMA_Init+0xb0>)
 8002dc6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002dde:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002de2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	bffdfff8 	.word	0xbffdfff8
 8002e40:	cccccccd 	.word	0xcccccccd
 8002e44:	40020000 	.word	0x40020000

08002e48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	2204      	movs	r2, #4
 8002e66:	409a      	lsls	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d04f      	beq.n	8002f10 <HAL_DMA_IRQHandler+0xc8>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d04a      	beq.n	8002f10 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d107      	bne.n	8002e98 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0204 	bic.w	r2, r2, #4
 8002e96:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a66      	ldr	r2, [pc, #408]	@ (8003038 <HAL_DMA_IRQHandler+0x1f0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d029      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0xae>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a65      	ldr	r2, [pc, #404]	@ (800303c <HAL_DMA_IRQHandler+0x1f4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d022      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0xaa>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a63      	ldr	r2, [pc, #396]	@ (8003040 <HAL_DMA_IRQHandler+0x1f8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d01a      	beq.n	8002eec <HAL_DMA_IRQHandler+0xa4>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a62      	ldr	r2, [pc, #392]	@ (8003044 <HAL_DMA_IRQHandler+0x1fc>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d012      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0x9e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a60      	ldr	r2, [pc, #384]	@ (8003048 <HAL_DMA_IRQHandler+0x200>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x98>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a5f      	ldr	r2, [pc, #380]	@ (800304c <HAL_DMA_IRQHandler+0x204>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d102      	bne.n	8002eda <HAL_DMA_IRQHandler+0x92>
 8002ed4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ed8:	e00e      	b.n	8002ef8 <HAL_DMA_IRQHandler+0xb0>
 8002eda:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002ede:	e00b      	b.n	8002ef8 <HAL_DMA_IRQHandler+0xb0>
 8002ee0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002ee4:	e008      	b.n	8002ef8 <HAL_DMA_IRQHandler+0xb0>
 8002ee6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002eea:	e005      	b.n	8002ef8 <HAL_DMA_IRQHandler+0xb0>
 8002eec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ef0:	e002      	b.n	8002ef8 <HAL_DMA_IRQHandler+0xb0>
 8002ef2:	2340      	movs	r3, #64	@ 0x40
 8002ef4:	e000      	b.n	8002ef8 <HAL_DMA_IRQHandler+0xb0>
 8002ef6:	2304      	movs	r3, #4
 8002ef8:	4a55      	ldr	r2, [pc, #340]	@ (8003050 <HAL_DMA_IRQHandler+0x208>)
 8002efa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8094 	beq.w	800302e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002f0e:	e08e      	b.n	800302e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	2202      	movs	r2, #2
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d056      	beq.n	8002fce <HAL_DMA_IRQHandler+0x186>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d051      	beq.n	8002fce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10b      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 020a 	bic.w	r2, r2, #10
 8002f46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a38      	ldr	r2, [pc, #224]	@ (8003038 <HAL_DMA_IRQHandler+0x1f0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d029      	beq.n	8002fae <HAL_DMA_IRQHandler+0x166>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a37      	ldr	r2, [pc, #220]	@ (800303c <HAL_DMA_IRQHandler+0x1f4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d022      	beq.n	8002faa <HAL_DMA_IRQHandler+0x162>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a35      	ldr	r2, [pc, #212]	@ (8003040 <HAL_DMA_IRQHandler+0x1f8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d01a      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x15c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a34      	ldr	r2, [pc, #208]	@ (8003044 <HAL_DMA_IRQHandler+0x1fc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d012      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x156>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a32      	ldr	r2, [pc, #200]	@ (8003048 <HAL_DMA_IRQHandler+0x200>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00a      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x150>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a31      	ldr	r2, [pc, #196]	@ (800304c <HAL_DMA_IRQHandler+0x204>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d102      	bne.n	8002f92 <HAL_DMA_IRQHandler+0x14a>
 8002f8c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002f90:	e00e      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x168>
 8002f92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f96:	e00b      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x168>
 8002f98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f9c:	e008      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x168>
 8002f9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fa2:	e005      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x168>
 8002fa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fa8:	e002      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x168>
 8002faa:	2320      	movs	r3, #32
 8002fac:	e000      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x168>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	4a27      	ldr	r2, [pc, #156]	@ (8003050 <HAL_DMA_IRQHandler+0x208>)
 8002fb2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d034      	beq.n	800302e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002fcc:	e02f      	b.n	800302e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d028      	beq.n	8003030 <HAL_DMA_IRQHandler+0x1e8>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d023      	beq.n	8003030 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 020e 	bic.w	r2, r2, #14
 8002ff6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003000:	2101      	movs	r1, #1
 8003002:	fa01 f202 	lsl.w	r2, r1, r2
 8003006:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	2b00      	cmp	r3, #0
 8003024:	d004      	beq.n	8003030 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
    }
  }
  return;
 800302e:	bf00      	nop
 8003030:	bf00      	nop
}
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40020008 	.word	0x40020008
 800303c:	4002001c 	.word	0x4002001c
 8003040:	40020030 	.word	0x40020030
 8003044:	40020044 	.word	0x40020044
 8003048:	40020058 	.word	0x40020058
 800304c:	4002006c 	.word	0x4002006c
 8003050:	40020000 	.word	0x40020000

08003054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003054:	b480      	push	{r7}
 8003056:	b08b      	sub	sp, #44	@ 0x2c
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800305e:	2300      	movs	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003062:	2300      	movs	r3, #0
 8003064:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003066:	e169      	b.n	800333c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003068:	2201      	movs	r2, #1
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	429a      	cmp	r2, r3
 8003082:	f040 8158 	bne.w	8003336 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a9a      	ldr	r2, [pc, #616]	@ (80032f4 <HAL_GPIO_Init+0x2a0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d05e      	beq.n	800314e <HAL_GPIO_Init+0xfa>
 8003090:	4a98      	ldr	r2, [pc, #608]	@ (80032f4 <HAL_GPIO_Init+0x2a0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d875      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 8003096:	4a98      	ldr	r2, [pc, #608]	@ (80032f8 <HAL_GPIO_Init+0x2a4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d058      	beq.n	800314e <HAL_GPIO_Init+0xfa>
 800309c:	4a96      	ldr	r2, [pc, #600]	@ (80032f8 <HAL_GPIO_Init+0x2a4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d86f      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 80030a2:	4a96      	ldr	r2, [pc, #600]	@ (80032fc <HAL_GPIO_Init+0x2a8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d052      	beq.n	800314e <HAL_GPIO_Init+0xfa>
 80030a8:	4a94      	ldr	r2, [pc, #592]	@ (80032fc <HAL_GPIO_Init+0x2a8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d869      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 80030ae:	4a94      	ldr	r2, [pc, #592]	@ (8003300 <HAL_GPIO_Init+0x2ac>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d04c      	beq.n	800314e <HAL_GPIO_Init+0xfa>
 80030b4:	4a92      	ldr	r2, [pc, #584]	@ (8003300 <HAL_GPIO_Init+0x2ac>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d863      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 80030ba:	4a92      	ldr	r2, [pc, #584]	@ (8003304 <HAL_GPIO_Init+0x2b0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d046      	beq.n	800314e <HAL_GPIO_Init+0xfa>
 80030c0:	4a90      	ldr	r2, [pc, #576]	@ (8003304 <HAL_GPIO_Init+0x2b0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d85d      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 80030c6:	2b12      	cmp	r3, #18
 80030c8:	d82a      	bhi.n	8003120 <HAL_GPIO_Init+0xcc>
 80030ca:	2b12      	cmp	r3, #18
 80030cc:	d859      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 80030ce:	a201      	add	r2, pc, #4	@ (adr r2, 80030d4 <HAL_GPIO_Init+0x80>)
 80030d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d4:	0800314f 	.word	0x0800314f
 80030d8:	08003129 	.word	0x08003129
 80030dc:	0800313b 	.word	0x0800313b
 80030e0:	0800317d 	.word	0x0800317d
 80030e4:	08003183 	.word	0x08003183
 80030e8:	08003183 	.word	0x08003183
 80030ec:	08003183 	.word	0x08003183
 80030f0:	08003183 	.word	0x08003183
 80030f4:	08003183 	.word	0x08003183
 80030f8:	08003183 	.word	0x08003183
 80030fc:	08003183 	.word	0x08003183
 8003100:	08003183 	.word	0x08003183
 8003104:	08003183 	.word	0x08003183
 8003108:	08003183 	.word	0x08003183
 800310c:	08003183 	.word	0x08003183
 8003110:	08003183 	.word	0x08003183
 8003114:	08003183 	.word	0x08003183
 8003118:	08003131 	.word	0x08003131
 800311c:	08003145 	.word	0x08003145
 8003120:	4a79      	ldr	r2, [pc, #484]	@ (8003308 <HAL_GPIO_Init+0x2b4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003126:	e02c      	b.n	8003182 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	623b      	str	r3, [r7, #32]
          break;
 800312e:	e029      	b.n	8003184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	3304      	adds	r3, #4
 8003136:	623b      	str	r3, [r7, #32]
          break;
 8003138:	e024      	b.n	8003184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	3308      	adds	r3, #8
 8003140:	623b      	str	r3, [r7, #32]
          break;
 8003142:	e01f      	b.n	8003184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	330c      	adds	r3, #12
 800314a:	623b      	str	r3, [r7, #32]
          break;
 800314c:	e01a      	b.n	8003184 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d102      	bne.n	800315c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003156:	2304      	movs	r3, #4
 8003158:	623b      	str	r3, [r7, #32]
          break;
 800315a:	e013      	b.n	8003184 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d105      	bne.n	8003170 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003164:	2308      	movs	r3, #8
 8003166:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	611a      	str	r2, [r3, #16]
          break;
 800316e:	e009      	b.n	8003184 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003170:	2308      	movs	r3, #8
 8003172:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	615a      	str	r2, [r3, #20]
          break;
 800317a:	e003      	b.n	8003184 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800317c:	2300      	movs	r3, #0
 800317e:	623b      	str	r3, [r7, #32]
          break;
 8003180:	e000      	b.n	8003184 <HAL_GPIO_Init+0x130>
          break;
 8003182:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2bff      	cmp	r3, #255	@ 0xff
 8003188:	d801      	bhi.n	800318e <HAL_GPIO_Init+0x13a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	e001      	b.n	8003192 <HAL_GPIO_Init+0x13e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3304      	adds	r3, #4
 8003192:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2bff      	cmp	r3, #255	@ 0xff
 8003198:	d802      	bhi.n	80031a0 <HAL_GPIO_Init+0x14c>
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	e002      	b.n	80031a6 <HAL_GPIO_Init+0x152>
 80031a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a2:	3b08      	subs	r3, #8
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	210f      	movs	r1, #15
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	401a      	ands	r2, r3
 80031b8:	6a39      	ldr	r1, [r7, #32]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	fa01 f303 	lsl.w	r3, r1, r3
 80031c0:	431a      	orrs	r2, r3
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80b1 	beq.w	8003336 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031d4:	4b4d      	ldr	r3, [pc, #308]	@ (800330c <HAL_GPIO_Init+0x2b8>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	4a4c      	ldr	r2, [pc, #304]	@ (800330c <HAL_GPIO_Init+0x2b8>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6193      	str	r3, [r2, #24]
 80031e0:	4b4a      	ldr	r3, [pc, #296]	@ (800330c <HAL_GPIO_Init+0x2b8>)
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031ec:	4a48      	ldr	r2, [pc, #288]	@ (8003310 <HAL_GPIO_Init+0x2bc>)
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	220f      	movs	r2, #15
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4013      	ands	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a40      	ldr	r2, [pc, #256]	@ (8003314 <HAL_GPIO_Init+0x2c0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d013      	beq.n	8003240 <HAL_GPIO_Init+0x1ec>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a3f      	ldr	r2, [pc, #252]	@ (8003318 <HAL_GPIO_Init+0x2c4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00d      	beq.n	800323c <HAL_GPIO_Init+0x1e8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a3e      	ldr	r2, [pc, #248]	@ (800331c <HAL_GPIO_Init+0x2c8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d007      	beq.n	8003238 <HAL_GPIO_Init+0x1e4>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a3d      	ldr	r2, [pc, #244]	@ (8003320 <HAL_GPIO_Init+0x2cc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d101      	bne.n	8003234 <HAL_GPIO_Init+0x1e0>
 8003230:	2303      	movs	r3, #3
 8003232:	e006      	b.n	8003242 <HAL_GPIO_Init+0x1ee>
 8003234:	2304      	movs	r3, #4
 8003236:	e004      	b.n	8003242 <HAL_GPIO_Init+0x1ee>
 8003238:	2302      	movs	r3, #2
 800323a:	e002      	b.n	8003242 <HAL_GPIO_Init+0x1ee>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <HAL_GPIO_Init+0x1ee>
 8003240:	2300      	movs	r3, #0
 8003242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003244:	f002 0203 	and.w	r2, r2, #3
 8003248:	0092      	lsls	r2, r2, #2
 800324a:	4093      	lsls	r3, r2
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003252:	492f      	ldr	r1, [pc, #188]	@ (8003310 <HAL_GPIO_Init+0x2bc>)
 8003254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	3302      	adds	r3, #2
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d006      	beq.n	800327a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800326c:	4b2d      	ldr	r3, [pc, #180]	@ (8003324 <HAL_GPIO_Init+0x2d0>)
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	492c      	ldr	r1, [pc, #176]	@ (8003324 <HAL_GPIO_Init+0x2d0>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	608b      	str	r3, [r1, #8]
 8003278:	e006      	b.n	8003288 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800327a:	4b2a      	ldr	r3, [pc, #168]	@ (8003324 <HAL_GPIO_Init+0x2d0>)
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	43db      	mvns	r3, r3
 8003282:	4928      	ldr	r1, [pc, #160]	@ (8003324 <HAL_GPIO_Init+0x2d0>)
 8003284:	4013      	ands	r3, r2
 8003286:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d006      	beq.n	80032a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003294:	4b23      	ldr	r3, [pc, #140]	@ (8003324 <HAL_GPIO_Init+0x2d0>)
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	4922      	ldr	r1, [pc, #136]	@ (8003324 <HAL_GPIO_Init+0x2d0>)
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	60cb      	str	r3, [r1, #12]
 80032a0:	e006      	b.n	80032b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032a2:	4b20      	ldr	r3, [pc, #128]	@ (8003324 <HAL_GPIO_Init+0x2d0>)
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	491e      	ldr	r1, [pc, #120]	@ (8003324 <HAL_GPIO_Init+0x2d0>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d006      	beq.n	80032ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032bc:	4b19      	ldr	r3, [pc, #100]	@ (8003324 <HAL_GPIO_Init+0x2d0>)
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	4918      	ldr	r1, [pc, #96]	@ (8003324 <HAL_GPIO_Init+0x2d0>)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]
 80032c8:	e006      	b.n	80032d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032ca:	4b16      	ldr	r3, [pc, #88]	@ (8003324 <HAL_GPIO_Init+0x2d0>)
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	4914      	ldr	r1, [pc, #80]	@ (8003324 <HAL_GPIO_Init+0x2d0>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d021      	beq.n	8003328 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003324 <HAL_GPIO_Init+0x2d0>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	490e      	ldr	r1, [pc, #56]	@ (8003324 <HAL_GPIO_Init+0x2d0>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]
 80032f0:	e021      	b.n	8003336 <HAL_GPIO_Init+0x2e2>
 80032f2:	bf00      	nop
 80032f4:	10320000 	.word	0x10320000
 80032f8:	10310000 	.word	0x10310000
 80032fc:	10220000 	.word	0x10220000
 8003300:	10210000 	.word	0x10210000
 8003304:	10120000 	.word	0x10120000
 8003308:	10110000 	.word	0x10110000
 800330c:	40021000 	.word	0x40021000
 8003310:	40010000 	.word	0x40010000
 8003314:	40010800 	.word	0x40010800
 8003318:	40010c00 	.word	0x40010c00
 800331c:	40011000 	.word	0x40011000
 8003320:	40011400 	.word	0x40011400
 8003324:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003328:	4b0b      	ldr	r3, [pc, #44]	@ (8003358 <HAL_GPIO_Init+0x304>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	43db      	mvns	r3, r3
 8003330:	4909      	ldr	r1, [pc, #36]	@ (8003358 <HAL_GPIO_Init+0x304>)
 8003332:	4013      	ands	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003338:	3301      	adds	r3, #1
 800333a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003342:	fa22 f303 	lsr.w	r3, r2, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	f47f ae8e 	bne.w	8003068 <HAL_GPIO_Init+0x14>
  }
}
 800334c:	bf00      	nop
 800334e:	bf00      	nop
 8003350:	372c      	adds	r7, #44	@ 0x2c
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	40010400 	.word	0x40010400

0800335c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	887b      	ldrh	r3, [r7, #2]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
 8003378:	e001      	b.n	800337e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800337e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	460b      	mov	r3, r1
 8003394:	807b      	strh	r3, [r7, #2]
 8003396:	4613      	mov	r3, r2
 8003398:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800339a:	787b      	ldrb	r3, [r7, #1]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033a0:	887a      	ldrh	r2, [r7, #2]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033a6:	e003      	b.n	80033b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033a8:	887b      	ldrh	r3, [r7, #2]
 80033aa:	041a      	lsls	r2, r3, #16
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	611a      	str	r2, [r3, #16]
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr

080033ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b085      	sub	sp, #20
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	460b      	mov	r3, r1
 80033c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033cc:	887a      	ldrh	r2, [r7, #2]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4013      	ands	r3, r2
 80033d2:	041a      	lsls	r2, r3, #16
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	43d9      	mvns	r1, r3
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	400b      	ands	r3, r1
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	611a      	str	r2, [r3, #16]
}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033f6:	4b08      	ldr	r3, [pc, #32]	@ (8003418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d006      	beq.n	8003410 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003402:	4a05      	ldr	r2, [pc, #20]	@ (8003418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe ffb0 	bl	8002370 <HAL_GPIO_EXTI_Callback>
  }
}
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40010400 	.word	0x40010400

0800341c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e12b      	b.n	8003686 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fe fe98 	bl	8002178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2224      	movs	r2, #36	@ 0x24
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800346e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800347e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003480:	f001 fbfc 	bl	8004c7c <HAL_RCC_GetPCLK1Freq>
 8003484:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4a81      	ldr	r2, [pc, #516]	@ (8003690 <HAL_I2C_Init+0x274>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d807      	bhi.n	80034a0 <HAL_I2C_Init+0x84>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a80      	ldr	r2, [pc, #512]	@ (8003694 <HAL_I2C_Init+0x278>)
 8003494:	4293      	cmp	r3, r2
 8003496:	bf94      	ite	ls
 8003498:	2301      	movls	r3, #1
 800349a:	2300      	movhi	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	e006      	b.n	80034ae <HAL_I2C_Init+0x92>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4a7d      	ldr	r2, [pc, #500]	@ (8003698 <HAL_I2C_Init+0x27c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	bf94      	ite	ls
 80034a8:	2301      	movls	r3, #1
 80034aa:	2300      	movhi	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e0e7      	b.n	8003686 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4a78      	ldr	r2, [pc, #480]	@ (800369c <HAL_I2C_Init+0x280>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	0c9b      	lsrs	r3, r3, #18
 80034c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003690 <HAL_I2C_Init+0x274>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d802      	bhi.n	80034f0 <HAL_I2C_Init+0xd4>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	3301      	adds	r3, #1
 80034ee:	e009      	b.n	8003504 <HAL_I2C_Init+0xe8>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034f6:	fb02 f303 	mul.w	r3, r2, r3
 80034fa:	4a69      	ldr	r2, [pc, #420]	@ (80036a0 <HAL_I2C_Init+0x284>)
 80034fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003500:	099b      	lsrs	r3, r3, #6
 8003502:	3301      	adds	r3, #1
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	430b      	orrs	r3, r1
 800350a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003516:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	495c      	ldr	r1, [pc, #368]	@ (8003690 <HAL_I2C_Init+0x274>)
 8003520:	428b      	cmp	r3, r1
 8003522:	d819      	bhi.n	8003558 <HAL_I2C_Init+0x13c>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	1e59      	subs	r1, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003532:	1c59      	adds	r1, r3, #1
 8003534:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003538:	400b      	ands	r3, r1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <HAL_I2C_Init+0x138>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1e59      	subs	r1, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	fbb1 f3f3 	udiv	r3, r1, r3
 800354c:	3301      	adds	r3, #1
 800354e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003552:	e051      	b.n	80035f8 <HAL_I2C_Init+0x1dc>
 8003554:	2304      	movs	r3, #4
 8003556:	e04f      	b.n	80035f8 <HAL_I2C_Init+0x1dc>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d111      	bne.n	8003584 <HAL_I2C_Init+0x168>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1e58      	subs	r0, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	440b      	add	r3, r1
 800356e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003572:	3301      	adds	r3, #1
 8003574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	e012      	b.n	80035aa <HAL_I2C_Init+0x18e>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1e58      	subs	r0, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	0099      	lsls	r1, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	fbb0 f3f3 	udiv	r3, r0, r3
 800359a:	3301      	adds	r3, #1
 800359c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Init+0x196>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e022      	b.n	80035f8 <HAL_I2C_Init+0x1dc>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10e      	bne.n	80035d8 <HAL_I2C_Init+0x1bc>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1e58      	subs	r0, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6859      	ldr	r1, [r3, #4]
 80035c2:	460b      	mov	r3, r1
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	440b      	add	r3, r1
 80035c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80035cc:	3301      	adds	r3, #1
 80035ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035d6:	e00f      	b.n	80035f8 <HAL_I2C_Init+0x1dc>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1e58      	subs	r0, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6859      	ldr	r1, [r3, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	0099      	lsls	r1, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ee:	3301      	adds	r3, #1
 80035f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	6809      	ldr	r1, [r1, #0]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69da      	ldr	r2, [r3, #28]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003626:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6911      	ldr	r1, [r2, #16]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68d2      	ldr	r2, [r2, #12]
 8003632:	4311      	orrs	r1, r2
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	430b      	orrs	r3, r1
 800363a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	000186a0 	.word	0x000186a0
 8003694:	001e847f 	.word	0x001e847f
 8003698:	003d08ff 	.word	0x003d08ff
 800369c:	431bde83 	.word	0x431bde83
 80036a0:	10624dd3 	.word	0x10624dd3

080036a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	4608      	mov	r0, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	817b      	strh	r3, [r7, #10]
 80036b6:	460b      	mov	r3, r1
 80036b8:	813b      	strh	r3, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036be:	f7ff fa2d 	bl	8002b1c <HAL_GetTick>
 80036c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	f040 80d9 	bne.w	8003884 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	2319      	movs	r3, #25
 80036d8:	2201      	movs	r2, #1
 80036da:	496d      	ldr	r1, [pc, #436]	@ (8003890 <HAL_I2C_Mem_Write+0x1ec>)
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 fccd 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
 80036ea:	e0cc      	b.n	8003886 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_I2C_Mem_Write+0x56>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e0c5      	b.n	8003886 <HAL_I2C_Mem_Write+0x1e2>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d007      	beq.n	8003720 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800372e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2221      	movs	r2, #33	@ 0x21
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2240      	movs	r2, #64	@ 0x40
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a3a      	ldr	r2, [r7, #32]
 800374a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003750:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a4d      	ldr	r2, [pc, #308]	@ (8003894 <HAL_I2C_Mem_Write+0x1f0>)
 8003760:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003762:	88f8      	ldrh	r0, [r7, #6]
 8003764:	893a      	ldrh	r2, [r7, #8]
 8003766:	8979      	ldrh	r1, [r7, #10]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	4603      	mov	r3, r0
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fb04 	bl	8003d80 <I2C_RequestMemoryWrite>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d052      	beq.n	8003824 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e081      	b.n	8003886 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fd92 	bl	80042b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00d      	beq.n	80037ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	2b04      	cmp	r3, #4
 8003798:	d107      	bne.n	80037aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e06b      	b.n	8003886 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	781a      	ldrb	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d11b      	bne.n	8003824 <HAL_I2C_Mem_Write+0x180>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d017      	beq.n	8003824 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	781a      	ldrb	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1aa      	bne.n	8003782 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 fd85 	bl	8004340 <I2C_WaitOnBTFFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00d      	beq.n	8003858 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003840:	2b04      	cmp	r3, #4
 8003842:	d107      	bne.n	8003854 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003852:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e016      	b.n	8003886 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	e000      	b.n	8003886 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003884:	2302      	movs	r3, #2
  }
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	00100002 	.word	0x00100002
 8003894:	ffff0000 	.word	0xffff0000

08003898 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08c      	sub	sp, #48	@ 0x30
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	4608      	mov	r0, r1
 80038a2:	4611      	mov	r1, r2
 80038a4:	461a      	mov	r2, r3
 80038a6:	4603      	mov	r3, r0
 80038a8:	817b      	strh	r3, [r7, #10]
 80038aa:	460b      	mov	r3, r1
 80038ac:	813b      	strh	r3, [r7, #8]
 80038ae:	4613      	mov	r3, r2
 80038b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038b6:	f7ff f931 	bl	8002b1c <HAL_GetTick>
 80038ba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	f040 8250 	bne.w	8003d6a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	2319      	movs	r3, #25
 80038d0:	2201      	movs	r2, #1
 80038d2:	4982      	ldr	r1, [pc, #520]	@ (8003adc <HAL_I2C_Mem_Read+0x244>)
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fbd1 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
 80038e2:	e243      	b.n	8003d6c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_I2C_Mem_Read+0x5a>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e23c      	b.n	8003d6c <HAL_I2C_Mem_Read+0x4d4>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b01      	cmp	r3, #1
 8003906:	d007      	beq.n	8003918 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003926:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2222      	movs	r2, #34	@ 0x22
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2240      	movs	r2, #64	@ 0x40
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003942:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003948:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4a62      	ldr	r2, [pc, #392]	@ (8003ae0 <HAL_I2C_Mem_Read+0x248>)
 8003958:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800395a:	88f8      	ldrh	r0, [r7, #6]
 800395c:	893a      	ldrh	r2, [r7, #8]
 800395e:	8979      	ldrh	r1, [r7, #10]
 8003960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003962:	9301      	str	r3, [sp, #4]
 8003964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	4603      	mov	r3, r0
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fa9e 	bl	8003eac <I2C_RequestMemoryRead>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e1f8      	b.n	8003d6c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397e:	2b00      	cmp	r3, #0
 8003980:	d113      	bne.n	80039aa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e1cc      	b.n	8003d44 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d11e      	bne.n	80039f0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039c2:	b672      	cpsid	i
}
 80039c4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c6:	2300      	movs	r3, #0
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039ec:	b662      	cpsie	i
}
 80039ee:	e035      	b.n	8003a5c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d11e      	bne.n	8003a36 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a08:	b672      	cpsid	i
}
 8003a0a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a32:	b662      	cpsie	i
}
 8003a34:	e012      	b.n	8003a5c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a44:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003a5c:	e172      	b.n	8003d44 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	f200 811f 	bhi.w	8003ca6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d123      	bne.n	8003ab8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 fcab 	bl	80043d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e173      	b.n	8003d6c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ab6:	e145      	b.n	8003d44 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d152      	bne.n	8003b66 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	4906      	ldr	r1, [pc, #24]	@ (8003ae4 <HAL_I2C_Mem_Read+0x24c>)
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 fad6 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d008      	beq.n	8003ae8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e148      	b.n	8003d6c <HAL_I2C_Mem_Read+0x4d4>
 8003ada:	bf00      	nop
 8003adc:	00100002 	.word	0x00100002
 8003ae0:	ffff0000 	.word	0xffff0000
 8003ae4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003ae8:	b672      	cpsid	i
}
 8003aea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003afa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b2e:	b662      	cpsie	i
}
 8003b30:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b64:	e0ee      	b.n	8003d44 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	4981      	ldr	r1, [pc, #516]	@ (8003d74 <HAL_I2C_Mem_Read+0x4dc>)
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 fa83 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0f5      	b.n	8003d6c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b90:	b672      	cpsid	i
}
 8003b92:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bc6:	4b6c      	ldr	r3, [pc, #432]	@ (8003d78 <HAL_I2C_Mem_Read+0x4e0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	08db      	lsrs	r3, r3, #3
 8003bcc:	4a6b      	ldr	r2, [pc, #428]	@ (8003d7c <HAL_I2C_Mem_Read+0x4e4>)
 8003bce:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd2:	0a1a      	lsrs	r2, r3, #8
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	00da      	lsls	r2, r3, #3
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d118      	bne.n	8003c1e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	f043 0220 	orr.w	r2, r3, #32
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003c0e:	b662      	cpsie	i
}
 8003c10:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e0a6      	b.n	8003d6c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d1d9      	bne.n	8003be0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c6e:	b662      	cpsie	i
}
 8003c70:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ca4:	e04e      	b.n	8003d44 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fb90 	bl	80043d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e058      	b.n	8003d6c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d124      	bne.n	8003d44 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d107      	bne.n	8003d12 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d10:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f47f ae88 	bne.w	8003a5e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	e000      	b.n	8003d6c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003d6a:	2302      	movs	r3, #2
  }
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3728      	adds	r7, #40	@ 0x28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	00010004 	.word	0x00010004
 8003d78:	20000004 	.word	0x20000004
 8003d7c:	14f8b589 	.word	0x14f8b589

08003d80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	4608      	mov	r0, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4603      	mov	r3, r0
 8003d90:	817b      	strh	r3, [r7, #10]
 8003d92:	460b      	mov	r3, r1
 8003d94:	813b      	strh	r3, [r7, #8]
 8003d96:	4613      	mov	r3, r2
 8003d98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003da8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f960 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00d      	beq.n	8003dde <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dd0:	d103      	bne.n	8003dda <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e05f      	b.n	8003e9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dde:	897b      	ldrh	r3, [r7, #10]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003dec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	6a3a      	ldr	r2, [r7, #32]
 8003df2:	492d      	ldr	r1, [pc, #180]	@ (8003ea8 <I2C_RequestMemoryWrite+0x128>)
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 f9bb 	bl	8004170 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e04c      	b.n	8003e9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1c:	6a39      	ldr	r1, [r7, #32]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fa46 	bl	80042b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00d      	beq.n	8003e46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d107      	bne.n	8003e42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e02b      	b.n	8003e9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d105      	bne.n	8003e58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e4c:	893b      	ldrh	r3, [r7, #8]
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	611a      	str	r2, [r3, #16]
 8003e56:	e021      	b.n	8003e9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e58:	893b      	ldrh	r3, [r7, #8]
 8003e5a:	0a1b      	lsrs	r3, r3, #8
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e68:	6a39      	ldr	r1, [r7, #32]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fa20 	bl	80042b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00d      	beq.n	8003e92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d107      	bne.n	8003e8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e005      	b.n	8003e9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e92:	893b      	ldrh	r3, [r7, #8]
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	00010002 	.word	0x00010002

08003eac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	817b      	strh	r3, [r7, #10]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	813b      	strh	r3, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f8c2 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00d      	beq.n	8003f1a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f0c:	d103      	bne.n	8003f16 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f14:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e0aa      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f1a:	897b      	ldrh	r3, [r7, #10]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	6a3a      	ldr	r2, [r7, #32]
 8003f2e:	4952      	ldr	r1, [pc, #328]	@ (8004078 <I2C_RequestMemoryRead+0x1cc>)
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 f91d 	bl	8004170 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e097      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f58:	6a39      	ldr	r1, [r7, #32]
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f9a8 	bl	80042b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d107      	bne.n	8003f7e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e076      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d105      	bne.n	8003f94 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f88:	893b      	ldrh	r3, [r7, #8]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	611a      	str	r2, [r3, #16]
 8003f92:	e021      	b.n	8003fd8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f94:	893b      	ldrh	r3, [r7, #8]
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa4:	6a39      	ldr	r1, [r7, #32]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f982 	bl	80042b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00d      	beq.n	8003fce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d107      	bne.n	8003fca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e050      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fce:	893b      	ldrh	r3, [r7, #8]
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fda:	6a39      	ldr	r1, [r7, #32]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f967 	bl	80042b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d107      	bne.n	8004000 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ffe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e035      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004012:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	2200      	movs	r2, #0
 800401c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f82b 	bl	800407c <I2C_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00d      	beq.n	8004048 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800403a:	d103      	bne.n	8004044 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004042:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e013      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004048:	897b      	ldrh	r3, [r7, #10]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	b2da      	uxtb	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	6a3a      	ldr	r2, [r7, #32]
 800405c:	4906      	ldr	r1, [pc, #24]	@ (8004078 <I2C_RequestMemoryRead+0x1cc>)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f886 	bl	8004170 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	00010002 	.word	0x00010002

0800407c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800408c:	e048      	b.n	8004120 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d044      	beq.n	8004120 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004096:	f7fe fd41 	bl	8002b1c <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d302      	bcc.n	80040ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d139      	bne.n	8004120 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	0c1b      	lsrs	r3, r3, #16
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d10d      	bne.n	80040d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	43da      	mvns	r2, r3
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	4013      	ands	r3, r2
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf0c      	ite	eq
 80040c8:	2301      	moveq	r3, #1
 80040ca:	2300      	movne	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	e00c      	b.n	80040ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	43da      	mvns	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d116      	bne.n	8004120 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	f043 0220 	orr.w	r2, r3, #32
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e023      	b.n	8004168 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	0c1b      	lsrs	r3, r3, #16
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b01      	cmp	r3, #1
 8004128:	d10d      	bne.n	8004146 <I2C_WaitOnFlagUntilTimeout+0xca>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	43da      	mvns	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4013      	ands	r3, r2
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	e00c      	b.n	8004160 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	43da      	mvns	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4013      	ands	r3, r2
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	429a      	cmp	r2, r3
 8004164:	d093      	beq.n	800408e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800417e:	e071      	b.n	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800418a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800418e:	d123      	bne.n	80041d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800419e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	f043 0204 	orr.w	r2, r3, #4
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e067      	b.n	80042a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041de:	d041      	beq.n	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e0:	f7fe fc9c 	bl	8002b1c <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d302      	bcc.n	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d136      	bne.n	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d10c      	bne.n	800421a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	43da      	mvns	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4013      	ands	r3, r2
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	bf14      	ite	ne
 8004212:	2301      	movne	r3, #1
 8004214:	2300      	moveq	r3, #0
 8004216:	b2db      	uxtb	r3, r3
 8004218:	e00b      	b.n	8004232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	43da      	mvns	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4013      	ands	r3, r2
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	bf14      	ite	ne
 800422c:	2301      	movne	r3, #1
 800422e:	2300      	moveq	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004250:	f043 0220 	orr.w	r2, r3, #32
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e021      	b.n	80042a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	0c1b      	lsrs	r3, r3, #16
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	d10c      	bne.n	8004288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	43da      	mvns	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4013      	ands	r3, r2
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	bf14      	ite	ne
 8004280:	2301      	movne	r3, #1
 8004282:	2300      	moveq	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	e00b      	b.n	80042a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	43da      	mvns	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4013      	ands	r3, r2
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	bf14      	ite	ne
 800429a:	2301      	movne	r3, #1
 800429c:	2300      	moveq	r3, #0
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f47f af6d 	bne.w	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042bc:	e034      	b.n	8004328 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f8e3 	bl	800448a <I2C_IsAcknowledgeFailed>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e034      	b.n	8004338 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d4:	d028      	beq.n	8004328 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d6:	f7fe fc21 	bl	8002b1c <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d302      	bcc.n	80042ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d11d      	bne.n	8004328 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f6:	2b80      	cmp	r3, #128	@ 0x80
 80042f8:	d016      	beq.n	8004328 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e007      	b.n	8004338 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004332:	2b80      	cmp	r3, #128	@ 0x80
 8004334:	d1c3      	bne.n	80042be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800434c:	e034      	b.n	80043b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f89b 	bl	800448a <I2C_IsAcknowledgeFailed>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e034      	b.n	80043c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	d028      	beq.n	80043b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004366:	f7fe fbd9 	bl	8002b1c <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	d302      	bcc.n	800437c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d11d      	bne.n	80043b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b04      	cmp	r3, #4
 8004388:	d016      	beq.n	80043b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e007      	b.n	80043c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d1c3      	bne.n	800434e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043dc:	e049      	b.n	8004472 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d119      	bne.n	8004420 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0210 	mvn.w	r2, #16
 80043f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e030      	b.n	8004482 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004420:	f7fe fb7c 	bl	8002b1c <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	429a      	cmp	r2, r3
 800442e:	d302      	bcc.n	8004436 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d11d      	bne.n	8004472 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004440:	2b40      	cmp	r3, #64	@ 0x40
 8004442:	d016      	beq.n	8004472 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	f043 0220 	orr.w	r2, r3, #32
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e007      	b.n	8004482 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447c:	2b40      	cmp	r3, #64	@ 0x40
 800447e:	d1ae      	bne.n	80043de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044a0:	d11b      	bne.n	80044da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	f043 0204 	orr.w	r2, r3, #4
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e272      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8087 	beq.w	8004616 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004508:	4b92      	ldr	r3, [pc, #584]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 030c 	and.w	r3, r3, #12
 8004510:	2b04      	cmp	r3, #4
 8004512:	d00c      	beq.n	800452e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004514:	4b8f      	ldr	r3, [pc, #572]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 030c 	and.w	r3, r3, #12
 800451c:	2b08      	cmp	r3, #8
 800451e:	d112      	bne.n	8004546 <HAL_RCC_OscConfig+0x5e>
 8004520:	4b8c      	ldr	r3, [pc, #560]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800452c:	d10b      	bne.n	8004546 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452e:	4b89      	ldr	r3, [pc, #548]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d06c      	beq.n	8004614 <HAL_RCC_OscConfig+0x12c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d168      	bne.n	8004614 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e24c      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800454e:	d106      	bne.n	800455e <HAL_RCC_OscConfig+0x76>
 8004550:	4b80      	ldr	r3, [pc, #512]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a7f      	ldr	r2, [pc, #508]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	e02e      	b.n	80045bc <HAL_RCC_OscConfig+0xd4>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10c      	bne.n	8004580 <HAL_RCC_OscConfig+0x98>
 8004566:	4b7b      	ldr	r3, [pc, #492]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a7a      	ldr	r2, [pc, #488]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 800456c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	4b78      	ldr	r3, [pc, #480]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a77      	ldr	r2, [pc, #476]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004578:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e01d      	b.n	80045bc <HAL_RCC_OscConfig+0xd4>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004588:	d10c      	bne.n	80045a4 <HAL_RCC_OscConfig+0xbc>
 800458a:	4b72      	ldr	r3, [pc, #456]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a71      	ldr	r2, [pc, #452]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b6f      	ldr	r3, [pc, #444]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a6e      	ldr	r2, [pc, #440]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 800459c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	e00b      	b.n	80045bc <HAL_RCC_OscConfig+0xd4>
 80045a4:	4b6b      	ldr	r3, [pc, #428]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a6a      	ldr	r2, [pc, #424]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 80045aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	4b68      	ldr	r3, [pc, #416]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a67      	ldr	r2, [pc, #412]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 80045b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d013      	beq.n	80045ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c4:	f7fe faaa 	bl	8002b1c <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045cc:	f7fe faa6 	bl	8002b1c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	@ 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e200      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045de:	4b5d      	ldr	r3, [pc, #372]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0xe4>
 80045ea:	e014      	b.n	8004616 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7fe fa96 	bl	8002b1c <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f4:	f7fe fa92 	bl	8002b1c <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	@ 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e1ec      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004606:	4b53      	ldr	r3, [pc, #332]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x10c>
 8004612:	e000      	b.n	8004616 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d063      	beq.n	80046ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004622:	4b4c      	ldr	r3, [pc, #304]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800462e:	4b49      	ldr	r3, [pc, #292]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b08      	cmp	r3, #8
 8004638:	d11c      	bne.n	8004674 <HAL_RCC_OscConfig+0x18c>
 800463a:	4b46      	ldr	r3, [pc, #280]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d116      	bne.n	8004674 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004646:	4b43      	ldr	r3, [pc, #268]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_RCC_OscConfig+0x176>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d001      	beq.n	800465e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e1c0      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465e:	4b3d      	ldr	r3, [pc, #244]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4939      	ldr	r1, [pc, #228]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 800466e:	4313      	orrs	r3, r2
 8004670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004672:	e03a      	b.n	80046ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d020      	beq.n	80046be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800467c:	4b36      	ldr	r3, [pc, #216]	@ (8004758 <HAL_RCC_OscConfig+0x270>)
 800467e:	2201      	movs	r2, #1
 8004680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004682:	f7fe fa4b 	bl	8002b1c <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800468a:	f7fe fa47 	bl	8002b1c <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e1a1      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800469c:	4b2d      	ldr	r3, [pc, #180]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4927      	ldr	r1, [pc, #156]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	600b      	str	r3, [r1, #0]
 80046bc:	e015      	b.n	80046ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046be:	4b26      	ldr	r3, [pc, #152]	@ (8004758 <HAL_RCC_OscConfig+0x270>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c4:	f7fe fa2a 	bl	8002b1c <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046cc:	f7fe fa26 	bl	8002b1c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e180      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046de:	4b1d      	ldr	r3, [pc, #116]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d03a      	beq.n	800476c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d019      	beq.n	8004732 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046fe:	4b17      	ldr	r3, [pc, #92]	@ (800475c <HAL_RCC_OscConfig+0x274>)
 8004700:	2201      	movs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004704:	f7fe fa0a 	bl	8002b1c <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800470c:	f7fe fa06 	bl	8002b1c <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e160      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800471e:	4b0d      	ldr	r3, [pc, #52]	@ (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800472a:	2001      	movs	r0, #1
 800472c:	f000 face 	bl	8004ccc <RCC_Delay>
 8004730:	e01c      	b.n	800476c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004732:	4b0a      	ldr	r3, [pc, #40]	@ (800475c <HAL_RCC_OscConfig+0x274>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004738:	f7fe f9f0 	bl	8002b1c <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800473e:	e00f      	b.n	8004760 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004740:	f7fe f9ec 	bl	8002b1c <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d908      	bls.n	8004760 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e146      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	42420000 	.word	0x42420000
 800475c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004760:	4b92      	ldr	r3, [pc, #584]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e9      	bne.n	8004740 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80a6 	beq.w	80048c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477a:	2300      	movs	r3, #0
 800477c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800477e:	4b8b      	ldr	r3, [pc, #556]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10d      	bne.n	80047a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478a:	4b88      	ldr	r3, [pc, #544]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	4a87      	ldr	r2, [pc, #540]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004794:	61d3      	str	r3, [r2, #28]
 8004796:	4b85      	ldr	r3, [pc, #532]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800479e:	60bb      	str	r3, [r7, #8]
 80047a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a2:	2301      	movs	r3, #1
 80047a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a6:	4b82      	ldr	r3, [pc, #520]	@ (80049b0 <HAL_RCC_OscConfig+0x4c8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d118      	bne.n	80047e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047b2:	4b7f      	ldr	r3, [pc, #508]	@ (80049b0 <HAL_RCC_OscConfig+0x4c8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a7e      	ldr	r2, [pc, #504]	@ (80049b0 <HAL_RCC_OscConfig+0x4c8>)
 80047b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047be:	f7fe f9ad 	bl	8002b1c <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c6:	f7fe f9a9 	bl	8002b1c <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b64      	cmp	r3, #100	@ 0x64
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e103      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d8:	4b75      	ldr	r3, [pc, #468]	@ (80049b0 <HAL_RCC_OscConfig+0x4c8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0f0      	beq.n	80047c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d106      	bne.n	80047fa <HAL_RCC_OscConfig+0x312>
 80047ec:	4b6f      	ldr	r3, [pc, #444]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	4a6e      	ldr	r2, [pc, #440]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	6213      	str	r3, [r2, #32]
 80047f8:	e02d      	b.n	8004856 <HAL_RCC_OscConfig+0x36e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10c      	bne.n	800481c <HAL_RCC_OscConfig+0x334>
 8004802:	4b6a      	ldr	r3, [pc, #424]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	4a69      	ldr	r2, [pc, #420]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	6213      	str	r3, [r2, #32]
 800480e:	4b67      	ldr	r3, [pc, #412]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	4a66      	ldr	r2, [pc, #408]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004814:	f023 0304 	bic.w	r3, r3, #4
 8004818:	6213      	str	r3, [r2, #32]
 800481a:	e01c      	b.n	8004856 <HAL_RCC_OscConfig+0x36e>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2b05      	cmp	r3, #5
 8004822:	d10c      	bne.n	800483e <HAL_RCC_OscConfig+0x356>
 8004824:	4b61      	ldr	r3, [pc, #388]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	4a60      	ldr	r2, [pc, #384]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 800482a:	f043 0304 	orr.w	r3, r3, #4
 800482e:	6213      	str	r3, [r2, #32]
 8004830:	4b5e      	ldr	r3, [pc, #376]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	4a5d      	ldr	r2, [pc, #372]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	6213      	str	r3, [r2, #32]
 800483c:	e00b      	b.n	8004856 <HAL_RCC_OscConfig+0x36e>
 800483e:	4b5b      	ldr	r3, [pc, #364]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	4a5a      	ldr	r2, [pc, #360]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	6213      	str	r3, [r2, #32]
 800484a:	4b58      	ldr	r3, [pc, #352]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	4a57      	ldr	r2, [pc, #348]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004850:	f023 0304 	bic.w	r3, r3, #4
 8004854:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d015      	beq.n	800488a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800485e:	f7fe f95d 	bl	8002b1c <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004864:	e00a      	b.n	800487c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004866:	f7fe f959 	bl	8002b1c <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004874:	4293      	cmp	r3, r2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e0b1      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487c:	4b4b      	ldr	r3, [pc, #300]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0ee      	beq.n	8004866 <HAL_RCC_OscConfig+0x37e>
 8004888:	e014      	b.n	80048b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488a:	f7fe f947 	bl	8002b1c <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004890:	e00a      	b.n	80048a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004892:	f7fe f943 	bl	8002b1c <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e09b      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a8:	4b40      	ldr	r3, [pc, #256]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1ee      	bne.n	8004892 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048b4:	7dfb      	ldrb	r3, [r7, #23]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d105      	bne.n	80048c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ba:	4b3c      	ldr	r3, [pc, #240]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	4a3b      	ldr	r2, [pc, #236]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 80048c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 8087 	beq.w	80049de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048d0:	4b36      	ldr	r3, [pc, #216]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f003 030c 	and.w	r3, r3, #12
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d061      	beq.n	80049a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d146      	bne.n	8004972 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e4:	4b33      	ldr	r3, [pc, #204]	@ (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ea:	f7fe f917 	bl	8002b1c <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f2:	f7fe f913 	bl	8002b1c <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e06d      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004904:	4b29      	ldr	r3, [pc, #164]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1f0      	bne.n	80048f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004918:	d108      	bne.n	800492c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800491a:	4b24      	ldr	r3, [pc, #144]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	4921      	ldr	r1, [pc, #132]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004928:	4313      	orrs	r3, r2
 800492a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800492c:	4b1f      	ldr	r3, [pc, #124]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a19      	ldr	r1, [r3, #32]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	430b      	orrs	r3, r1
 800493e:	491b      	ldr	r1, [pc, #108]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004940:	4313      	orrs	r3, r2
 8004942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004944:	4b1b      	ldr	r3, [pc, #108]	@ (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494a:	f7fe f8e7 	bl	8002b1c <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004952:	f7fe f8e3 	bl	8002b1c <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e03d      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004964:	4b11      	ldr	r3, [pc, #68]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x46a>
 8004970:	e035      	b.n	80049de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004972:	4b10      	ldr	r3, [pc, #64]	@ (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004978:	f7fe f8d0 	bl	8002b1c <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004980:	f7fe f8cc 	bl	8002b1c <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e026      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004992:	4b06      	ldr	r3, [pc, #24]	@ (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0x498>
 800499e:	e01e      	b.n	80049de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d107      	bne.n	80049b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e019      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
 80049ac:	40021000 	.word	0x40021000
 80049b0:	40007000 	.word	0x40007000
 80049b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049b8:	4b0b      	ldr	r3, [pc, #44]	@ (80049e8 <HAL_RCC_OscConfig+0x500>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d106      	bne.n	80049da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d001      	beq.n	80049de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40021000 	.word	0x40021000

080049ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0d0      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a00:	4b6a      	ldr	r3, [pc, #424]	@ (8004bac <HAL_RCC_ClockConfig+0x1c0>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d910      	bls.n	8004a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0e:	4b67      	ldr	r3, [pc, #412]	@ (8004bac <HAL_RCC_ClockConfig+0x1c0>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 0207 	bic.w	r2, r3, #7
 8004a16:	4965      	ldr	r1, [pc, #404]	@ (8004bac <HAL_RCC_ClockConfig+0x1c0>)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1e:	4b63      	ldr	r3, [pc, #396]	@ (8004bac <HAL_RCC_ClockConfig+0x1c0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d001      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0b8      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d020      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a48:	4b59      	ldr	r3, [pc, #356]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	4a58      	ldr	r2, [pc, #352]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a60:	4b53      	ldr	r3, [pc, #332]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4a52      	ldr	r2, [pc, #328]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004a6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a6c:	4b50      	ldr	r3, [pc, #320]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	494d      	ldr	r1, [pc, #308]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d040      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d107      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a92:	4b47      	ldr	r3, [pc, #284]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d115      	bne.n	8004aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e07f      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d107      	bne.n	8004aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aaa:	4b41      	ldr	r3, [pc, #260]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d109      	bne.n	8004aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e073      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aba:	4b3d      	ldr	r3, [pc, #244]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e06b      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aca:	4b39      	ldr	r3, [pc, #228]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f023 0203 	bic.w	r2, r3, #3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	4936      	ldr	r1, [pc, #216]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004adc:	f7fe f81e 	bl	8002b1c <HAL_GetTick>
 8004ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae2:	e00a      	b.n	8004afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae4:	f7fe f81a 	bl	8002b1c <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e053      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	4b2d      	ldr	r3, [pc, #180]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f003 020c 	and.w	r2, r3, #12
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d1eb      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b0c:	4b27      	ldr	r3, [pc, #156]	@ (8004bac <HAL_RCC_ClockConfig+0x1c0>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d210      	bcs.n	8004b3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1a:	4b24      	ldr	r3, [pc, #144]	@ (8004bac <HAL_RCC_ClockConfig+0x1c0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f023 0207 	bic.w	r2, r3, #7
 8004b22:	4922      	ldr	r1, [pc, #136]	@ (8004bac <HAL_RCC_ClockConfig+0x1c0>)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2a:	4b20      	ldr	r3, [pc, #128]	@ (8004bac <HAL_RCC_ClockConfig+0x1c0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e032      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b48:	4b19      	ldr	r3, [pc, #100]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	4916      	ldr	r1, [pc, #88]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b66:	4b12      	ldr	r3, [pc, #72]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	490e      	ldr	r1, [pc, #56]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b7a:	f000 f821 	bl	8004bc0 <HAL_RCC_GetSysClockFreq>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	091b      	lsrs	r3, r3, #4
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	490a      	ldr	r1, [pc, #40]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b8c:	5ccb      	ldrb	r3, [r1, r3]
 8004b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b92:	4a09      	ldr	r2, [pc, #36]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1cc>)
 8004b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b96:	4b09      	ldr	r3, [pc, #36]	@ (8004bbc <HAL_RCC_ClockConfig+0x1d0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fd ff7c 	bl	8002a98 <HAL_InitTick>

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40022000 	.word	0x40022000
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	080069ec 	.word	0x080069ec
 8004bb8:	20000004 	.word	0x20000004
 8004bbc:	20000008 	.word	0x20000008

08004bc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bda:	4b1e      	ldr	r3, [pc, #120]	@ (8004c54 <HAL_RCC_GetSysClockFreq+0x94>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d002      	beq.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x30>
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x36>
 8004bee:	e027      	b.n	8004c40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bf0:	4b19      	ldr	r3, [pc, #100]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bf2:	613b      	str	r3, [r7, #16]
      break;
 8004bf4:	e027      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	0c9b      	lsrs	r3, r3, #18
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	4a17      	ldr	r2, [pc, #92]	@ (8004c5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c00:	5cd3      	ldrb	r3, [r2, r3]
 8004c02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d010      	beq.n	8004c30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c0e:	4b11      	ldr	r3, [pc, #68]	@ (8004c54 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	0c5b      	lsrs	r3, r3, #17
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	4a11      	ldr	r2, [pc, #68]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c1a:	5cd3      	ldrb	r3, [r2, r3]
 8004c1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a0d      	ldr	r2, [pc, #52]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c22:	fb03 f202 	mul.w	r2, r3, r2
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	e004      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a0c      	ldr	r2, [pc, #48]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c34:	fb02 f303 	mul.w	r3, r2, r3
 8004c38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	613b      	str	r3, [r7, #16]
      break;
 8004c3e:	e002      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c40:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c42:	613b      	str	r3, [r7, #16]
      break;
 8004c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c46:	693b      	ldr	r3, [r7, #16]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	371c      	adds	r7, #28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40021000 	.word	0x40021000
 8004c58:	007a1200 	.word	0x007a1200
 8004c5c:	08006a04 	.word	0x08006a04
 8004c60:	08006a14 	.word	0x08006a14
 8004c64:	003d0900 	.word	0x003d0900

08004c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c6c:	4b02      	ldr	r3, [pc, #8]	@ (8004c78 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc80      	pop	{r7}
 8004c76:	4770      	bx	lr
 8004c78:	20000004 	.word	0x20000004

08004c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c80:	f7ff fff2 	bl	8004c68 <HAL_RCC_GetHCLKFreq>
 8004c84:	4602      	mov	r2, r0
 8004c86:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	0a1b      	lsrs	r3, r3, #8
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	4903      	ldr	r1, [pc, #12]	@ (8004ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c92:	5ccb      	ldrb	r3, [r1, r3]
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	080069fc 	.word	0x080069fc

08004ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ca8:	f7ff ffde 	bl	8004c68 <HAL_RCC_GetHCLKFreq>
 8004cac:	4602      	mov	r2, r0
 8004cae:	4b05      	ldr	r3, [pc, #20]	@ (8004cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	0adb      	lsrs	r3, r3, #11
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	4903      	ldr	r1, [pc, #12]	@ (8004cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cba:	5ccb      	ldrb	r3, [r1, r3]
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	080069fc 	.word	0x080069fc

08004ccc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d00 <RCC_Delay+0x34>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8004d04 <RCC_Delay+0x38>)
 8004cda:	fba2 2303 	umull	r2, r3, r2, r3
 8004cde:	0a5b      	lsrs	r3, r3, #9
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	fb02 f303 	mul.w	r3, r2, r3
 8004ce6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ce8:	bf00      	nop
  }
  while (Delay --);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1e5a      	subs	r2, r3, #1
 8004cee:	60fa      	str	r2, [r7, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f9      	bne.n	8004ce8 <RCC_Delay+0x1c>
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr
 8004d00:	20000004 	.word	0x20000004
 8004d04:	10624dd3 	.word	0x10624dd3

08004d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e041      	b.n	8004d9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fd fd5c 	bl	80027ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3304      	adds	r3, #4
 8004d44:	4619      	mov	r1, r3
 8004d46:	4610      	mov	r0, r2
 8004d48:	f000 fc18 	bl	800557c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d001      	beq.n	8004dc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e032      	b.n	8004e26 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a18      	ldr	r2, [pc, #96]	@ (8004e30 <HAL_TIM_Base_Start+0x88>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00e      	beq.n	8004df0 <HAL_TIM_Base_Start+0x48>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dda:	d009      	beq.n	8004df0 <HAL_TIM_Base_Start+0x48>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a14      	ldr	r2, [pc, #80]	@ (8004e34 <HAL_TIM_Base_Start+0x8c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d004      	beq.n	8004df0 <HAL_TIM_Base_Start+0x48>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a13      	ldr	r2, [pc, #76]	@ (8004e38 <HAL_TIM_Base_Start+0x90>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d111      	bne.n	8004e14 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b06      	cmp	r3, #6
 8004e00:	d010      	beq.n	8004e24 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0201 	orr.w	r2, r2, #1
 8004e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e12:	e007      	b.n	8004e24 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr
 8004e30:	40012c00 	.word	0x40012c00
 8004e34:	40000400 	.word	0x40000400
 8004e38:	40000800 	.word	0x40000800

08004e3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e041      	b.n	8004ed2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f839 	bl	8004eda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3304      	adds	r3, #4
 8004e78:	4619      	mov	r1, r3
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	f000 fb7e 	bl	800557c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr

08004eec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d109      	bne.n	8004f10 <HAL_TIM_PWM_Start+0x24>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	bf14      	ite	ne
 8004f08:	2301      	movne	r3, #1
 8004f0a:	2300      	moveq	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	e022      	b.n	8004f56 <HAL_TIM_PWM_Start+0x6a>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d109      	bne.n	8004f2a <HAL_TIM_PWM_Start+0x3e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	bf14      	ite	ne
 8004f22:	2301      	movne	r3, #1
 8004f24:	2300      	moveq	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	e015      	b.n	8004f56 <HAL_TIM_PWM_Start+0x6a>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d109      	bne.n	8004f44 <HAL_TIM_PWM_Start+0x58>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	bf14      	ite	ne
 8004f3c:	2301      	movne	r3, #1
 8004f3e:	2300      	moveq	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	e008      	b.n	8004f56 <HAL_TIM_PWM_Start+0x6a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	bf14      	ite	ne
 8004f50:	2301      	movne	r3, #1
 8004f52:	2300      	moveq	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e05e      	b.n	800501c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d104      	bne.n	8004f6e <HAL_TIM_PWM_Start+0x82>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f6c:	e013      	b.n	8004f96 <HAL_TIM_PWM_Start+0xaa>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d104      	bne.n	8004f7e <HAL_TIM_PWM_Start+0x92>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f7c:	e00b      	b.n	8004f96 <HAL_TIM_PWM_Start+0xaa>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d104      	bne.n	8004f8e <HAL_TIM_PWM_Start+0xa2>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f8c:	e003      	b.n	8004f96 <HAL_TIM_PWM_Start+0xaa>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2202      	movs	r2, #2
 8004f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	6839      	ldr	r1, [r7, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fd78 	bl	8005a94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8005024 <HAL_TIM_PWM_Start+0x138>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d107      	bne.n	8004fbe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a18      	ldr	r2, [pc, #96]	@ (8005024 <HAL_TIM_PWM_Start+0x138>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00e      	beq.n	8004fe6 <HAL_TIM_PWM_Start+0xfa>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fd0:	d009      	beq.n	8004fe6 <HAL_TIM_PWM_Start+0xfa>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a14      	ldr	r2, [pc, #80]	@ (8005028 <HAL_TIM_PWM_Start+0x13c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d004      	beq.n	8004fe6 <HAL_TIM_PWM_Start+0xfa>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a12      	ldr	r2, [pc, #72]	@ (800502c <HAL_TIM_PWM_Start+0x140>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d111      	bne.n	800500a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b06      	cmp	r3, #6
 8004ff6:	d010      	beq.n	800501a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005008:	e007      	b.n	800501a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0201 	orr.w	r2, r2, #1
 8005018:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	40012c00 	.word	0x40012c00
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800

08005030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d020      	beq.n	8005094 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01b      	beq.n	8005094 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0202 	mvn.w	r2, #2
 8005064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fa63 	bl	8005546 <HAL_TIM_IC_CaptureCallback>
 8005080:	e005      	b.n	800508e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fa56 	bl	8005534 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fa65 	bl	8005558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b00      	cmp	r3, #0
 800509c:	d020      	beq.n	80050e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01b      	beq.n	80050e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0204 	mvn.w	r2, #4
 80050b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fa3d 	bl	8005546 <HAL_TIM_IC_CaptureCallback>
 80050cc:	e005      	b.n	80050da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fa30 	bl	8005534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 fa3f 	bl	8005558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d020      	beq.n	800512c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01b      	beq.n	800512c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0208 	mvn.w	r2, #8
 80050fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2204      	movs	r2, #4
 8005102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fa17 	bl	8005546 <HAL_TIM_IC_CaptureCallback>
 8005118:	e005      	b.n	8005126 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fa0a 	bl	8005534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fa19 	bl	8005558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 0310 	and.w	r3, r3, #16
 8005132:	2b00      	cmp	r3, #0
 8005134:	d020      	beq.n	8005178 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01b      	beq.n	8005178 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0210 	mvn.w	r2, #16
 8005148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2208      	movs	r2, #8
 800514e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f9f1 	bl	8005546 <HAL_TIM_IC_CaptureCallback>
 8005164:	e005      	b.n	8005172 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f9e4 	bl	8005534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f9f3 	bl	8005558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00c      	beq.n	800519c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d007      	beq.n	800519c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0201 	mvn.w	r2, #1
 8005194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f9c3 	bl	8005522 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00c      	beq.n	80051c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d007      	beq.n	80051c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80051b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fcf5 	bl	8005baa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00c      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d007      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f9c3 	bl	800556a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00c      	beq.n	8005208 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d007      	beq.n	8005208 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0220 	mvn.w	r2, #32
 8005200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fcc8 	bl	8005b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005208:	bf00      	nop
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800522a:	2302      	movs	r3, #2
 800522c:	e0ae      	b.n	800538c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b0c      	cmp	r3, #12
 800523a:	f200 809f 	bhi.w	800537c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800523e:	a201      	add	r2, pc, #4	@ (adr r2, 8005244 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005244:	08005279 	.word	0x08005279
 8005248:	0800537d 	.word	0x0800537d
 800524c:	0800537d 	.word	0x0800537d
 8005250:	0800537d 	.word	0x0800537d
 8005254:	080052b9 	.word	0x080052b9
 8005258:	0800537d 	.word	0x0800537d
 800525c:	0800537d 	.word	0x0800537d
 8005260:	0800537d 	.word	0x0800537d
 8005264:	080052fb 	.word	0x080052fb
 8005268:	0800537d 	.word	0x0800537d
 800526c:	0800537d 	.word	0x0800537d
 8005270:	0800537d 	.word	0x0800537d
 8005274:	0800533b 	.word	0x0800533b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	4618      	mov	r0, r3
 8005280:	f000 f9ea 	bl	8005658 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0208 	orr.w	r2, r2, #8
 8005292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0204 	bic.w	r2, r2, #4
 80052a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6999      	ldr	r1, [r3, #24]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	691a      	ldr	r2, [r3, #16]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	619a      	str	r2, [r3, #24]
      break;
 80052b6:	e064      	b.n	8005382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fa30 	bl	8005724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699a      	ldr	r2, [r3, #24]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699a      	ldr	r2, [r3, #24]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6999      	ldr	r1, [r3, #24]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	021a      	lsls	r2, r3, #8
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	619a      	str	r2, [r3, #24]
      break;
 80052f8:	e043      	b.n	8005382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fa79 	bl	80057f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69da      	ldr	r2, [r3, #28]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0208 	orr.w	r2, r2, #8
 8005314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0204 	bic.w	r2, r2, #4
 8005324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69d9      	ldr	r1, [r3, #28]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	691a      	ldr	r2, [r3, #16]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	61da      	str	r2, [r3, #28]
      break;
 8005338:	e023      	b.n	8005382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68b9      	ldr	r1, [r7, #8]
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fac3 	bl	80058cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	69da      	ldr	r2, [r3, #28]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69d9      	ldr	r1, [r3, #28]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	021a      	lsls	r2, r3, #8
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	61da      	str	r2, [r3, #28]
      break;
 800537a:	e002      	b.n	8005382 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	75fb      	strb	r3, [r7, #23]
      break;
 8005380:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800538a:	7dfb      	ldrb	r3, [r7, #23]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_TIM_ConfigClockSource+0x1c>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e0b4      	b.n	800551a <HAL_TIM_ConfigClockSource+0x186>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80053ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e8:	d03e      	beq.n	8005468 <HAL_TIM_ConfigClockSource+0xd4>
 80053ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053ee:	f200 8087 	bhi.w	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 80053f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053f6:	f000 8086 	beq.w	8005506 <HAL_TIM_ConfigClockSource+0x172>
 80053fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053fe:	d87f      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005400:	2b70      	cmp	r3, #112	@ 0x70
 8005402:	d01a      	beq.n	800543a <HAL_TIM_ConfigClockSource+0xa6>
 8005404:	2b70      	cmp	r3, #112	@ 0x70
 8005406:	d87b      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005408:	2b60      	cmp	r3, #96	@ 0x60
 800540a:	d050      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x11a>
 800540c:	2b60      	cmp	r3, #96	@ 0x60
 800540e:	d877      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005410:	2b50      	cmp	r3, #80	@ 0x50
 8005412:	d03c      	beq.n	800548e <HAL_TIM_ConfigClockSource+0xfa>
 8005414:	2b50      	cmp	r3, #80	@ 0x50
 8005416:	d873      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005418:	2b40      	cmp	r3, #64	@ 0x40
 800541a:	d058      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x13a>
 800541c:	2b40      	cmp	r3, #64	@ 0x40
 800541e:	d86f      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005420:	2b30      	cmp	r3, #48	@ 0x30
 8005422:	d064      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15a>
 8005424:	2b30      	cmp	r3, #48	@ 0x30
 8005426:	d86b      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005428:	2b20      	cmp	r3, #32
 800542a:	d060      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15a>
 800542c:	2b20      	cmp	r3, #32
 800542e:	d867      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 8005430:	2b00      	cmp	r3, #0
 8005432:	d05c      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15a>
 8005434:	2b10      	cmp	r3, #16
 8005436:	d05a      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x15a>
 8005438:	e062      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800544a:	f000 fb04 	bl	8005a56 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800545c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	609a      	str	r2, [r3, #8]
      break;
 8005466:	e04f      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005478:	f000 faed 	bl	8005a56 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800548a:	609a      	str	r2, [r3, #8]
      break;
 800548c:	e03c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800549a:	461a      	mov	r2, r3
 800549c:	f000 fa64 	bl	8005968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2150      	movs	r1, #80	@ 0x50
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fabb 	bl	8005a22 <TIM_ITRx_SetConfig>
      break;
 80054ac:	e02c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ba:	461a      	mov	r2, r3
 80054bc:	f000 fa82 	bl	80059c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2160      	movs	r1, #96	@ 0x60
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 faab 	bl	8005a22 <TIM_ITRx_SetConfig>
      break;
 80054cc:	e01c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054da:	461a      	mov	r2, r3
 80054dc:	f000 fa44 	bl	8005968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2140      	movs	r1, #64	@ 0x40
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fa9b 	bl	8005a22 <TIM_ITRx_SetConfig>
      break;
 80054ec:	e00c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f000 fa92 	bl	8005a22 <TIM_ITRx_SetConfig>
      break;
 80054fe:	e003      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
      break;
 8005504:	e000      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005506:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005518:	7bfb      	ldrb	r3, [r7, #15]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr

08005546 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr

08005558 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr

0800556a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr

0800557c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a2f      	ldr	r2, [pc, #188]	@ (800564c <TIM_Base_SetConfig+0xd0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00b      	beq.n	80055ac <TIM_Base_SetConfig+0x30>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800559a:	d007      	beq.n	80055ac <TIM_Base_SetConfig+0x30>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a2c      	ldr	r2, [pc, #176]	@ (8005650 <TIM_Base_SetConfig+0xd4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d003      	beq.n	80055ac <TIM_Base_SetConfig+0x30>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a2b      	ldr	r2, [pc, #172]	@ (8005654 <TIM_Base_SetConfig+0xd8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d108      	bne.n	80055be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a22      	ldr	r2, [pc, #136]	@ (800564c <TIM_Base_SetConfig+0xd0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00b      	beq.n	80055de <TIM_Base_SetConfig+0x62>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055cc:	d007      	beq.n	80055de <TIM_Base_SetConfig+0x62>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005650 <TIM_Base_SetConfig+0xd4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d003      	beq.n	80055de <TIM_Base_SetConfig+0x62>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005654 <TIM_Base_SetConfig+0xd8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d108      	bne.n	80055f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a0d      	ldr	r2, [pc, #52]	@ (800564c <TIM_Base_SetConfig+0xd0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d103      	bne.n	8005624 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d005      	beq.n	8005642 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f023 0201 	bic.w	r2, r3, #1
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	611a      	str	r2, [r3, #16]
  }
}
 8005642:	bf00      	nop
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr
 800564c:	40012c00 	.word	0x40012c00
 8005650:	40000400 	.word	0x40000400
 8005654:	40000800 	.word	0x40000800

08005658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	f023 0201 	bic.w	r2, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0303 	bic.w	r3, r3, #3
 800568e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f023 0302 	bic.w	r3, r3, #2
 80056a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005720 <TIM_OC1_SetConfig+0xc8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d10c      	bne.n	80056ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f023 0308 	bic.w	r3, r3, #8
 80056ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f023 0304 	bic.w	r3, r3, #4
 80056cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a13      	ldr	r2, [pc, #76]	@ (8005720 <TIM_OC1_SetConfig+0xc8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d111      	bne.n	80056fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	621a      	str	r2, [r3, #32]
}
 8005714:	bf00      	nop
 8005716:	371c      	adds	r7, #28
 8005718:	46bd      	mov	sp, r7
 800571a:	bc80      	pop	{r7}
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40012c00 	.word	0x40012c00

08005724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	f023 0210 	bic.w	r2, r3, #16
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800575a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	021b      	lsls	r3, r3, #8
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f023 0320 	bic.w	r3, r3, #32
 800576e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a1d      	ldr	r2, [pc, #116]	@ (80057f4 <TIM_OC2_SetConfig+0xd0>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d10d      	bne.n	80057a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800578a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800579e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a14      	ldr	r2, [pc, #80]	@ (80057f4 <TIM_OC2_SetConfig+0xd0>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d113      	bne.n	80057d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bc80      	pop	{r7}
 80057f2:	4770      	bx	lr
 80057f4:	40012c00 	.word	0x40012c00

080057f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0303 	bic.w	r3, r3, #3
 800582e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	021b      	lsls	r3, r3, #8
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a1d      	ldr	r2, [pc, #116]	@ (80058c8 <TIM_OC3_SetConfig+0xd0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d10d      	bne.n	8005872 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800585c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a14      	ldr	r2, [pc, #80]	@ (80058c8 <TIM_OC3_SetConfig+0xd0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d113      	bne.n	80058a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	621a      	str	r2, [r3, #32]
}
 80058bc:	bf00      	nop
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	40012c00 	.word	0x40012c00

080058cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	021b      	lsls	r3, r3, #8
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4313      	orrs	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	031b      	lsls	r3, r3, #12
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a0f      	ldr	r2, [pc, #60]	@ (8005964 <TIM_OC4_SetConfig+0x98>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d109      	bne.n	8005940 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	019b      	lsls	r3, r3, #6
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	4313      	orrs	r3, r2
 800593e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	621a      	str	r2, [r3, #32]
}
 800595a:	bf00      	nop
 800595c:	371c      	adds	r7, #28
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr
 8005964:	40012c00 	.word	0x40012c00

08005968 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	f023 0201 	bic.w	r2, r3, #1
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	011b      	lsls	r3, r3, #4
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f023 030a 	bic.w	r3, r3, #10
 80059a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	621a      	str	r2, [r3, #32]
}
 80059ba:	bf00      	nop
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr

080059c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	f023 0210 	bic.w	r2, r3, #16
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	031b      	lsls	r3, r3, #12
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a00:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	011b      	lsls	r3, r3, #4
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	621a      	str	r2, [r3, #32]
}
 8005a18:	bf00      	nop
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bc80      	pop	{r7}
 8005a20:	4770      	bx	lr

08005a22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b085      	sub	sp, #20
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f043 0307 	orr.w	r3, r3, #7
 8005a44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	609a      	str	r2, [r3, #8]
}
 8005a4c:	bf00      	nop
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bc80      	pop	{r7}
 8005a54:	4770      	bx	lr

08005a56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b087      	sub	sp, #28
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607a      	str	r2, [r7, #4]
 8005a62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	021a      	lsls	r2, r3, #8
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	609a      	str	r2, [r3, #8]
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr

08005a94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f003 031f 	and.w	r3, r3, #31
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6a1a      	ldr	r2, [r3, #32]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	401a      	ands	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a1a      	ldr	r2, [r3, #32]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f003 031f 	and.w	r3, r3, #31
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8005acc:	431a      	orrs	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	621a      	str	r2, [r3, #32]
}
 8005ad2:	bf00      	nop
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bc80      	pop	{r7}
 8005ada:	4770      	bx	lr

08005adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e046      	b.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a16      	ldr	r2, [pc, #88]	@ (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00e      	beq.n	8005b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b40:	d009      	beq.n	8005b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a12      	ldr	r2, [pc, #72]	@ (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d004      	beq.n	8005b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a10      	ldr	r2, [pc, #64]	@ (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d10c      	bne.n	8005b70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bc80      	pop	{r7}
 8005b8a:	4770      	bx	lr
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	40000400 	.word	0x40000400
 8005b94:	40000800 	.word	0x40000800

08005b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bc80      	pop	{r7}
 8005ba8:	4770      	bx	lr

08005baa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bc80      	pop	{r7}
 8005bba:	4770      	bx	lr

08005bbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e042      	b.n	8005c54 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fc fede 	bl	80029a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2224      	movs	r2, #36	@ 0x24
 8005bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f82b 	bl	8005c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	691a      	ldr	r2, [r3, #16]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	695a      	ldr	r2, [r3, #20]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005c96:	f023 030c 	bic.w	r3, r3, #12
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	68b9      	ldr	r1, [r7, #8]
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8005d70 <UART_SetConfig+0x114>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d103      	bne.n	8005ccc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005cc4:	f7fe ffee 	bl	8004ca4 <HAL_RCC_GetPCLK2Freq>
 8005cc8:	60f8      	str	r0, [r7, #12]
 8005cca:	e002      	b.n	8005cd2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ccc:	f7fe ffd6 	bl	8004c7c <HAL_RCC_GetPCLK1Freq>
 8005cd0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	009a      	lsls	r2, r3, #2
 8005cdc:	441a      	add	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce8:	4a22      	ldr	r2, [pc, #136]	@ (8005d74 <UART_SetConfig+0x118>)
 8005cea:	fba2 2303 	umull	r2, r3, r2, r3
 8005cee:	095b      	lsrs	r3, r3, #5
 8005cf0:	0119      	lsls	r1, r3, #4
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009a      	lsls	r2, r3, #2
 8005cfc:	441a      	add	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d08:	4b1a      	ldr	r3, [pc, #104]	@ (8005d74 <UART_SetConfig+0x118>)
 8005d0a:	fba3 0302 	umull	r0, r3, r3, r2
 8005d0e:	095b      	lsrs	r3, r3, #5
 8005d10:	2064      	movs	r0, #100	@ 0x64
 8005d12:	fb00 f303 	mul.w	r3, r0, r3
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	3332      	adds	r3, #50	@ 0x32
 8005d1c:	4a15      	ldr	r2, [pc, #84]	@ (8005d74 <UART_SetConfig+0x118>)
 8005d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d22:	095b      	lsrs	r3, r3, #5
 8005d24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d28:	4419      	add	r1, r3
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	009a      	lsls	r2, r3, #2
 8005d34:	441a      	add	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d40:	4b0c      	ldr	r3, [pc, #48]	@ (8005d74 <UART_SetConfig+0x118>)
 8005d42:	fba3 0302 	umull	r0, r3, r3, r2
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	2064      	movs	r0, #100	@ 0x64
 8005d4a:	fb00 f303 	mul.w	r3, r0, r3
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	3332      	adds	r3, #50	@ 0x32
 8005d54:	4a07      	ldr	r2, [pc, #28]	@ (8005d74 <UART_SetConfig+0x118>)
 8005d56:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	f003 020f 	and.w	r2, r3, #15
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	440a      	add	r2, r1
 8005d66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d68:	bf00      	nop
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	40013800 	.word	0x40013800
 8005d74:	51eb851f 	.word	0x51eb851f

08005d78 <siprintf>:
 8005d78:	b40e      	push	{r1, r2, r3}
 8005d7a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d7e:	b500      	push	{lr}
 8005d80:	b09c      	sub	sp, #112	@ 0x70
 8005d82:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d84:	9002      	str	r0, [sp, #8]
 8005d86:	9006      	str	r0, [sp, #24]
 8005d88:	9107      	str	r1, [sp, #28]
 8005d8a:	9104      	str	r1, [sp, #16]
 8005d8c:	4808      	ldr	r0, [pc, #32]	@ (8005db0 <siprintf+0x38>)
 8005d8e:	4909      	ldr	r1, [pc, #36]	@ (8005db4 <siprintf+0x3c>)
 8005d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d94:	9105      	str	r1, [sp, #20]
 8005d96:	6800      	ldr	r0, [r0, #0]
 8005d98:	a902      	add	r1, sp, #8
 8005d9a:	9301      	str	r3, [sp, #4]
 8005d9c:	f000 f992 	bl	80060c4 <_svfiprintf_r>
 8005da0:	2200      	movs	r2, #0
 8005da2:	9b02      	ldr	r3, [sp, #8]
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	b01c      	add	sp, #112	@ 0x70
 8005da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dac:	b003      	add	sp, #12
 8005dae:	4770      	bx	lr
 8005db0:	20000010 	.word	0x20000010
 8005db4:	ffff0208 	.word	0xffff0208

08005db8 <memset>:
 8005db8:	4603      	mov	r3, r0
 8005dba:	4402      	add	r2, r0
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d100      	bne.n	8005dc2 <memset+0xa>
 8005dc0:	4770      	bx	lr
 8005dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005dc6:	e7f9      	b.n	8005dbc <memset+0x4>

08005dc8 <__errno>:
 8005dc8:	4b01      	ldr	r3, [pc, #4]	@ (8005dd0 <__errno+0x8>)
 8005dca:	6818      	ldr	r0, [r3, #0]
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	20000010 	.word	0x20000010

08005dd4 <__libc_init_array>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	2600      	movs	r6, #0
 8005dd8:	4d0c      	ldr	r5, [pc, #48]	@ (8005e0c <__libc_init_array+0x38>)
 8005dda:	4c0d      	ldr	r4, [pc, #52]	@ (8005e10 <__libc_init_array+0x3c>)
 8005ddc:	1b64      	subs	r4, r4, r5
 8005dde:	10a4      	asrs	r4, r4, #2
 8005de0:	42a6      	cmp	r6, r4
 8005de2:	d109      	bne.n	8005df8 <__libc_init_array+0x24>
 8005de4:	f000 fc78 	bl	80066d8 <_init>
 8005de8:	2600      	movs	r6, #0
 8005dea:	4d0a      	ldr	r5, [pc, #40]	@ (8005e14 <__libc_init_array+0x40>)
 8005dec:	4c0a      	ldr	r4, [pc, #40]	@ (8005e18 <__libc_init_array+0x44>)
 8005dee:	1b64      	subs	r4, r4, r5
 8005df0:	10a4      	asrs	r4, r4, #2
 8005df2:	42a6      	cmp	r6, r4
 8005df4:	d105      	bne.n	8005e02 <__libc_init_array+0x2e>
 8005df6:	bd70      	pop	{r4, r5, r6, pc}
 8005df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dfc:	4798      	blx	r3
 8005dfe:	3601      	adds	r6, #1
 8005e00:	e7ee      	b.n	8005de0 <__libc_init_array+0xc>
 8005e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e06:	4798      	blx	r3
 8005e08:	3601      	adds	r6, #1
 8005e0a:	e7f2      	b.n	8005df2 <__libc_init_array+0x1e>
 8005e0c:	08006a4c 	.word	0x08006a4c
 8005e10:	08006a4c 	.word	0x08006a4c
 8005e14:	08006a4c 	.word	0x08006a4c
 8005e18:	08006a50 	.word	0x08006a50

08005e1c <__retarget_lock_acquire_recursive>:
 8005e1c:	4770      	bx	lr

08005e1e <__retarget_lock_release_recursive>:
 8005e1e:	4770      	bx	lr

08005e20 <_free_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4605      	mov	r5, r0
 8005e24:	2900      	cmp	r1, #0
 8005e26:	d040      	beq.n	8005eaa <_free_r+0x8a>
 8005e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e2c:	1f0c      	subs	r4, r1, #4
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	bfb8      	it	lt
 8005e32:	18e4      	addlt	r4, r4, r3
 8005e34:	f000 f8de 	bl	8005ff4 <__malloc_lock>
 8005e38:	4a1c      	ldr	r2, [pc, #112]	@ (8005eac <_free_r+0x8c>)
 8005e3a:	6813      	ldr	r3, [r2, #0]
 8005e3c:	b933      	cbnz	r3, 8005e4c <_free_r+0x2c>
 8005e3e:	6063      	str	r3, [r4, #4]
 8005e40:	6014      	str	r4, [r2, #0]
 8005e42:	4628      	mov	r0, r5
 8005e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e48:	f000 b8da 	b.w	8006000 <__malloc_unlock>
 8005e4c:	42a3      	cmp	r3, r4
 8005e4e:	d908      	bls.n	8005e62 <_free_r+0x42>
 8005e50:	6820      	ldr	r0, [r4, #0]
 8005e52:	1821      	adds	r1, r4, r0
 8005e54:	428b      	cmp	r3, r1
 8005e56:	bf01      	itttt	eq
 8005e58:	6819      	ldreq	r1, [r3, #0]
 8005e5a:	685b      	ldreq	r3, [r3, #4]
 8005e5c:	1809      	addeq	r1, r1, r0
 8005e5e:	6021      	streq	r1, [r4, #0]
 8005e60:	e7ed      	b.n	8005e3e <_free_r+0x1e>
 8005e62:	461a      	mov	r2, r3
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	b10b      	cbz	r3, 8005e6c <_free_r+0x4c>
 8005e68:	42a3      	cmp	r3, r4
 8005e6a:	d9fa      	bls.n	8005e62 <_free_r+0x42>
 8005e6c:	6811      	ldr	r1, [r2, #0]
 8005e6e:	1850      	adds	r0, r2, r1
 8005e70:	42a0      	cmp	r0, r4
 8005e72:	d10b      	bne.n	8005e8c <_free_r+0x6c>
 8005e74:	6820      	ldr	r0, [r4, #0]
 8005e76:	4401      	add	r1, r0
 8005e78:	1850      	adds	r0, r2, r1
 8005e7a:	4283      	cmp	r3, r0
 8005e7c:	6011      	str	r1, [r2, #0]
 8005e7e:	d1e0      	bne.n	8005e42 <_free_r+0x22>
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	4408      	add	r0, r1
 8005e86:	6010      	str	r0, [r2, #0]
 8005e88:	6053      	str	r3, [r2, #4]
 8005e8a:	e7da      	b.n	8005e42 <_free_r+0x22>
 8005e8c:	d902      	bls.n	8005e94 <_free_r+0x74>
 8005e8e:	230c      	movs	r3, #12
 8005e90:	602b      	str	r3, [r5, #0]
 8005e92:	e7d6      	b.n	8005e42 <_free_r+0x22>
 8005e94:	6820      	ldr	r0, [r4, #0]
 8005e96:	1821      	adds	r1, r4, r0
 8005e98:	428b      	cmp	r3, r1
 8005e9a:	bf01      	itttt	eq
 8005e9c:	6819      	ldreq	r1, [r3, #0]
 8005e9e:	685b      	ldreq	r3, [r3, #4]
 8005ea0:	1809      	addeq	r1, r1, r0
 8005ea2:	6021      	streq	r1, [r4, #0]
 8005ea4:	6063      	str	r3, [r4, #4]
 8005ea6:	6054      	str	r4, [r2, #4]
 8005ea8:	e7cb      	b.n	8005e42 <_free_r+0x22>
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	20000854 	.word	0x20000854

08005eb0 <sbrk_aligned>:
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	4e0f      	ldr	r6, [pc, #60]	@ (8005ef0 <sbrk_aligned+0x40>)
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	6831      	ldr	r1, [r6, #0]
 8005eb8:	4605      	mov	r5, r0
 8005eba:	b911      	cbnz	r1, 8005ec2 <sbrk_aligned+0x12>
 8005ebc:	f000 fbaa 	bl	8006614 <_sbrk_r>
 8005ec0:	6030      	str	r0, [r6, #0]
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	f000 fba5 	bl	8006614 <_sbrk_r>
 8005eca:	1c43      	adds	r3, r0, #1
 8005ecc:	d103      	bne.n	8005ed6 <sbrk_aligned+0x26>
 8005ece:	f04f 34ff 	mov.w	r4, #4294967295
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	bd70      	pop	{r4, r5, r6, pc}
 8005ed6:	1cc4      	adds	r4, r0, #3
 8005ed8:	f024 0403 	bic.w	r4, r4, #3
 8005edc:	42a0      	cmp	r0, r4
 8005ede:	d0f8      	beq.n	8005ed2 <sbrk_aligned+0x22>
 8005ee0:	1a21      	subs	r1, r4, r0
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f000 fb96 	bl	8006614 <_sbrk_r>
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d1f2      	bne.n	8005ed2 <sbrk_aligned+0x22>
 8005eec:	e7ef      	b.n	8005ece <sbrk_aligned+0x1e>
 8005eee:	bf00      	nop
 8005ef0:	20000850 	.word	0x20000850

08005ef4 <_malloc_r>:
 8005ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ef8:	1ccd      	adds	r5, r1, #3
 8005efa:	f025 0503 	bic.w	r5, r5, #3
 8005efe:	3508      	adds	r5, #8
 8005f00:	2d0c      	cmp	r5, #12
 8005f02:	bf38      	it	cc
 8005f04:	250c      	movcc	r5, #12
 8005f06:	2d00      	cmp	r5, #0
 8005f08:	4606      	mov	r6, r0
 8005f0a:	db01      	blt.n	8005f10 <_malloc_r+0x1c>
 8005f0c:	42a9      	cmp	r1, r5
 8005f0e:	d904      	bls.n	8005f1a <_malloc_r+0x26>
 8005f10:	230c      	movs	r3, #12
 8005f12:	6033      	str	r3, [r6, #0]
 8005f14:	2000      	movs	r0, #0
 8005f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ff0 <_malloc_r+0xfc>
 8005f1e:	f000 f869 	bl	8005ff4 <__malloc_lock>
 8005f22:	f8d8 3000 	ldr.w	r3, [r8]
 8005f26:	461c      	mov	r4, r3
 8005f28:	bb44      	cbnz	r4, 8005f7c <_malloc_r+0x88>
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	f7ff ffbf 	bl	8005eb0 <sbrk_aligned>
 8005f32:	1c43      	adds	r3, r0, #1
 8005f34:	4604      	mov	r4, r0
 8005f36:	d158      	bne.n	8005fea <_malloc_r+0xf6>
 8005f38:	f8d8 4000 	ldr.w	r4, [r8]
 8005f3c:	4627      	mov	r7, r4
 8005f3e:	2f00      	cmp	r7, #0
 8005f40:	d143      	bne.n	8005fca <_malloc_r+0xd6>
 8005f42:	2c00      	cmp	r4, #0
 8005f44:	d04b      	beq.n	8005fde <_malloc_r+0xea>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	4639      	mov	r1, r7
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	eb04 0903 	add.w	r9, r4, r3
 8005f50:	f000 fb60 	bl	8006614 <_sbrk_r>
 8005f54:	4581      	cmp	r9, r0
 8005f56:	d142      	bne.n	8005fde <_malloc_r+0xea>
 8005f58:	6821      	ldr	r1, [r4, #0]
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	1a6d      	subs	r5, r5, r1
 8005f5e:	4629      	mov	r1, r5
 8005f60:	f7ff ffa6 	bl	8005eb0 <sbrk_aligned>
 8005f64:	3001      	adds	r0, #1
 8005f66:	d03a      	beq.n	8005fde <_malloc_r+0xea>
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	442b      	add	r3, r5
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	bb62      	cbnz	r2, 8005fd0 <_malloc_r+0xdc>
 8005f76:	f8c8 7000 	str.w	r7, [r8]
 8005f7a:	e00f      	b.n	8005f9c <_malloc_r+0xa8>
 8005f7c:	6822      	ldr	r2, [r4, #0]
 8005f7e:	1b52      	subs	r2, r2, r5
 8005f80:	d420      	bmi.n	8005fc4 <_malloc_r+0xd0>
 8005f82:	2a0b      	cmp	r2, #11
 8005f84:	d917      	bls.n	8005fb6 <_malloc_r+0xc2>
 8005f86:	1961      	adds	r1, r4, r5
 8005f88:	42a3      	cmp	r3, r4
 8005f8a:	6025      	str	r5, [r4, #0]
 8005f8c:	bf18      	it	ne
 8005f8e:	6059      	strne	r1, [r3, #4]
 8005f90:	6863      	ldr	r3, [r4, #4]
 8005f92:	bf08      	it	eq
 8005f94:	f8c8 1000 	streq.w	r1, [r8]
 8005f98:	5162      	str	r2, [r4, r5]
 8005f9a:	604b      	str	r3, [r1, #4]
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f000 f82f 	bl	8006000 <__malloc_unlock>
 8005fa2:	f104 000b 	add.w	r0, r4, #11
 8005fa6:	1d23      	adds	r3, r4, #4
 8005fa8:	f020 0007 	bic.w	r0, r0, #7
 8005fac:	1ac2      	subs	r2, r0, r3
 8005fae:	bf1c      	itt	ne
 8005fb0:	1a1b      	subne	r3, r3, r0
 8005fb2:	50a3      	strne	r3, [r4, r2]
 8005fb4:	e7af      	b.n	8005f16 <_malloc_r+0x22>
 8005fb6:	6862      	ldr	r2, [r4, #4]
 8005fb8:	42a3      	cmp	r3, r4
 8005fba:	bf0c      	ite	eq
 8005fbc:	f8c8 2000 	streq.w	r2, [r8]
 8005fc0:	605a      	strne	r2, [r3, #4]
 8005fc2:	e7eb      	b.n	8005f9c <_malloc_r+0xa8>
 8005fc4:	4623      	mov	r3, r4
 8005fc6:	6864      	ldr	r4, [r4, #4]
 8005fc8:	e7ae      	b.n	8005f28 <_malloc_r+0x34>
 8005fca:	463c      	mov	r4, r7
 8005fcc:	687f      	ldr	r7, [r7, #4]
 8005fce:	e7b6      	b.n	8005f3e <_malloc_r+0x4a>
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	42a3      	cmp	r3, r4
 8005fd6:	d1fb      	bne.n	8005fd0 <_malloc_r+0xdc>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	6053      	str	r3, [r2, #4]
 8005fdc:	e7de      	b.n	8005f9c <_malloc_r+0xa8>
 8005fde:	230c      	movs	r3, #12
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	6033      	str	r3, [r6, #0]
 8005fe4:	f000 f80c 	bl	8006000 <__malloc_unlock>
 8005fe8:	e794      	b.n	8005f14 <_malloc_r+0x20>
 8005fea:	6005      	str	r5, [r0, #0]
 8005fec:	e7d6      	b.n	8005f9c <_malloc_r+0xa8>
 8005fee:	bf00      	nop
 8005ff0:	20000854 	.word	0x20000854

08005ff4 <__malloc_lock>:
 8005ff4:	4801      	ldr	r0, [pc, #4]	@ (8005ffc <__malloc_lock+0x8>)
 8005ff6:	f7ff bf11 	b.w	8005e1c <__retarget_lock_acquire_recursive>
 8005ffa:	bf00      	nop
 8005ffc:	2000084c 	.word	0x2000084c

08006000 <__malloc_unlock>:
 8006000:	4801      	ldr	r0, [pc, #4]	@ (8006008 <__malloc_unlock+0x8>)
 8006002:	f7ff bf0c 	b.w	8005e1e <__retarget_lock_release_recursive>
 8006006:	bf00      	nop
 8006008:	2000084c 	.word	0x2000084c

0800600c <__ssputs_r>:
 800600c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006010:	461f      	mov	r7, r3
 8006012:	688e      	ldr	r6, [r1, #8]
 8006014:	4682      	mov	sl, r0
 8006016:	42be      	cmp	r6, r7
 8006018:	460c      	mov	r4, r1
 800601a:	4690      	mov	r8, r2
 800601c:	680b      	ldr	r3, [r1, #0]
 800601e:	d82d      	bhi.n	800607c <__ssputs_r+0x70>
 8006020:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006024:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006028:	d026      	beq.n	8006078 <__ssputs_r+0x6c>
 800602a:	6965      	ldr	r5, [r4, #20]
 800602c:	6909      	ldr	r1, [r1, #16]
 800602e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006032:	eba3 0901 	sub.w	r9, r3, r1
 8006036:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800603a:	1c7b      	adds	r3, r7, #1
 800603c:	444b      	add	r3, r9
 800603e:	106d      	asrs	r5, r5, #1
 8006040:	429d      	cmp	r5, r3
 8006042:	bf38      	it	cc
 8006044:	461d      	movcc	r5, r3
 8006046:	0553      	lsls	r3, r2, #21
 8006048:	d527      	bpl.n	800609a <__ssputs_r+0x8e>
 800604a:	4629      	mov	r1, r5
 800604c:	f7ff ff52 	bl	8005ef4 <_malloc_r>
 8006050:	4606      	mov	r6, r0
 8006052:	b360      	cbz	r0, 80060ae <__ssputs_r+0xa2>
 8006054:	464a      	mov	r2, r9
 8006056:	6921      	ldr	r1, [r4, #16]
 8006058:	f000 fafa 	bl	8006650 <memcpy>
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006066:	81a3      	strh	r3, [r4, #12]
 8006068:	6126      	str	r6, [r4, #16]
 800606a:	444e      	add	r6, r9
 800606c:	6026      	str	r6, [r4, #0]
 800606e:	463e      	mov	r6, r7
 8006070:	6165      	str	r5, [r4, #20]
 8006072:	eba5 0509 	sub.w	r5, r5, r9
 8006076:	60a5      	str	r5, [r4, #8]
 8006078:	42be      	cmp	r6, r7
 800607a:	d900      	bls.n	800607e <__ssputs_r+0x72>
 800607c:	463e      	mov	r6, r7
 800607e:	4632      	mov	r2, r6
 8006080:	4641      	mov	r1, r8
 8006082:	6820      	ldr	r0, [r4, #0]
 8006084:	f000 faac 	bl	80065e0 <memmove>
 8006088:	2000      	movs	r0, #0
 800608a:	68a3      	ldr	r3, [r4, #8]
 800608c:	1b9b      	subs	r3, r3, r6
 800608e:	60a3      	str	r3, [r4, #8]
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	4433      	add	r3, r6
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800609a:	462a      	mov	r2, r5
 800609c:	f000 fae6 	bl	800666c <_realloc_r>
 80060a0:	4606      	mov	r6, r0
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d1e0      	bne.n	8006068 <__ssputs_r+0x5c>
 80060a6:	4650      	mov	r0, sl
 80060a8:	6921      	ldr	r1, [r4, #16]
 80060aa:	f7ff feb9 	bl	8005e20 <_free_r>
 80060ae:	230c      	movs	r3, #12
 80060b0:	f8ca 3000 	str.w	r3, [sl]
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	f04f 30ff 	mov.w	r0, #4294967295
 80060ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060be:	81a3      	strh	r3, [r4, #12]
 80060c0:	e7e9      	b.n	8006096 <__ssputs_r+0x8a>
	...

080060c4 <_svfiprintf_r>:
 80060c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c8:	4698      	mov	r8, r3
 80060ca:	898b      	ldrh	r3, [r1, #12]
 80060cc:	4607      	mov	r7, r0
 80060ce:	061b      	lsls	r3, r3, #24
 80060d0:	460d      	mov	r5, r1
 80060d2:	4614      	mov	r4, r2
 80060d4:	b09d      	sub	sp, #116	@ 0x74
 80060d6:	d510      	bpl.n	80060fa <_svfiprintf_r+0x36>
 80060d8:	690b      	ldr	r3, [r1, #16]
 80060da:	b973      	cbnz	r3, 80060fa <_svfiprintf_r+0x36>
 80060dc:	2140      	movs	r1, #64	@ 0x40
 80060de:	f7ff ff09 	bl	8005ef4 <_malloc_r>
 80060e2:	6028      	str	r0, [r5, #0]
 80060e4:	6128      	str	r0, [r5, #16]
 80060e6:	b930      	cbnz	r0, 80060f6 <_svfiprintf_r+0x32>
 80060e8:	230c      	movs	r3, #12
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	f04f 30ff 	mov.w	r0, #4294967295
 80060f0:	b01d      	add	sp, #116	@ 0x74
 80060f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f6:	2340      	movs	r3, #64	@ 0x40
 80060f8:	616b      	str	r3, [r5, #20]
 80060fa:	2300      	movs	r3, #0
 80060fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80060fe:	2320      	movs	r3, #32
 8006100:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006104:	2330      	movs	r3, #48	@ 0x30
 8006106:	f04f 0901 	mov.w	r9, #1
 800610a:	f8cd 800c 	str.w	r8, [sp, #12]
 800610e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80062a8 <_svfiprintf_r+0x1e4>
 8006112:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006116:	4623      	mov	r3, r4
 8006118:	469a      	mov	sl, r3
 800611a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800611e:	b10a      	cbz	r2, 8006124 <_svfiprintf_r+0x60>
 8006120:	2a25      	cmp	r2, #37	@ 0x25
 8006122:	d1f9      	bne.n	8006118 <_svfiprintf_r+0x54>
 8006124:	ebba 0b04 	subs.w	fp, sl, r4
 8006128:	d00b      	beq.n	8006142 <_svfiprintf_r+0x7e>
 800612a:	465b      	mov	r3, fp
 800612c:	4622      	mov	r2, r4
 800612e:	4629      	mov	r1, r5
 8006130:	4638      	mov	r0, r7
 8006132:	f7ff ff6b 	bl	800600c <__ssputs_r>
 8006136:	3001      	adds	r0, #1
 8006138:	f000 80a7 	beq.w	800628a <_svfiprintf_r+0x1c6>
 800613c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800613e:	445a      	add	r2, fp
 8006140:	9209      	str	r2, [sp, #36]	@ 0x24
 8006142:	f89a 3000 	ldrb.w	r3, [sl]
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 809f 	beq.w	800628a <_svfiprintf_r+0x1c6>
 800614c:	2300      	movs	r3, #0
 800614e:	f04f 32ff 	mov.w	r2, #4294967295
 8006152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006156:	f10a 0a01 	add.w	sl, sl, #1
 800615a:	9304      	str	r3, [sp, #16]
 800615c:	9307      	str	r3, [sp, #28]
 800615e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006162:	931a      	str	r3, [sp, #104]	@ 0x68
 8006164:	4654      	mov	r4, sl
 8006166:	2205      	movs	r2, #5
 8006168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800616c:	484e      	ldr	r0, [pc, #312]	@ (80062a8 <_svfiprintf_r+0x1e4>)
 800616e:	f000 fa61 	bl	8006634 <memchr>
 8006172:	9a04      	ldr	r2, [sp, #16]
 8006174:	b9d8      	cbnz	r0, 80061ae <_svfiprintf_r+0xea>
 8006176:	06d0      	lsls	r0, r2, #27
 8006178:	bf44      	itt	mi
 800617a:	2320      	movmi	r3, #32
 800617c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006180:	0711      	lsls	r1, r2, #28
 8006182:	bf44      	itt	mi
 8006184:	232b      	movmi	r3, #43	@ 0x2b
 8006186:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800618a:	f89a 3000 	ldrb.w	r3, [sl]
 800618e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006190:	d015      	beq.n	80061be <_svfiprintf_r+0xfa>
 8006192:	4654      	mov	r4, sl
 8006194:	2000      	movs	r0, #0
 8006196:	f04f 0c0a 	mov.w	ip, #10
 800619a:	9a07      	ldr	r2, [sp, #28]
 800619c:	4621      	mov	r1, r4
 800619e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061a2:	3b30      	subs	r3, #48	@ 0x30
 80061a4:	2b09      	cmp	r3, #9
 80061a6:	d94b      	bls.n	8006240 <_svfiprintf_r+0x17c>
 80061a8:	b1b0      	cbz	r0, 80061d8 <_svfiprintf_r+0x114>
 80061aa:	9207      	str	r2, [sp, #28]
 80061ac:	e014      	b.n	80061d8 <_svfiprintf_r+0x114>
 80061ae:	eba0 0308 	sub.w	r3, r0, r8
 80061b2:	fa09 f303 	lsl.w	r3, r9, r3
 80061b6:	4313      	orrs	r3, r2
 80061b8:	46a2      	mov	sl, r4
 80061ba:	9304      	str	r3, [sp, #16]
 80061bc:	e7d2      	b.n	8006164 <_svfiprintf_r+0xa0>
 80061be:	9b03      	ldr	r3, [sp, #12]
 80061c0:	1d19      	adds	r1, r3, #4
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	9103      	str	r1, [sp, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	bfbb      	ittet	lt
 80061ca:	425b      	neglt	r3, r3
 80061cc:	f042 0202 	orrlt.w	r2, r2, #2
 80061d0:	9307      	strge	r3, [sp, #28]
 80061d2:	9307      	strlt	r3, [sp, #28]
 80061d4:	bfb8      	it	lt
 80061d6:	9204      	strlt	r2, [sp, #16]
 80061d8:	7823      	ldrb	r3, [r4, #0]
 80061da:	2b2e      	cmp	r3, #46	@ 0x2e
 80061dc:	d10a      	bne.n	80061f4 <_svfiprintf_r+0x130>
 80061de:	7863      	ldrb	r3, [r4, #1]
 80061e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80061e2:	d132      	bne.n	800624a <_svfiprintf_r+0x186>
 80061e4:	9b03      	ldr	r3, [sp, #12]
 80061e6:	3402      	adds	r4, #2
 80061e8:	1d1a      	adds	r2, r3, #4
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	9203      	str	r2, [sp, #12]
 80061ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061f2:	9305      	str	r3, [sp, #20]
 80061f4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80062ac <_svfiprintf_r+0x1e8>
 80061f8:	2203      	movs	r2, #3
 80061fa:	4650      	mov	r0, sl
 80061fc:	7821      	ldrb	r1, [r4, #0]
 80061fe:	f000 fa19 	bl	8006634 <memchr>
 8006202:	b138      	cbz	r0, 8006214 <_svfiprintf_r+0x150>
 8006204:	2240      	movs	r2, #64	@ 0x40
 8006206:	9b04      	ldr	r3, [sp, #16]
 8006208:	eba0 000a 	sub.w	r0, r0, sl
 800620c:	4082      	lsls	r2, r0
 800620e:	4313      	orrs	r3, r2
 8006210:	3401      	adds	r4, #1
 8006212:	9304      	str	r3, [sp, #16]
 8006214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006218:	2206      	movs	r2, #6
 800621a:	4825      	ldr	r0, [pc, #148]	@ (80062b0 <_svfiprintf_r+0x1ec>)
 800621c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006220:	f000 fa08 	bl	8006634 <memchr>
 8006224:	2800      	cmp	r0, #0
 8006226:	d036      	beq.n	8006296 <_svfiprintf_r+0x1d2>
 8006228:	4b22      	ldr	r3, [pc, #136]	@ (80062b4 <_svfiprintf_r+0x1f0>)
 800622a:	bb1b      	cbnz	r3, 8006274 <_svfiprintf_r+0x1b0>
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	3307      	adds	r3, #7
 8006230:	f023 0307 	bic.w	r3, r3, #7
 8006234:	3308      	adds	r3, #8
 8006236:	9303      	str	r3, [sp, #12]
 8006238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800623a:	4433      	add	r3, r6
 800623c:	9309      	str	r3, [sp, #36]	@ 0x24
 800623e:	e76a      	b.n	8006116 <_svfiprintf_r+0x52>
 8006240:	460c      	mov	r4, r1
 8006242:	2001      	movs	r0, #1
 8006244:	fb0c 3202 	mla	r2, ip, r2, r3
 8006248:	e7a8      	b.n	800619c <_svfiprintf_r+0xd8>
 800624a:	2300      	movs	r3, #0
 800624c:	f04f 0c0a 	mov.w	ip, #10
 8006250:	4619      	mov	r1, r3
 8006252:	3401      	adds	r4, #1
 8006254:	9305      	str	r3, [sp, #20]
 8006256:	4620      	mov	r0, r4
 8006258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800625c:	3a30      	subs	r2, #48	@ 0x30
 800625e:	2a09      	cmp	r2, #9
 8006260:	d903      	bls.n	800626a <_svfiprintf_r+0x1a6>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0c6      	beq.n	80061f4 <_svfiprintf_r+0x130>
 8006266:	9105      	str	r1, [sp, #20]
 8006268:	e7c4      	b.n	80061f4 <_svfiprintf_r+0x130>
 800626a:	4604      	mov	r4, r0
 800626c:	2301      	movs	r3, #1
 800626e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006272:	e7f0      	b.n	8006256 <_svfiprintf_r+0x192>
 8006274:	ab03      	add	r3, sp, #12
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	462a      	mov	r2, r5
 800627a:	4638      	mov	r0, r7
 800627c:	4b0e      	ldr	r3, [pc, #56]	@ (80062b8 <_svfiprintf_r+0x1f4>)
 800627e:	a904      	add	r1, sp, #16
 8006280:	f3af 8000 	nop.w
 8006284:	1c42      	adds	r2, r0, #1
 8006286:	4606      	mov	r6, r0
 8006288:	d1d6      	bne.n	8006238 <_svfiprintf_r+0x174>
 800628a:	89ab      	ldrh	r3, [r5, #12]
 800628c:	065b      	lsls	r3, r3, #25
 800628e:	f53f af2d 	bmi.w	80060ec <_svfiprintf_r+0x28>
 8006292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006294:	e72c      	b.n	80060f0 <_svfiprintf_r+0x2c>
 8006296:	ab03      	add	r3, sp, #12
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	462a      	mov	r2, r5
 800629c:	4638      	mov	r0, r7
 800629e:	4b06      	ldr	r3, [pc, #24]	@ (80062b8 <_svfiprintf_r+0x1f4>)
 80062a0:	a904      	add	r1, sp, #16
 80062a2:	f000 f87d 	bl	80063a0 <_printf_i>
 80062a6:	e7ed      	b.n	8006284 <_svfiprintf_r+0x1c0>
 80062a8:	08006a16 	.word	0x08006a16
 80062ac:	08006a1c 	.word	0x08006a1c
 80062b0:	08006a20 	.word	0x08006a20
 80062b4:	00000000 	.word	0x00000000
 80062b8:	0800600d 	.word	0x0800600d

080062bc <_printf_common>:
 80062bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c0:	4616      	mov	r6, r2
 80062c2:	4698      	mov	r8, r3
 80062c4:	688a      	ldr	r2, [r1, #8]
 80062c6:	690b      	ldr	r3, [r1, #16]
 80062c8:	4607      	mov	r7, r0
 80062ca:	4293      	cmp	r3, r2
 80062cc:	bfb8      	it	lt
 80062ce:	4613      	movlt	r3, r2
 80062d0:	6033      	str	r3, [r6, #0]
 80062d2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062d6:	460c      	mov	r4, r1
 80062d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062dc:	b10a      	cbz	r2, 80062e2 <_printf_common+0x26>
 80062de:	3301      	adds	r3, #1
 80062e0:	6033      	str	r3, [r6, #0]
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	0699      	lsls	r1, r3, #26
 80062e6:	bf42      	ittt	mi
 80062e8:	6833      	ldrmi	r3, [r6, #0]
 80062ea:	3302      	addmi	r3, #2
 80062ec:	6033      	strmi	r3, [r6, #0]
 80062ee:	6825      	ldr	r5, [r4, #0]
 80062f0:	f015 0506 	ands.w	r5, r5, #6
 80062f4:	d106      	bne.n	8006304 <_printf_common+0x48>
 80062f6:	f104 0a19 	add.w	sl, r4, #25
 80062fa:	68e3      	ldr	r3, [r4, #12]
 80062fc:	6832      	ldr	r2, [r6, #0]
 80062fe:	1a9b      	subs	r3, r3, r2
 8006300:	42ab      	cmp	r3, r5
 8006302:	dc2b      	bgt.n	800635c <_printf_common+0xa0>
 8006304:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006308:	6822      	ldr	r2, [r4, #0]
 800630a:	3b00      	subs	r3, #0
 800630c:	bf18      	it	ne
 800630e:	2301      	movne	r3, #1
 8006310:	0692      	lsls	r2, r2, #26
 8006312:	d430      	bmi.n	8006376 <_printf_common+0xba>
 8006314:	4641      	mov	r1, r8
 8006316:	4638      	mov	r0, r7
 8006318:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800631c:	47c8      	blx	r9
 800631e:	3001      	adds	r0, #1
 8006320:	d023      	beq.n	800636a <_printf_common+0xae>
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	6922      	ldr	r2, [r4, #16]
 8006326:	f003 0306 	and.w	r3, r3, #6
 800632a:	2b04      	cmp	r3, #4
 800632c:	bf14      	ite	ne
 800632e:	2500      	movne	r5, #0
 8006330:	6833      	ldreq	r3, [r6, #0]
 8006332:	f04f 0600 	mov.w	r6, #0
 8006336:	bf08      	it	eq
 8006338:	68e5      	ldreq	r5, [r4, #12]
 800633a:	f104 041a 	add.w	r4, r4, #26
 800633e:	bf08      	it	eq
 8006340:	1aed      	subeq	r5, r5, r3
 8006342:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006346:	bf08      	it	eq
 8006348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800634c:	4293      	cmp	r3, r2
 800634e:	bfc4      	itt	gt
 8006350:	1a9b      	subgt	r3, r3, r2
 8006352:	18ed      	addgt	r5, r5, r3
 8006354:	42b5      	cmp	r5, r6
 8006356:	d11a      	bne.n	800638e <_printf_common+0xd2>
 8006358:	2000      	movs	r0, #0
 800635a:	e008      	b.n	800636e <_printf_common+0xb2>
 800635c:	2301      	movs	r3, #1
 800635e:	4652      	mov	r2, sl
 8006360:	4641      	mov	r1, r8
 8006362:	4638      	mov	r0, r7
 8006364:	47c8      	blx	r9
 8006366:	3001      	adds	r0, #1
 8006368:	d103      	bne.n	8006372 <_printf_common+0xb6>
 800636a:	f04f 30ff 	mov.w	r0, #4294967295
 800636e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006372:	3501      	adds	r5, #1
 8006374:	e7c1      	b.n	80062fa <_printf_common+0x3e>
 8006376:	2030      	movs	r0, #48	@ 0x30
 8006378:	18e1      	adds	r1, r4, r3
 800637a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006384:	4422      	add	r2, r4
 8006386:	3302      	adds	r3, #2
 8006388:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800638c:	e7c2      	b.n	8006314 <_printf_common+0x58>
 800638e:	2301      	movs	r3, #1
 8006390:	4622      	mov	r2, r4
 8006392:	4641      	mov	r1, r8
 8006394:	4638      	mov	r0, r7
 8006396:	47c8      	blx	r9
 8006398:	3001      	adds	r0, #1
 800639a:	d0e6      	beq.n	800636a <_printf_common+0xae>
 800639c:	3601      	adds	r6, #1
 800639e:	e7d9      	b.n	8006354 <_printf_common+0x98>

080063a0 <_printf_i>:
 80063a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063a4:	7e0f      	ldrb	r7, [r1, #24]
 80063a6:	4691      	mov	r9, r2
 80063a8:	2f78      	cmp	r7, #120	@ 0x78
 80063aa:	4680      	mov	r8, r0
 80063ac:	460c      	mov	r4, r1
 80063ae:	469a      	mov	sl, r3
 80063b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063b6:	d807      	bhi.n	80063c8 <_printf_i+0x28>
 80063b8:	2f62      	cmp	r7, #98	@ 0x62
 80063ba:	d80a      	bhi.n	80063d2 <_printf_i+0x32>
 80063bc:	2f00      	cmp	r7, #0
 80063be:	f000 80d3 	beq.w	8006568 <_printf_i+0x1c8>
 80063c2:	2f58      	cmp	r7, #88	@ 0x58
 80063c4:	f000 80ba 	beq.w	800653c <_printf_i+0x19c>
 80063c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063d0:	e03a      	b.n	8006448 <_printf_i+0xa8>
 80063d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063d6:	2b15      	cmp	r3, #21
 80063d8:	d8f6      	bhi.n	80063c8 <_printf_i+0x28>
 80063da:	a101      	add	r1, pc, #4	@ (adr r1, 80063e0 <_printf_i+0x40>)
 80063dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063e0:	08006439 	.word	0x08006439
 80063e4:	0800644d 	.word	0x0800644d
 80063e8:	080063c9 	.word	0x080063c9
 80063ec:	080063c9 	.word	0x080063c9
 80063f0:	080063c9 	.word	0x080063c9
 80063f4:	080063c9 	.word	0x080063c9
 80063f8:	0800644d 	.word	0x0800644d
 80063fc:	080063c9 	.word	0x080063c9
 8006400:	080063c9 	.word	0x080063c9
 8006404:	080063c9 	.word	0x080063c9
 8006408:	080063c9 	.word	0x080063c9
 800640c:	0800654f 	.word	0x0800654f
 8006410:	08006477 	.word	0x08006477
 8006414:	08006509 	.word	0x08006509
 8006418:	080063c9 	.word	0x080063c9
 800641c:	080063c9 	.word	0x080063c9
 8006420:	08006571 	.word	0x08006571
 8006424:	080063c9 	.word	0x080063c9
 8006428:	08006477 	.word	0x08006477
 800642c:	080063c9 	.word	0x080063c9
 8006430:	080063c9 	.word	0x080063c9
 8006434:	08006511 	.word	0x08006511
 8006438:	6833      	ldr	r3, [r6, #0]
 800643a:	1d1a      	adds	r2, r3, #4
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6032      	str	r2, [r6, #0]
 8006440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006444:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006448:	2301      	movs	r3, #1
 800644a:	e09e      	b.n	800658a <_printf_i+0x1ea>
 800644c:	6833      	ldr	r3, [r6, #0]
 800644e:	6820      	ldr	r0, [r4, #0]
 8006450:	1d19      	adds	r1, r3, #4
 8006452:	6031      	str	r1, [r6, #0]
 8006454:	0606      	lsls	r6, r0, #24
 8006456:	d501      	bpl.n	800645c <_printf_i+0xbc>
 8006458:	681d      	ldr	r5, [r3, #0]
 800645a:	e003      	b.n	8006464 <_printf_i+0xc4>
 800645c:	0645      	lsls	r5, r0, #25
 800645e:	d5fb      	bpl.n	8006458 <_printf_i+0xb8>
 8006460:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006464:	2d00      	cmp	r5, #0
 8006466:	da03      	bge.n	8006470 <_printf_i+0xd0>
 8006468:	232d      	movs	r3, #45	@ 0x2d
 800646a:	426d      	negs	r5, r5
 800646c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006470:	230a      	movs	r3, #10
 8006472:	4859      	ldr	r0, [pc, #356]	@ (80065d8 <_printf_i+0x238>)
 8006474:	e011      	b.n	800649a <_printf_i+0xfa>
 8006476:	6821      	ldr	r1, [r4, #0]
 8006478:	6833      	ldr	r3, [r6, #0]
 800647a:	0608      	lsls	r0, r1, #24
 800647c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006480:	d402      	bmi.n	8006488 <_printf_i+0xe8>
 8006482:	0649      	lsls	r1, r1, #25
 8006484:	bf48      	it	mi
 8006486:	b2ad      	uxthmi	r5, r5
 8006488:	2f6f      	cmp	r7, #111	@ 0x6f
 800648a:	6033      	str	r3, [r6, #0]
 800648c:	bf14      	ite	ne
 800648e:	230a      	movne	r3, #10
 8006490:	2308      	moveq	r3, #8
 8006492:	4851      	ldr	r0, [pc, #324]	@ (80065d8 <_printf_i+0x238>)
 8006494:	2100      	movs	r1, #0
 8006496:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800649a:	6866      	ldr	r6, [r4, #4]
 800649c:	2e00      	cmp	r6, #0
 800649e:	bfa8      	it	ge
 80064a0:	6821      	ldrge	r1, [r4, #0]
 80064a2:	60a6      	str	r6, [r4, #8]
 80064a4:	bfa4      	itt	ge
 80064a6:	f021 0104 	bicge.w	r1, r1, #4
 80064aa:	6021      	strge	r1, [r4, #0]
 80064ac:	b90d      	cbnz	r5, 80064b2 <_printf_i+0x112>
 80064ae:	2e00      	cmp	r6, #0
 80064b0:	d04b      	beq.n	800654a <_printf_i+0x1aa>
 80064b2:	4616      	mov	r6, r2
 80064b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80064b8:	fb03 5711 	mls	r7, r3, r1, r5
 80064bc:	5dc7      	ldrb	r7, [r0, r7]
 80064be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064c2:	462f      	mov	r7, r5
 80064c4:	42bb      	cmp	r3, r7
 80064c6:	460d      	mov	r5, r1
 80064c8:	d9f4      	bls.n	80064b4 <_printf_i+0x114>
 80064ca:	2b08      	cmp	r3, #8
 80064cc:	d10b      	bne.n	80064e6 <_printf_i+0x146>
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	07df      	lsls	r7, r3, #31
 80064d2:	d508      	bpl.n	80064e6 <_printf_i+0x146>
 80064d4:	6923      	ldr	r3, [r4, #16]
 80064d6:	6861      	ldr	r1, [r4, #4]
 80064d8:	4299      	cmp	r1, r3
 80064da:	bfde      	ittt	le
 80064dc:	2330      	movle	r3, #48	@ 0x30
 80064de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064e6:	1b92      	subs	r2, r2, r6
 80064e8:	6122      	str	r2, [r4, #16]
 80064ea:	464b      	mov	r3, r9
 80064ec:	4621      	mov	r1, r4
 80064ee:	4640      	mov	r0, r8
 80064f0:	f8cd a000 	str.w	sl, [sp]
 80064f4:	aa03      	add	r2, sp, #12
 80064f6:	f7ff fee1 	bl	80062bc <_printf_common>
 80064fa:	3001      	adds	r0, #1
 80064fc:	d14a      	bne.n	8006594 <_printf_i+0x1f4>
 80064fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006502:	b004      	add	sp, #16
 8006504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	f043 0320 	orr.w	r3, r3, #32
 800650e:	6023      	str	r3, [r4, #0]
 8006510:	2778      	movs	r7, #120	@ 0x78
 8006512:	4832      	ldr	r0, [pc, #200]	@ (80065dc <_printf_i+0x23c>)
 8006514:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	6831      	ldr	r1, [r6, #0]
 800651c:	061f      	lsls	r7, r3, #24
 800651e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006522:	d402      	bmi.n	800652a <_printf_i+0x18a>
 8006524:	065f      	lsls	r7, r3, #25
 8006526:	bf48      	it	mi
 8006528:	b2ad      	uxthmi	r5, r5
 800652a:	6031      	str	r1, [r6, #0]
 800652c:	07d9      	lsls	r1, r3, #31
 800652e:	bf44      	itt	mi
 8006530:	f043 0320 	orrmi.w	r3, r3, #32
 8006534:	6023      	strmi	r3, [r4, #0]
 8006536:	b11d      	cbz	r5, 8006540 <_printf_i+0x1a0>
 8006538:	2310      	movs	r3, #16
 800653a:	e7ab      	b.n	8006494 <_printf_i+0xf4>
 800653c:	4826      	ldr	r0, [pc, #152]	@ (80065d8 <_printf_i+0x238>)
 800653e:	e7e9      	b.n	8006514 <_printf_i+0x174>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	f023 0320 	bic.w	r3, r3, #32
 8006546:	6023      	str	r3, [r4, #0]
 8006548:	e7f6      	b.n	8006538 <_printf_i+0x198>
 800654a:	4616      	mov	r6, r2
 800654c:	e7bd      	b.n	80064ca <_printf_i+0x12a>
 800654e:	6833      	ldr	r3, [r6, #0]
 8006550:	6825      	ldr	r5, [r4, #0]
 8006552:	1d18      	adds	r0, r3, #4
 8006554:	6961      	ldr	r1, [r4, #20]
 8006556:	6030      	str	r0, [r6, #0]
 8006558:	062e      	lsls	r6, r5, #24
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	d501      	bpl.n	8006562 <_printf_i+0x1c2>
 800655e:	6019      	str	r1, [r3, #0]
 8006560:	e002      	b.n	8006568 <_printf_i+0x1c8>
 8006562:	0668      	lsls	r0, r5, #25
 8006564:	d5fb      	bpl.n	800655e <_printf_i+0x1be>
 8006566:	8019      	strh	r1, [r3, #0]
 8006568:	2300      	movs	r3, #0
 800656a:	4616      	mov	r6, r2
 800656c:	6123      	str	r3, [r4, #16]
 800656e:	e7bc      	b.n	80064ea <_printf_i+0x14a>
 8006570:	6833      	ldr	r3, [r6, #0]
 8006572:	2100      	movs	r1, #0
 8006574:	1d1a      	adds	r2, r3, #4
 8006576:	6032      	str	r2, [r6, #0]
 8006578:	681e      	ldr	r6, [r3, #0]
 800657a:	6862      	ldr	r2, [r4, #4]
 800657c:	4630      	mov	r0, r6
 800657e:	f000 f859 	bl	8006634 <memchr>
 8006582:	b108      	cbz	r0, 8006588 <_printf_i+0x1e8>
 8006584:	1b80      	subs	r0, r0, r6
 8006586:	6060      	str	r0, [r4, #4]
 8006588:	6863      	ldr	r3, [r4, #4]
 800658a:	6123      	str	r3, [r4, #16]
 800658c:	2300      	movs	r3, #0
 800658e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006592:	e7aa      	b.n	80064ea <_printf_i+0x14a>
 8006594:	4632      	mov	r2, r6
 8006596:	4649      	mov	r1, r9
 8006598:	4640      	mov	r0, r8
 800659a:	6923      	ldr	r3, [r4, #16]
 800659c:	47d0      	blx	sl
 800659e:	3001      	adds	r0, #1
 80065a0:	d0ad      	beq.n	80064fe <_printf_i+0x15e>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	079b      	lsls	r3, r3, #30
 80065a6:	d413      	bmi.n	80065d0 <_printf_i+0x230>
 80065a8:	68e0      	ldr	r0, [r4, #12]
 80065aa:	9b03      	ldr	r3, [sp, #12]
 80065ac:	4298      	cmp	r0, r3
 80065ae:	bfb8      	it	lt
 80065b0:	4618      	movlt	r0, r3
 80065b2:	e7a6      	b.n	8006502 <_printf_i+0x162>
 80065b4:	2301      	movs	r3, #1
 80065b6:	4632      	mov	r2, r6
 80065b8:	4649      	mov	r1, r9
 80065ba:	4640      	mov	r0, r8
 80065bc:	47d0      	blx	sl
 80065be:	3001      	adds	r0, #1
 80065c0:	d09d      	beq.n	80064fe <_printf_i+0x15e>
 80065c2:	3501      	adds	r5, #1
 80065c4:	68e3      	ldr	r3, [r4, #12]
 80065c6:	9903      	ldr	r1, [sp, #12]
 80065c8:	1a5b      	subs	r3, r3, r1
 80065ca:	42ab      	cmp	r3, r5
 80065cc:	dcf2      	bgt.n	80065b4 <_printf_i+0x214>
 80065ce:	e7eb      	b.n	80065a8 <_printf_i+0x208>
 80065d0:	2500      	movs	r5, #0
 80065d2:	f104 0619 	add.w	r6, r4, #25
 80065d6:	e7f5      	b.n	80065c4 <_printf_i+0x224>
 80065d8:	08006a27 	.word	0x08006a27
 80065dc:	08006a38 	.word	0x08006a38

080065e0 <memmove>:
 80065e0:	4288      	cmp	r0, r1
 80065e2:	b510      	push	{r4, lr}
 80065e4:	eb01 0402 	add.w	r4, r1, r2
 80065e8:	d902      	bls.n	80065f0 <memmove+0x10>
 80065ea:	4284      	cmp	r4, r0
 80065ec:	4623      	mov	r3, r4
 80065ee:	d807      	bhi.n	8006600 <memmove+0x20>
 80065f0:	1e43      	subs	r3, r0, #1
 80065f2:	42a1      	cmp	r1, r4
 80065f4:	d008      	beq.n	8006608 <memmove+0x28>
 80065f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065fe:	e7f8      	b.n	80065f2 <memmove+0x12>
 8006600:	4601      	mov	r1, r0
 8006602:	4402      	add	r2, r0
 8006604:	428a      	cmp	r2, r1
 8006606:	d100      	bne.n	800660a <memmove+0x2a>
 8006608:	bd10      	pop	{r4, pc}
 800660a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800660e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006612:	e7f7      	b.n	8006604 <memmove+0x24>

08006614 <_sbrk_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	2300      	movs	r3, #0
 8006618:	4d05      	ldr	r5, [pc, #20]	@ (8006630 <_sbrk_r+0x1c>)
 800661a:	4604      	mov	r4, r0
 800661c:	4608      	mov	r0, r1
 800661e:	602b      	str	r3, [r5, #0]
 8006620:	f7fb ff6e 	bl	8002500 <_sbrk>
 8006624:	1c43      	adds	r3, r0, #1
 8006626:	d102      	bne.n	800662e <_sbrk_r+0x1a>
 8006628:	682b      	ldr	r3, [r5, #0]
 800662a:	b103      	cbz	r3, 800662e <_sbrk_r+0x1a>
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	bd38      	pop	{r3, r4, r5, pc}
 8006630:	20000848 	.word	0x20000848

08006634 <memchr>:
 8006634:	4603      	mov	r3, r0
 8006636:	b510      	push	{r4, lr}
 8006638:	b2c9      	uxtb	r1, r1
 800663a:	4402      	add	r2, r0
 800663c:	4293      	cmp	r3, r2
 800663e:	4618      	mov	r0, r3
 8006640:	d101      	bne.n	8006646 <memchr+0x12>
 8006642:	2000      	movs	r0, #0
 8006644:	e003      	b.n	800664e <memchr+0x1a>
 8006646:	7804      	ldrb	r4, [r0, #0]
 8006648:	3301      	adds	r3, #1
 800664a:	428c      	cmp	r4, r1
 800664c:	d1f6      	bne.n	800663c <memchr+0x8>
 800664e:	bd10      	pop	{r4, pc}

08006650 <memcpy>:
 8006650:	440a      	add	r2, r1
 8006652:	4291      	cmp	r1, r2
 8006654:	f100 33ff 	add.w	r3, r0, #4294967295
 8006658:	d100      	bne.n	800665c <memcpy+0xc>
 800665a:	4770      	bx	lr
 800665c:	b510      	push	{r4, lr}
 800665e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006662:	4291      	cmp	r1, r2
 8006664:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006668:	d1f9      	bne.n	800665e <memcpy+0xe>
 800666a:	bd10      	pop	{r4, pc}

0800666c <_realloc_r>:
 800666c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006670:	4680      	mov	r8, r0
 8006672:	4615      	mov	r5, r2
 8006674:	460c      	mov	r4, r1
 8006676:	b921      	cbnz	r1, 8006682 <_realloc_r+0x16>
 8006678:	4611      	mov	r1, r2
 800667a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800667e:	f7ff bc39 	b.w	8005ef4 <_malloc_r>
 8006682:	b92a      	cbnz	r2, 8006690 <_realloc_r+0x24>
 8006684:	f7ff fbcc 	bl	8005e20 <_free_r>
 8006688:	2400      	movs	r4, #0
 800668a:	4620      	mov	r0, r4
 800668c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006690:	f000 f81a 	bl	80066c8 <_malloc_usable_size_r>
 8006694:	4285      	cmp	r5, r0
 8006696:	4606      	mov	r6, r0
 8006698:	d802      	bhi.n	80066a0 <_realloc_r+0x34>
 800669a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800669e:	d8f4      	bhi.n	800668a <_realloc_r+0x1e>
 80066a0:	4629      	mov	r1, r5
 80066a2:	4640      	mov	r0, r8
 80066a4:	f7ff fc26 	bl	8005ef4 <_malloc_r>
 80066a8:	4607      	mov	r7, r0
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d0ec      	beq.n	8006688 <_realloc_r+0x1c>
 80066ae:	42b5      	cmp	r5, r6
 80066b0:	462a      	mov	r2, r5
 80066b2:	4621      	mov	r1, r4
 80066b4:	bf28      	it	cs
 80066b6:	4632      	movcs	r2, r6
 80066b8:	f7ff ffca 	bl	8006650 <memcpy>
 80066bc:	4621      	mov	r1, r4
 80066be:	4640      	mov	r0, r8
 80066c0:	f7ff fbae 	bl	8005e20 <_free_r>
 80066c4:	463c      	mov	r4, r7
 80066c6:	e7e0      	b.n	800668a <_realloc_r+0x1e>

080066c8 <_malloc_usable_size_r>:
 80066c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066cc:	1f18      	subs	r0, r3, #4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	bfbc      	itt	lt
 80066d2:	580b      	ldrlt	r3, [r1, r0]
 80066d4:	18c0      	addlt	r0, r0, r3
 80066d6:	4770      	bx	lr

080066d8 <_init>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	bf00      	nop
 80066dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066de:	bc08      	pop	{r3}
 80066e0:	469e      	mov	lr, r3
 80066e2:	4770      	bx	lr

080066e4 <_fini>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	bf00      	nop
 80066e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ea:	bc08      	pop	{r3}
 80066ec:	469e      	mov	lr, r3
 80066ee:	4770      	bx	lr
